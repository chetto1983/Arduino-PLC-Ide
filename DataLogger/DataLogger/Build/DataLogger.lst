***********************************************************************
*
*	CODE GENERATION LISTING FOR: DataLogger
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
300000B0  FB90 F3F1		sdiv r3, r0, r1
300000B4  4359     		mul r1, r1, r3
300000B6  EBC1 0000		rsb r0, r1, r0
300000BA  4770     		bx lr

$$MOD_U:
300000BC  FBB0 F3F1		udiv r3, r0, r1
300000C0  4359     		mul r1, r1, r3
300000C2  EBC1 0000		rsb r0, r1, r0
300000C6  4770     		bx lr

**************************************************
	List function: WeekDay
**************************************************

FUNCTION WeekDay : INT

        VAR_INPUT
Curr_Date_Time : DATE_AND_TIME;
	END_VAR

        VAR
DummyUdint : UDINT;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par Curr_Date_Time: CALLER STACK FRAME AT sp+0
	Var DummyUdint: REGISTER _TMP_32LO

300000C8  466F     		mov r7, sp
300000CA  B082     		sub sp, sp, #8
300000CC  F8CD E000		str lr, [sp]
300000D0  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
300000D4  463E     		mov r6, r7
300000D6  2400     		mov r4, #0

#0		{SRC:WeekDay}
#1		(*$WAITSWITCH$*)
#2		
#3			(* DummyUdint := TO_UDINT(Curr_Date_Time); *)
#4			LDP0		Curr_Date_Time	{LNXT:3|8|-1}
(-) UNDEF
#5			TO_UDINT	{LNXT:3|8|-1}
(-) DATE_AND_TIME
300000D8  6830     		ldr r0, [r6]

#6			ST		DummyUdint	{LNXT:3|8|-1}
(-) UDINT
300000DA  4681     		mov r9, r0

#7		
#8			(* DummyUdint :=  ((DummyUdint / 86400) +4) MOD 7; *)
#9			LD		DummyUdint	{LNXT:8|12|-1}
(-) UNDEF
300000DC  4648     		mov r0, r9

#10			DIV		86400	{LNXT:8|12|-1}
(*) UDINT
300000DE  F8DF 703C		ldr r7, [pc, #+60] ; 0x15180
300000E2  463F     		mov r7, r7
300000E4  B082     		sub sp, sp, #8
300000E6  F8CD 1000		str r1, [sp]
300000EA  4639     		mov r1, r7
300000EC  FBB0 F0F1		udiv r0, r0, r1
300000F0  F8DD 1000		ldr r1, [sp]
300000F4  B002     		add sp, sp, #8

#11			ADD		4	{LNXT:8|12|-1}
(-) UDINT
300000F6  1D00     		add r0, r0, #4

#12			MOD		7	{LNXT:8|12|-1}
(*) UDINT
300000F8  2107     		mov r1, #7 ; 7
300000FA  467C     		mov r4, pc
300000FC  3C42     		sub r4, r4, #+0x42 ; 0x300000BC
300000FE  F044 0401		orr r4, r4, #1
30000102  47A0     		blx r4

#13			ST		DummyUdint	{LNXT:8|12|-1}
(-) UDINT
30000104  4681     		mov r9, r0

#14		
#15			(* WeekDay:= TO_INT (DummyUdint); *)
#16			LDP0		DummyUdint	{LNXT:12|-1|-1}
(-) UDINT
#17			TO_INT	{LNXT:12|-1|-1}
(*) UDINT
30000106  4648     		mov r0, r9
30000108  B200     		sxth r0, r0

#18			ST		WeekDay	{LNXT:12|-1|-1}
(-) INT
3000010A  4604     		mov r4, r0

3000010C  4620     		mov r0, r4
3000010E  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
30000112  F8DD E000		ldr lr, [sp]
30000116  B002     		add sp, sp, #8

30000118  4770     		bx lr

3000011C  00015180		; 0x00015180

END_FUNCTION
**************************************************
	List function: YEAR_OF_DT
**************************************************

FUNCTION YEAR_OF_DT : INT

        VAR_INPUT
idate : DATE_AND_TIME;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par idate: CALLER STACK FRAME AT sp+0

30000120  466F     		mov r7, sp
30000122  B082     		sub sp, sp, #8
30000124  F8CD E000		str lr, [sp]
30000128  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
3000012C  463E     		mov r6, r7
3000012E  2400     		mov r4, #0

#0		{SRC:YEAR_OF_DT}
#1		(*$WAITSWITCH$*)
#2		
#3			(* YEAR_OF_DT := TO_INT((TO_DWORD(idate) + 43200) / 31557600 + 1970); *)
#4			LDP0		idate	{LNXT:12|-1|-1}
(-) UNDEF
#5			TO_DWORD	{LNXT:12|-1|-1}
(-) DATE_AND_TIME
30000130  6830     		ldr r0, [r6]

#6			ADD		43200	{LNXT:12|-1|-1}
(*) DWORD
30000132  F8DF 703C		ldr r7, [pc, #+60] ; 0xA8C0
30000136  463F     		mov r7, r7
30000138  19C0     		add r0, r0, r7

#7			DIV		31557600	{LNXT:12|-1|-1}
(*) DWORD
3000013A  F8DF 7038		ldr r7, [pc, #+56] ; 0x1E187E0
3000013E  463F     		mov r7, r7
30000140  B082     		sub sp, sp, #8
30000142  F8CD 1000		str r1, [sp]
30000146  4639     		mov r1, r7
30000148  FBB0 F0F1		udiv r0, r0, r1
3000014C  F8DD 1000		ldr r1, [sp]
30000150  B002     		add sp, sp, #8

#8			ADD		1970	{LNXT:12|-1|-1}
(*) DWORD
30000152  F8DF 7018		ldr r7, [pc, #+24] ; 0x7B2
30000156  463F     		mov r7, r7
30000158  19C0     		add r0, r0, r7

#9			TO_INT	{LNXT:12|-1|-1}
(-) DWORD
3000015A  B200     		sxth r0, r0

#10			ST		YEAR_OF_DT	{LNXT:12|-1|-1}
(-) INT
3000015C  4604     		mov r4, r0

3000015E  4620     		mov r0, r4
30000160  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
30000164  F8DD E000		ldr lr, [sp]
30000168  B002     		add sp, sp, #8

3000016A  4770     		bx lr

3000016C  000007B2		; 0x000007B2
30000170  0000A8C0		; 0x0000A8C0
30000174  01E187E0		; 0x01E187E0

END_FUNCTION
**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

30000178  E92D 4040		stmdb sp!, { r6, lr }
3000017C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3000017E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
30000180  2800     		cmp r0, #0
30000182  D130     		bne #96 ; 0x300001E6


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
30000186  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
30000188  2800     		cmp r0, #0
3000018A  D031     		beq #98 ; 0x300001F0


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3000018E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000190  2800     		cmp r0, #0
30000192  BF18 2000		nemov r0, #0
30000196  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000019A  2800     		cmp r0, #0
3000019C  D004     		beq #8 ; 0x300001A8


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300001A0  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D790
300001A4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300001A6  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300001A8  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D790
300001AC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300001AE  6837     		ldr r7, [r6]
300001B0  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
300001B2  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
300001B4  68B7     		ldr r7, [r6, #8]
300001B6  42B8     		cmp r0, r7
300001B8  BF38 2000		lomov r0, #0
300001BC  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
300001C0  B082     		sub sp, sp, #8
300001C2  F8CD 0000		str r0, [sp]
300001C6  2800     		cmp r0, #0
300001C8  BF08 2001		eqmov r0, #1
300001CC  BF18 2000		nemov r0, #0
300001D0  7330     		strb r0, [r6, #12]
300001D2  F8DD 0000		ldr r0, [sp]
300001D6  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
300001D8  2800     		cmp r0, #0
300001DA  D009     		beq #18 ; 0x300001F0


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
300001DE  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
300001E0  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
300001E2  E005     		b #10 ; 0x300001F0


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
300001E6  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
300001E8  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
300001EA  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
300001EC  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
300001EE  7330     		strb r0, [r6, #12]

300001F0  E8BD 4040		ldmia sp!, { r6, lr }

300001F4  4770     		bx lr

300001F8  FFFFFFFF		; 0x2401D790


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

300001FC  E92D 4040		stmdb sp!, { r6, lr }
30000200  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
30000202  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
30000204  2800     		cmp r0, #0
30000206  D025     		beq #74 ; 0x30000254


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3000020A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3000020C  2800     		cmp r0, #0
3000020E  D126     		bne #76 ; 0x3000025E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
30000212  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000214  2800     		cmp r0, #0
30000216  BF18 2000		nemov r0, #0
3000021A  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000021E  2800     		cmp r0, #0
30000220  D004     		beq #8 ; 0x3000022C


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000224  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D790
30000228  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3000022A  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3000022C  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D790
30000230  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
30000232  6837     		ldr r7, [r6]
30000234  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000236  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000238  68B7     		ldr r7, [r6, #8]
3000023A  42B8     		cmp r0, r7
3000023C  BF38 2000		lomov r0, #0
30000240  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
30000244  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
30000246  2800     		cmp r0, #0
30000248  D009     		beq #18 ; 0x3000025E


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000024C  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3000024E  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000250  E005     		b #10 ; 0x3000025E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000254  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000256  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
30000258  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3000025A  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3000025C  7330     		strb r0, [r6, #12]

3000025E  E8BD 4040		ldmia sp!, { r6, lr }

30000262  4770     		bx lr

30000264  FFFFFFFF		; 0x2401D790


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function: DST
**************************************************

FUNCTION DST : BOOL

        VAR_INPUT
UTC : DATE_AND_TIME;
	END_VAR

        VAR
yr : INT;
yr4 : DWORD;
ltc : DWORD;
idate : UDINT;
March31 : DATE_AND_TIME;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par UTC: CALLER STACK FRAME AT sp+0
	Var yr: REGISTER _TMP_32LO
	Var yr4: REGISTER _TMP_32HI
	Var ltc: REGISTER _GPR3
	Var idate: LOCAL STACK FRAME AT sp-4
	Var March31: LOCAL STACK FRAME AT sp-8

30000268  466F     		mov r7, sp
3000026A  B082     		sub sp, sp, #8
3000026C  B082     		sub sp, sp, #8
3000026E  F8CD E000		str lr, [sp]
30000272  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
30000276  463E     		mov r6, r7
30000278  2400     		mov r4, #0

#0		{SRC:DST}
#1		(*$WAITSWITCH$*)
#2		
#3			(* yr := YEAR_OF_DT(UTC); *)
#4			LDP0		UTC	{LNXT:2|5|-1}
(-) UNDEF
#5			YEAR_OF_DT	{LNXT:2|5|-1}
(*) DATE_AND_TIME
3000027A  B082     		sub sp, sp, #8
3000027C  F8CD 4000		str r4, [sp]
30000280  B082     		sub sp, sp, #8
30000282  6837     		ldr r7, [r6]
30000284  F8CD 7000		str r7, [sp]
30000288  F8DF 4120		ldr r4, [pc, #+288] ; 0x30000120
3000028C  F044 0401		orr r4, r4, #1
30000290  47A0     		blx r4
30000292  B002     		add sp, sp, #8
30000294  F8DD 4000		ldr r4, [sp]
30000298  B002     		add sp, sp, #8

#6			ST		yr	{LNXT:2|5|-1}
(-) INT
3000029A  4681     		mov r9, r0

#7		
#8			(* ltc := TO_DWORD(UTC); *)
#9			LDP0		UTC	{LNXT:5|8|-1}
(-) INT
#10			TO_DWORD	{LNXT:5|8|-1}
(-) DATE_AND_TIME
3000029C  6830     		ldr r0, [r6]

#11			ST		ltc	{LNXT:5|8|-1}
(-) DWORD
3000029E  4683     		mov r11, r0

#12		
#13			(* March31 := CONCAT_DT(yr, 3, 31, 0, 0, 0); *)
#14			LDP0		yr	{LNXT:8|11|-1}
(-) DWORD
#15			CONCAT_DT		3, 31, 0, 0, 0	{LNXT:8|11|-1}
(*) INT
300002A0  4648     		mov r0, r9
300002A2  B082     		sub sp, sp, #8
300002A4  F8CD 3000		str r3, [sp]
300002A8  E92D 0006		stmdb sp!, { r1, r2 }
300002AC  B082     		sub sp, sp, #8
300002AE  2700     		mov r7, #0 ; 0
300002B0  F8CD 7004		str r7, [sp, #+4]
300002B4  2700     		mov r7, #0 ; 0
300002B6  F8CD 7000		str r7, [sp]
300002BA  2300     		mov r3, #0 ; 0
300002BC  221F     		mov r2, #31 ; 31
300002BE  2103     		mov r1, #3 ; 3
300002C0  F8DF 40E0		ldr r4, [pc, #+224] ; 0x807BA29
300002C4  F044 0401		orr r4, r4, #1
300002C8  47A0     		blx r4
300002CA  B002     		add sp, sp, #8
300002CC  E8BD 0006		ldmia sp!, { r1, r2 }
300002D0  F8DD 3000		ldr r3, [sp]
300002D4  B002     		add sp, sp, #8

#16			ST		March31	{LNXT:8|11|-1}
(*) DATE_AND_TIME
300002D6  F8DF 70D8		ldr r7, [pc, #+216] ; 0xFFFFFFF8
300002DA  51F0     		str r0, [r6, +r7]

#17		
#18			(* idate := TO_UDINT(March31); *)
#19			LDP0		March31	{LNXT:11|14|-1}
(-) DATE_AND_TIME
#20			TO_UDINT	{LNXT:11|14|-1}
(*) DATE_AND_TIME
300002DC  F8DF 70D0		ldr r7, [pc, #+208] ; 0xFFFFFFF8
300002E0  59F0     		ldr r0, [r6, +r7]

#21			ST		idate	{LNXT:11|14|-1}
(*) UDINT
300002E2  F8DF 70D0		ldr r7, [pc, #+208] ; 0xFFFFFFFC
300002E6  51F0     		str r0, [r6, +r7]

#22		
#23			(* yr4 := (5 * yr) / 4; *)
#24			LD		5	{LNXT:14|15|-1}
(-) UNDEF
300002E8  2005     		mov r0, #5 ; 5

#25			MUL		yr	{LNXT:14|15|-1}
(*) USINT
300002EA  FB00 F009		mul r0, r0, r9

#26			DIV		4	{LNXT:14|15|-1}
(*) INT
300002EE  2704     		mov r7, #4 ; 4
300002F0  B082     		sub sp, sp, #8
300002F2  F8CD 1000		str r1, [sp]
300002F6  4639     		mov r1, r7
300002F8  FB90 F0F1		sdiv r0, r0, r1
300002FC  F8DD 1000		ldr r1, [sp]
30000300  B002     		add sp, sp, #8

#27			ST		yr4	{LNXT:14|15|-1}
(-) INT
30000302  4682     		mov r10, r0

#28		
#29			(* yr4 := yr4 + 1; *)
#30			LD		yr4	{LNXT:15|18|-1}
(-) UNDEF
30000304  4650     		mov r0, r10

#31			ADD		1	{LNXT:15|18|-1}
(-) DWORD
30000306  1C40     		add r0, r0, #1

#32			ST		yr4	{LNXT:15|18|-1}
(-) DWORD
30000308  4682     		mov r10, r0

#33		
#34			(* DST := (idate - ((yr4 + 3) MOD 7) * 86400 <= ltc) AND (idate + (214 - (yr4 MOD 7)) * 86400 > ltc); *)
#35			LD		214	{LNXT:18|-1|-1}
(-) UNDEF
3000030A  20D6     		mov r0, #214 ; 214

#36			SUB(		yr4	{LNXT:18|-1|-1}
(*) USINT
3000030C  B082     		sub sp, sp, #8
3000030E  F8CD 0000		str r0, [sp]
30000312  4650     		mov r0, r10

#37			MOD		7	{LNXT:18|-1|-1}
(*) DWORD
30000314  2107     		mov r1, #7 ; 7
30000316  F8DF 4090		ldr r4, [pc, #+144] ; 0x300000BC
3000031A  F044 0401		orr r4, r4, #1
3000031E  47A0     		blx r4

#38			)	{LNXT:18|-1|-1}
(*) DWORD
30000320  4607     		mov r7, r0
30000322  F8DD 0000		ldr r0, [sp]
30000326  B002     		add sp, sp, #8
30000328  1BC0     		sub r0, r0, r7

#39			MUL		86400	{LNXT:18|-1|-1}
(*) DWORD
3000032A  F8DF 7074		ldr r7, [pc, #+116] ; 0x15180
3000032E  463F     		mov r7, r7
30000330  4378     		mul r0, r0, r7

#40			ADD		idate	{LNXT:18|-1|-1}
(*) DWORD
30000332  F8DF 7080		ldr r7, [pc, #+128] ; 0xFFFFFFFC
30000336  59F7     		ldr r7, [r6, +r7]
30000338  19C0     		add r0, r0, r7

#41			GT		ltc	{LNXT:18|-1|-1}
(*) DWORD
3000033A  4558     		cmp r0, r11
3000033C  BF98 2000		lsmov r0, #0
30000340  BF88 2001		himov r0, #1

#42			AND(		idate	{LNXT:18|-1|-1}
(*) BOOL
30000344  B082     		sub sp, sp, #8
30000346  F8CD 0000		str r0, [sp]
3000034A  F8DF 7068		ldr r7, [pc, #+104] ; 0xFFFFFFFC
3000034E  59F0     		ldr r0, [r6, +r7]

#43			SUB(		yr4	{LNXT:18|-1|-1}
(*) UDINT
30000350  B082     		sub sp, sp, #8
30000352  F8CD 0000		str r0, [sp]
30000356  4650     		mov r0, r10

#44			ADD		3	{LNXT:18|-1|-1}
(-) DWORD
30000358  1CC0     		add r0, r0, #3

#45			MOD		7	{LNXT:18|-1|-1}
(*) DWORD
3000035A  2107     		mov r1, #7 ; 7
3000035C  F8DF 4048		ldr r4, [pc, #+72] ; 0x300000BC
30000360  F044 0401		orr r4, r4, #1
30000364  47A0     		blx r4

#46			MUL		86400	{LNXT:18|-1|-1}
(*) DWORD
30000366  F8DF 7038		ldr r7, [pc, #+56] ; 0x15180
3000036A  463F     		mov r7, r7
3000036C  4378     		mul r0, r0, r7

#47			)	{LNXT:18|-1|-1}
(*) DWORD
3000036E  4607     		mov r7, r0
30000370  F8DD 0000		ldr r0, [sp]
30000374  B002     		add sp, sp, #8
30000376  1BC0     		sub r0, r0, r7

#48			LE		ltc	{LNXT:18|-1|-1}
(*) UDINT
30000378  4558     		cmp r0, r11
3000037A  BF88 2000		himov r0, #0
3000037E  BF98 2001		lsmov r0, #1

#49			)	{LNXT:18|-1|-1}
(*) BOOL
30000382  4607     		mov r7, r0
30000384  F8DD 0000		ldr r0, [sp]
30000388  B002     		add sp, sp, #8
3000038A  4038     		and r0, r0, r7

#50			ST		DST	{LNXT:18|-1|-1}
(-) BOOL
3000038C  4604     		mov r4, r0

3000038E  4620     		mov r0, r4
30000390  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
30000394  F8DD E000		ldr lr, [sp]
30000398  B002     		add sp, sp, #8
3000039A  B002     		add sp, sp, #8

3000039C  4770     		bx lr

300003A0  00015180		; 0x00015180
300003A4  FFFFFFFF		; 0x0807BA29
300003A8  300000BC		; 0x300000BC
300003AC  30000120		; 0x30000120
300003B0  FFFFFFF8		; 0xFFFFFFF8
300003B4  FFFFFFFC		; 0xFFFFFFFC

END_FUNCTION
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

300003B8  E92D 4040		stmdb sp!, { r6, lr }
300003BC  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
300003BE  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
300003C2  5DF0     		ldrb r0, [r6, +r7]
300003C4  2800     		cmp r0, #0
300003C6  BF08 2001		eqmov r0, #1
300003CA  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
300003CE  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
300003D0  6AF0     		ldr r0, [r6, #44]
300003D2  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
300003D4  E92D 0021		stmdb sp!, { r0, r5 }
300003D8  4635     		mov r5, r6
300003DA  F8DF 4050		ldr r4, [pc, #+80] ; 0x300001FC
300003DE  F044 0401		orr r4, r4, #1
300003E2  47A0     		blx r4
300003E4  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
300003E8  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
300003EA  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
300003EC  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
300003EE  6AF0     		ldr r0, [r6, #44]
300003F0  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
300003F2  E92D 0021		stmdb sp!, { r0, r5 }
300003F6  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
300003FA  19F5     		add r5, r6, r7
300003FC  F8DF 4028		ldr r4, [pc, #+40] ; 0x30000178
30000400  F044 0401		orr r4, r4, #1
30000404  47A0     		blx r4
30000406  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3000040A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3000040E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
30000410  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
30000414  55F0     		strb r0, [r6, +r7]

30000416  E8BD 4040		ldmia sp!, { r6, lr }

3000041A  4770     		bx lr

3000041C  00000014		; 0x00000014
30000420  00000020		; 0x00000020
30000424  00000030		; 0x00000030
30000428  30000178		; 0x30000178
3000042C  300001FC		; 0x300001FC


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List function block: Set_Data_Time
**************************************************

FUNCTION_BLOCK Set_Data_Time

        VAR_IN_OUT
bSetTime : BOOL;
	END_VAR

        VAR_INPUT
iSetYears : INT;
iSetMonth : INT;
iSetDay : INT;
iSetHour : INT;
iSetMinute : INT;
iSetSeconds : INT;
iTimeZone : INT;
UseDST : BOOL;	{ DE:"Use Eu saving time" }
bArduino_TimeOk : BOOL;
	END_VAR

        VAR_OUTPUT
udiTimeSet : UDINT;
bArduino_Set : BOOL;
	END_VAR

        VAR
NONAME : BOOL;
dummyUdint : UDINT;
bIsDts : BOOL;
SetYears : INT;
SetMonth : INT;
SetDay : INT;
SetHour : INT;
SetMinute : INT;
SetSeconds : INT;
TimeZone : INT;
	END_VAR

END_FUNCTION_BLOCK

30000430  E92D 4040		stmdb sp!, { r6, lr }
30000434  462E     		mov r6, r5

#0		{SRC:Set_Data_Time}
#1		(*$WAITSWITCH$*)
#2		
#3			(* SetYears:= LIMIT(iSetYears,1970,2038); *)
#4			LDP0		iSetYears	{LNXT:4|5|-1}
(-) UNDEF
#5			LIMIT		1970, 2038	{LNXT:4|5|-1}
(*) INT
30000436  F8DF 71BC		ldr r7, [pc, #+444] ; 0x18
3000043A  5FF0     		ldrsh r0, [r6, +r7]
3000043C  F8DF 71E0		ldr r7, [pc, #+480] ; 0x7B2
30000440  463F     		mov r7, r7
30000442  42B8     		cmp r0, r7
30000444  DA01     		bge #0x000002
30000446  4638     		mov r0, r7
30000448  E005     		b #0x00000A
3000044A  F8DF 71D8		ldr r7, [pc, #+472] ; 0x7F6
3000044E  463F     		mov r7, r7
30000450  42B8     		cmp r0, r7
30000452  DD00     		ble #0x000000
30000454  4638     		mov r0, r7

#6			ST		SetYears	{LNXT:4|5|-1}
(-) INT
30000456  8170     		strh r0, [r6, #10]

#7		
#8			(* SetMonth:= LIMIT(iSetMonth,1,12); *)
#9			LDP0		iSetMonth	{LNXT:5|6|-1}
(-) INT
#10			LIMIT		1, 12	{LNXT:5|6|-1}
(*) INT
30000458  F8DF 719C		ldr r7, [pc, #+412] ; 0x1A
3000045C  5FF0     		ldrsh r0, [r6, +r7]
3000045E  2701     		mov r7, #1 ; 1
30000460  2701     		mov r7, #1 ; 1
30000462  42B8     		cmp r0, r7
30000464  DA01     		bge #0x000002
30000466  4638     		mov r0, r7
30000468  E004     		b #0x000008
3000046A  270C     		mov r7, #12 ; 12
3000046C  270C     		mov r7, #12 ; 12
3000046E  42B8     		cmp r0, r7
30000470  DD00     		ble #0x000000
30000472  4638     		mov r0, r7

#11			ST		SetMonth	{LNXT:5|6|-1}
(-) INT
30000474  81B0     		strh r0, [r6, #12]

#12		
#13			(* SetDay:= LIMIT(iSetDay,1,31); *)
#14			LDP0		iSetDay	{LNXT:6|7|-1}
(-) INT
#15			LIMIT		1, 31	{LNXT:6|7|-1}
(*) INT
30000476  F8DF 7184		ldr r7, [pc, #+388] ; 0x1C
3000047A  5FF0     		ldrsh r0, [r6, +r7]
3000047C  2701     		mov r7, #1 ; 1
3000047E  2701     		mov r7, #1 ; 1
30000480  42B8     		cmp r0, r7
30000482  DA01     		bge #0x000002
30000484  4638     		mov r0, r7
30000486  E004     		b #0x000008
30000488  271F     		mov r7, #31 ; 31
3000048A  271F     		mov r7, #31 ; 31
3000048C  42B8     		cmp r0, r7
3000048E  DD00     		ble #0x000000
30000490  4638     		mov r0, r7

#16			ST		SetDay	{LNXT:6|7|-1}
(-) INT
30000492  81F0     		strh r0, [r6, #14]

#17		
#18			(* SetHour:= LIMIT(iSetHour,0,23); *)
#19			LDP0		iSetHour	{LNXT:7|8|-1}
(-) INT
#20			LIMIT		0, 23	{LNXT:7|8|-1}
(*) INT
30000494  F8DF 7168		ldr r7, [pc, #+360] ; 0x1E
30000498  5FF0     		ldrsh r0, [r6, +r7]
3000049A  2700     		mov r7, #0 ; 0
3000049C  2700     		mov r7, #0 ; 0
3000049E  42B8     		cmp r0, r7
300004A0  DA01     		bge #0x000002
300004A2  4638     		mov r0, r7
300004A4  E004     		b #0x000008
300004A6  2717     		mov r7, #23 ; 23
300004A8  2717     		mov r7, #23 ; 23
300004AA  42B8     		cmp r0, r7
300004AC  DD00     		ble #0x000000
300004AE  4638     		mov r0, r7

#21			ST		SetHour	{LNXT:7|8|-1}
(-) INT
300004B0  8230     		strh r0, [r6, #16]

#22		
#23			(* SetMinute:= LIMIT(iSetMinute,0,59); *)
#24			LDP0		iSetMinute	{LNXT:8|9|-1}
(-) INT
#25			LIMIT		0, 59	{LNXT:8|9|-1}
(*) INT
300004B2  F8DF 7150		ldr r7, [pc, #+336] ; 0x20
300004B6  5FF0     		ldrsh r0, [r6, +r7]
300004B8  2700     		mov r7, #0 ; 0
300004BA  2700     		mov r7, #0 ; 0
300004BC  42B8     		cmp r0, r7
300004BE  DA01     		bge #0x000002
300004C0  4638     		mov r0, r7
300004C2  E004     		b #0x000008
300004C4  273B     		mov r7, #59 ; 59
300004C6  273B     		mov r7, #59 ; 59
300004C8  42B8     		cmp r0, r7
300004CA  DD00     		ble #0x000000
300004CC  4638     		mov r0, r7

#26			ST		SetMinute	{LNXT:8|9|-1}
(-) INT
300004CE  8270     		strh r0, [r6, #18]

#27		
#28			(* SetSeconds:= LIMIT(iSetSeconds,0,59); *)
#29			LDP0		iSetSeconds	{LNXT:9|11|-1}
(-) INT
#30			LIMIT		0, 59	{LNXT:9|11|-1}
(*) INT
300004D0  F8DF 7134		ldr r7, [pc, #+308] ; 0x22
300004D4  5FF0     		ldrsh r0, [r6, +r7]
300004D6  2700     		mov r7, #0 ; 0
300004D8  2700     		mov r7, #0 ; 0
300004DA  42B8     		cmp r0, r7
300004DC  DA01     		bge #0x000002
300004DE  4638     		mov r0, r7
300004E0  E004     		b #0x000008
300004E2  273B     		mov r7, #59 ; 59
300004E4  273B     		mov r7, #59 ; 59
300004E6  42B8     		cmp r0, r7
300004E8  DD00     		ble #0x000000
300004EA  4638     		mov r0, r7

#31			ST		SetSeconds	{LNXT:9|11|-1}
(-) INT
300004EC  82B0     		strh r0, [r6, #20]

#32		
#33		
#34			(* IF bSetTime *)
#35			LD		bSetTime	{LNXT:11|-1|-1}
(*) UNDEF
300004EE  F8DF 712C		ldr r7, [pc, #+300] ; 0x2D
300004F2  5DF0     		ldrb r0, [r6, +r7]

#36			JMPCN	$label0	{LNXT:11|14|43}
(-) BOOL
300004F4  2800     		cmp r0, #0
300004F6  D05F     		beq #190 ; 0x300005B8


#37		
#38			(* THEN *)
#39		
#40				(* dummyUdint := TO_UDINT(CONCAT_DT(SetYears,SetMonth,SetDay,SetHour,SetMinute,SetSeconds)); *)
#41				LDP0		SetYears	{LNXT:14|20|-1}
(-) BOOL
#42				CONCAT_DT		SetMonth, SetDay, SetHour, SetMinute, SetSeconds	{LNXT:14|20|-1}
(*) INT
300004FA  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA
300004FE  5FF0     		ldrsh r0, [r6, +r7]
30000500  B082     		sub sp, sp, #8
30000502  F8CD 3000		str r3, [sp]
30000506  E92D 0006		stmdb sp!, { r1, r2 }
3000050A  B082     		sub sp, sp, #8
3000050C  F8DF 70E0		ldr r7, [pc, #+224] ; 0x14
30000510  5FF7     		ldrsh r7, [r6, +r7]
30000512  F8CD 7004		str r7, [sp, #+4]
30000516  F8DF 70D4		ldr r7, [pc, #+212] ; 0x12
3000051A  5FF7     		ldrsh r7, [r6, +r7]
3000051C  F8CD 7000		str r7, [sp]
30000520  F8DF 70C4		ldr r7, [pc, #+196] ; 0x10
30000524  5FF3     		ldrsh r3, [r6, +r7]
30000526  F8DF 70BC		ldr r7, [pc, #+188] ; 0xE
3000052A  5FF2     		ldrsh r2, [r6, +r7]
3000052C  F8DF 70B0		ldr r7, [pc, #+176] ; 0xC
30000530  5FF1     		ldrsh r1, [r6, +r7]
30000532  F8DF 40F4		ldr r4, [pc, #+244] ; 0x807BA29
30000536  F044 0401		orr r4, r4, #1
3000053A  47A0     		blx r4
3000053C  B002     		add sp, sp, #8
3000053E  E8BD 0006		ldmia sp!, { r1, r2 }
30000542  F8DD 3000		ldr r3, [sp]
30000546  B002     		add sp, sp, #8

#43				TO_UDINT	{LNXT:14|20|-1}
(-) DATE_AND_TIME
#44				ST		dummyUdint	{LNXT:14|20|-1}
(-) UDINT
30000548  6070     		str r0, [r6, #4]

#45		
#46				(* dummyUdint := dummyUdint - (iTimeZone *3600); *)
#47				LD		dummyUdint	{LNXT:20|22|-1}
(-) UNDEF
3000054A  6870     		ldr r0, [r6, #4]

#48				SUB(		iTimeZone	{LNXT:20|22|-1}
(*) UDINT
3000054C  B082     		sub sp, sp, #8
3000054E  F8CD 0000		str r0, [sp]
30000552  F8DF 70B8		ldr r7, [pc, #+184] ; 0x24
30000556  5FF0     		ldrsh r0, [r6, +r7]

#49				MUL		3600	{LNXT:20|22|-1}
(*) INT
30000558  F44F 6761		mov r7, #3600 ; 3600
3000055C  4378     		mul r0, r0, r7

#50				)	{LNXT:20|22|-1}
(*) INT
3000055E  4607     		mov r7, r0
30000560  F8DD 0000		ldr r0, [sp]
30000564  B002     		add sp, sp, #8
30000566  1BC0     		sub r0, r0, r7

#51				ST		dummyUdint	{LNXT:20|22|-1}
(*) DINT
30000568  B082     		sub sp, sp, #8
3000056A  F8CD 0000		str r0, [sp]
3000056E  6070     		str r0, [r6, #4]
30000570  F8DD 0000		ldr r0, [sp]
30000574  B002     		add sp, sp, #8

#52		
#53		
#54				(* IF UseDST *)
#55				LD		UseDST	{LNXT:22|-1|-1}
(*) UNDEF
30000576  F8DF 7098		ldr r7, [pc, #+152] ; 0x26
3000057A  5DF0     		ldrb r0, [r6, +r7]

#56				JMPCN	$label1	{LNXT:22|24|33}
(-) BOOL
3000057C  2800     		cmp r0, #0
3000057E  D015     		beq #42 ; 0x300005AC


#57		
#58				(* THEN *)
#59		
#60					(* bIsDts:= DST(TO_DATE_AND_TIME(dummyUdint)); *)
#61					LDP0		dummyUdint	{LNXT:24|26|-1}
(-) BOOL
#62					TO_DATE_AND_TIME	{LNXT:24|26|-1}
(-) UDINT
30000582  6870     		ldr r0, [r6, #4]

#63					DST	{LNXT:24|26|-1}
(*) DATE_AND_TIME
30000584  B082     		sub sp, sp, #8
30000586  4607     		mov r7, r0
30000588  F8CD 7000		str r7, [sp]
3000058C  F8DF 409C		ldr r4, [pc, #+156] ; 0x30000268
30000590  F044 0401		orr r4, r4, #1
30000594  47A0     		blx r4
30000596  B002     		add sp, sp, #8

#64					ST		bIsDts	{LNXT:24|26|-1}
(-) BOOL
30000598  7230     		strb r0, [r6, #8]

#65		
#66		
#67					(* IF bIsDts *)
#68					LD		bIsDts	{LNXT:26|-1|-1}
(-) UNDEF
3000059A  7A30     		ldrb r0, [r6, #8]

#69					JMPCN	$label2	{LNXT:26|27|33}
(-) BOOL
3000059C  2800     		cmp r0, #0
3000059E  D005     		beq #10 ; 0x300005AC


#70		
#71					(* THEN *)
#72		
#73						(* dummyUdint := dummyUdint -3600; *)
#74						LD		dummyUdint	{LNXT:27|33|-1}
(-) UNDEF
300005A2  6870     		ldr r0, [r6, #4]

#75						SUB		3600	{LNXT:27|33|-1}
(*) UDINT
300005A4  F44F 6761		mov r7, #3600 ; 3600
300005A8  1BC0     		sub r0, r0, r7

#76						ST		dummyUdint	{LNXT:27|33|-1}
(-) UDINT
300005AA  6070     		str r0, [r6, #4]

#77		
#78		$label2:
#79					(* END_IF *)
#80		
#81		$label1:
#82				(* END_IF *)
#83		
#84				(* udiTimeSet:= dummyUdint; *)
#85				MOVE		dummyUdint,udiTimeSet	{LNXT:33|37|-1}
(*) UDINT
300005AC  6870     		ldr r0, [r6, #4]
300005AE  62B0     		str r0, [r6, #40]

#86		
#87				(* bArduino_Set := true; *)
#88				MOVE		true,bArduino_Set	{LNXT:37|43|-1}
(*) UDINT
300005B0  2001     		mov r0, #1 ; 1
300005B2  F8DF 7064		ldr r7, [pc, #+100] ; 0x2C
300005B6  55F0     		strb r0, [r6, +r7]

#89		
#90		$label0:
#91			(* END_IF *)
#92		
#93		
#94			(* IF bArduino_TimeOk *)
#95			LD		bArduino_TimeOk	{LNXT:43|-1|-1}
(*) UNDEF
300005B8  F8DF 7058		ldr r7, [pc, #+88] ; 0x27
300005BC  5DF0     		ldrb r0, [r6, +r7]

#96			JMPCN	$label3	{LNXT:43|44|-1}
(-) BOOL
300005BE  2800     		cmp r0, #0
300005C0  D008     		beq #16 ; 0x300005D4


#97		
#98			(* THEN *)
#99		
#100				(* bArduino_Set := false; *)
#101				MOVE		false,bArduino_Set	{LNXT:44|45|-1}
(*) BOOL
300005C4  2000     		mov r0, #0 ; 0
300005C6  F8DF 7050		ldr r7, [pc, #+80] ; 0x2C
300005CA  55F0     		strb r0, [r6, +r7]

#102		
#103				(* bSetTime := false; *)
#104				MOVE		false,bSetTime	{LNXT:45|-1|-1}
(*) BOOL
300005CC  2000     		mov r0, #0 ; 0
300005CE  F8DF 704C		ldr r7, [pc, #+76] ; 0x2D
300005D2  55F0     		strb r0, [r6, +r7]

300005D4  E8BD 4040		ldmia sp!, { r6, lr }

300005D8  4770     		bx lr

300005DC  0000000A		; 0x0000000A
300005E0  0000000C		; 0x0000000C
300005E4  0000000E		; 0x0000000E
300005E8  00000010		; 0x00000010
300005EC  00000012		; 0x00000012
300005F0  00000014		; 0x00000014
300005F4  00000018		; 0x00000018
300005F8  0000001A		; 0x0000001A
300005FC  0000001C		; 0x0000001C
30000600  0000001E		; 0x0000001E
30000604  00000020		; 0x00000020
30000608  00000022		; 0x00000022
3000060C  00000024		; 0x00000024
30000610  00000026		; 0x00000026
30000614  00000027		; 0x00000027
30000618  0000002C		; 0x0000002C
3000061C  0000002D		; 0x0000002D
30000620  000007B2		; 0x000007B2
30000624  000007F6		; 0x000007F6
30000628  FFFFFFFF		; 0x0807BA29
3000062C  30000268		; 0x30000268


Frame allocation:

	0000 bit  0: VAR NONAME
	0004       : VAR dummyUdint
	0008 bit  0: VAR bIsDts
	000A       : VAR SetYears
	000C       : VAR SetMonth
	000E       : VAR SetDay
	0010       : VAR SetHour
	0012       : VAR SetMinute
	0014       : VAR SetSeconds
	0016       : VAR TimeZone
	0018       : VAR iSetYears
	001A       : VAR iSetMonth
	001C       : VAR iSetDay
	001E       : VAR iSetHour
	0020       : VAR iSetMinute
	0022       : VAR iSetSeconds
	0024       : VAR iTimeZone
	0026 bit  0: VAR UseDST
	0027 bit  0: VAR bArduino_TimeOk
	0028       : VAR udiTimeSet
	002C bit  0: VAR bArduino_Set
	002D bit  0: VAR bSetTime

END_FUNCTION_BLOCK
**************************************************
	List function block: Curr_Date_Time
**************************************************

FUNCTION_BLOCK Curr_Date_Time

        VAR_INPUT
UTC_TIMESTAMP : UDINT;
Tz : INT;	{ DE:"Time Zone" }
use_DST : BOOL;	{ DE:"Day Saving_time" }
	END_VAR

        VAR_OUTPUT
CURR_DT : DATE_AND_TIME;
Is_DST : BOOL;
Week_Day : INT;	{ DE:"0 sunday -- 6 saturday" }
	END_VAR

        VAR
Dummy_UDINT : UDINT;
	END_VAR

END_FUNCTION_BLOCK

30000630  E92D 4040		stmdb sp!, { r6, lr }
30000634  462E     		mov r6, r5

#0		{SRC:Curr_Date_Time}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Dummy_UDINT := TO_UDINT (UTC_TIMESTAMP +(Tz *3600)); *)
#4			LD		Tz	{LNXT:5|8|-1}
(*) UNDEF
30000636  F8DF 7064		ldr r7, [pc, #+100] ; 0x8
3000063A  5FF0     		ldrsh r0, [r6, +r7]

#5			MUL		3600	{LNXT:5|8|-1}
(*) INT
3000063C  F44F 6761		mov r7, #3600 ; 3600
30000640  4378     		mul r0, r0, r7

#6			ADD		UTC_TIMESTAMP	{LNXT:5|8|-1}
(*) INT
30000642  6877     		ldr r7, [r6, #4]
30000644  19C0     		add r0, r0, r7

#7			TO_UDINT	{LNXT:5|8|-1}
(-) DINT
#8			ST		Dummy_UDINT	{LNXT:5|8|-1}
(-) UDINT
30000646  6030     		str r0, [r6]

#9		
#10		
#11			(* IF use_DST *)
#12			LD		use_DST	{LNXT:8|-1|-1}
(-) UNDEF
30000648  7AB0     		ldrb r0, [r6, #10]

#13			JMPCN	$label0	{LNXT:8|9|22}
(-) BOOL
3000064A  2800     		cmp r0, #0
3000064C  D017     		beq #46 ; 0x3000067E


#14		
#15			(* THEN *)
#16		
#17				(* Is_DST := DST(TO_DATE_AND_TIME(UTC_TIMESTAMP)); *)
#18				LDP0		UTC_TIMESTAMP	{LNXT:9|12|-1}
(-) BOOL
#19				TO_DATE_AND_TIME	{LNXT:9|12|-1}
(-) UDINT
30000650  6870     		ldr r0, [r6, #4]

#20				DST	{LNXT:9|12|-1}
(*) DATE_AND_TIME
30000652  B082     		sub sp, sp, #8
30000654  4607     		mov r7, r0
30000656  F8CD 7000		str r7, [sp]
3000065A  F8DF 4048		ldr r4, [pc, #+72] ; 0x30000268
3000065E  F044 0401		orr r4, r4, #1
30000662  47A0     		blx r4
30000664  B002     		add sp, sp, #8

#21				ST		Is_DST	{LNXT:9|12|-1}
(-) BOOL
30000666  7430     		strb r0, [r6, #16]

#22		
#23		
#24				(* IF Is_DST *)
#25				LD		Is_DST	{LNXT:12|-1|-1}
(-) UNDEF
30000668  7C30     		ldrb r0, [r6, #16]

#26				JMPCN	$label1	{LNXT:12|13|17}
(-) BOOL
3000066A  2800     		cmp r0, #0
3000066C  D005     		beq #10 ; 0x3000067A


#27		
#28				(* THEN *)
#29		
#30					(* Dummy_UDINT := Dummy_UDINT +3600; *)
#31					LD		Dummy_UDINT	{LNXT:13|17|-1}
(-) UNDEF
30000670  6830     		ldr r0, [r6]

#32					ADD		3600	{LNXT:13|17|-1}
(*) UDINT
30000672  F44F 6761		mov r7, #3600 ; 3600
30000676  19C0     		add r0, r0, r7

#33					ST		Dummy_UDINT	{LNXT:13|17|-1}
(-) UDINT
30000678  6030     		str r0, [r6]

#34		
#35		$label1:
#36				(* END_IF *)
#37		
#38				(* CURR_DT := TO_DATE_AND_TIME(Dummy_UDINT); *)
#39				LDP0		Dummy_UDINT	{LNXT:17|22|-1}
(-) UDINT
#40				TO_DATE_AND_TIME	{LNXT:17|22|-1}
(-) UDINT
3000067A  6830     		ldr r0, [r6]

#41				ST		CURR_DT	{LNXT:17|22|-1}
(-) DATE_AND_TIME
3000067C  60F0     		str r0, [r6, #12]

#42		
#43		$label0:
#44			(* END_IF *)
#45		
#46			(* Week_Day := WeekDay(CURR_DT); *)
#47			LDP0		CURR_DT	{LNXT:22|-1|-1}
(-) DATE_AND_TIME
#48			WeekDay	{LNXT:22|-1|-1}
(*) DATE_AND_TIME
3000067E  B082     		sub sp, sp, #8
30000680  68F7     		ldr r7, [r6, #12]
30000682  F8CD 7000		str r7, [sp]
30000686  F8DF 4018		ldr r4, [pc, #+24] ; 0x300000C8
3000068A  F044 0401		orr r4, r4, #1
3000068E  47A0     		blx r4
30000690  B002     		add sp, sp, #8

#49			ST		Week_Day	{LNXT:22|-1|-1}
(-) INT
30000692  8270     		strh r0, [r6, #18]

30000694  E8BD 4040		ldmia sp!, { r6, lr }

30000698  4770     		bx lr

3000069C  00000008		; 0x00000008
300006A0  300000C8		; 0x300000C8
300006A4  30000268		; 0x30000268


Frame allocation:

	0000       : VAR Dummy_UDINT
	0004       : VAR UTC_TIMESTAMP
	0008       : VAR Tz
	000A bit  0: VAR use_DST
	000C       : VAR CURR_DT
	0010 bit  0: VAR Is_DST
	0012       : VAR Week_Day

END_FUNCTION_BLOCK
**************************************************
	List program: Data_ora
**************************************************

PROGRAM Data_ora

        VAR
iWeekDay : INT;	{ DE:"0 Sunday, 6 Saturday" }
BSet : BOOL;
Dummy_Bit : BOOL;
bDST : BOOL;
ClocK1Hz : Clock_gen;
FB_Set_Time : Set_Data_Time;
FB_Curr_Date_Time : Curr_Date_Time;
Summer_time : BOOL;
bSet_Ntp : BOOL;
i_WeekDay : INT;
	END_VAR

END_PROGRAM

300006B0  B082     		sub sp, sp, #8
300006B2  F8CD E000		str lr, [sp]
300006B6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:Data_ora}
#1		 
#2		  
#3			(* Network 1 *)
#4			MOVE		500,CLOCK1HZ.TEMPO {R:1$2}
(*) UDINT
300006BA  F44F 70FA		mov r0, #500 ; 500
300006BE  F8DF 71B0		ldr r7, [pc, #+432] ; 0x200002D4
300006C2  6038     		str r0, [r7]

#5			CAL		CLOCK1HZ {R:1$2}
(*) UDINT
300006C4  E92D 0021		stmdb sp!, { r0, r5 }
300006C8  F8DF 51A0		ldr r5, [pc, #+416] ; 0x200002A8
300006CC  F8DF 4224		ldr r4, [pc, #+548] ; 0x300003B8
300006D0  F044 0401		orr r4, r4, #1
300006D4  47A0     		blx r4
300006D6  E8BD 0021		ldmia sp!, { r0, r5 }

#6			LD		TRUE
(-) UNDEF
300006DA  2001     		mov r0, #1 ; 1

#7			AND		CLOCK1HZ.OUT {R:1$6}
(*) BOOL
300006DC  F8DF 7194		ldr r7, [pc, #+404] ; 0x200002D8
300006E0  783F     		ldrb r7, [r7]
300006E2  4038     		and r0, r0, r7

#8			ST		GREENLED {R:1$5}
(*) BOOL
300006E4  F8DF 7208		ldr r7, [pc, #+520] ; 0x2401E855
300006E8  7038     		strb r0, [r7]

#9		 
#10			(* Network 2 *)
#11			MOVE		BSET,FB_SET_TIME.BSETTIME {R:2$36}
(*) BOOL
300006EA  F8DF 7174		ldr r7, [pc, #+372] ; 0x200002A5
300006EE  7838     		ldrb r0, [r7]
300006F0  F8DF 71B4		ldr r7, [pc, #+436] ; 0x20000309
300006F4  7038     		strb r0, [r7]

#12			MOVE		DATATIME_SET.ANNO,FB_SET_TIME.ISETYEARS {R:2$36}
(*) BOOL
300006F6  F8DF 71B4		ldr r7, [pc, #+436] ; 0x2000030C
300006FA  F9B7 0000		ldrsh r0, [r7]
300006FE  F8DF 717C		ldr r7, [pc, #+380] ; 0x200002F4
30000702  8038     		strh r0, [r7]

#13			MOVE		DATATIME_SET.MESE,FB_SET_TIME.ISETMONTH {R:2$36}
(*) INT
30000704  F8DF 71A8		ldr r7, [pc, #+424] ; 0x2000030E
30000708  F9B7 0000		ldrsh r0, [r7]
3000070C  F8DF 7170		ldr r7, [pc, #+368] ; 0x200002F6
30000710  8038     		strh r0, [r7]

#14			MOVE		DATATIME_SET.GIORNO,FB_SET_TIME.ISETDAY {R:2$36}
(*) INT
30000712  F8DF 71A0		ldr r7, [pc, #+416] ; 0x20000310
30000716  F9B7 0000		ldrsh r0, [r7]
3000071A  F8DF 7168		ldr r7, [pc, #+360] ; 0x200002F8
3000071E  8038     		strh r0, [r7]

#15			MOVE		DATATIME_SET.ORE,FB_SET_TIME.ISETHOUR {R:2$36}
(*) INT
30000720  F8DF 7194		ldr r7, [pc, #+404] ; 0x20000312
30000724  F9B7 0000		ldrsh r0, [r7]
30000728  F8DF 715C		ldr r7, [pc, #+348] ; 0x200002FA
3000072C  8038     		strh r0, [r7]

#16			MOVE		DATATIME_SET.MINUTI,FB_SET_TIME.ISETMINUTE {R:2$36}
(*) INT
3000072E  F8DF 718C		ldr r7, [pc, #+396] ; 0x20000314
30000732  F9B7 0000		ldrsh r0, [r7]
30000736  F8DF 7154		ldr r7, [pc, #+340] ; 0x200002FC
3000073A  8038     		strh r0, [r7]

#17			MOVE		DATATIME_SET.SECONDI,FB_SET_TIME.ISETSECONDS {R:2$36}
(*) INT
3000073C  F8DF 7180		ldr r7, [pc, #+384] ; 0x20000316
30000740  F9B7 0000		ldrsh r0, [r7]
30000744  F8DF 7148		ldr r7, [pc, #+328] ; 0x200002FE
30000748  8038     		strh r0, [r7]

#18			MOVE		1,FB_SET_TIME.ITIMEZONE {R:2$36}
(*) INT
3000074A  2001     		mov r0, #1 ; 1
3000074C  F8DF 7144		ldr r7, [pc, #+324] ; 0x20000300
30000750  8038     		strh r0, [r7]

#19			MOVE		TRUE,FB_SET_TIME.USEDST {R:2$36}
(*) INT
30000752  2001     		mov r0, #1 ; 1
30000754  F8DF 7140		ldr r7, [pc, #+320] ; 0x20000302
30000758  7038     		strb r0, [r7]

#20			MOVE		TIMESETOK,FB_SET_TIME.BARDUINO_TIMEOK {R:2$36}
(*) BOOL
3000075A  F8DF 71A8		ldr r7, [pc, #+424] ; 0x38000004
3000075E  7838     		ldrb r0, [r7]
30000760  F8DF 7138		ldr r7, [pc, #+312] ; 0x20000303
30000764  7038     		strb r0, [r7]

#21			CAL		FB_SET_TIME {R:2$36}
(*) BOOL
30000766  E92D 0021		stmdb sp!, { r0, r5 }
3000076A  F8DF 510C		ldr r5, [pc, #+268] ; 0x200002DC
3000076E  F8DF 4188		ldr r4, [pc, #+392] ; 0x30000430
30000772  F044 0401		orr r4, r4, #1
30000776  47A0     		blx r4
30000778  E8BD 0021		ldmia sp!, { r0, r5 }

#22			MOVE		FB_SET_TIME.BSETTIME,BSET {R:2$36}
(*) BOOL
3000077C  F8DF 7128		ldr r7, [pc, #+296] ; 0x20000309
30000780  7838     		ldrb r0, [r7]
30000782  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002A5
30000786  7038     		strb r0, [r7]

#23			MOVE		FB_SET_TIME.UDITIMESET,TIMETOSET {R:2$36}
(*) BOOL
30000788  F8DF 7114		ldr r7, [pc, #+276] ; 0x20000304
3000078C  6838     		ldr r0, [r7]
3000078E  F8DF 7180		ldr r7, [pc, #+384] ; 0x38000200
30000792  6038     		str r0, [r7]

#24			MOVE		FB_SET_TIME.BARDUINO_SET,SET_TIME {R:2$36}
(*) UDINT
30000794  F8DF 710C		ldr r7, [pc, #+268] ; 0x20000308
30000798  7838     		ldrb r0, [r7]
3000079A  F8DF 7178		ldr r7, [pc, #+376] ; 0x38000204
3000079E  7038     		strb r0, [r7]

#25			LD		TRUE
(-) UNDEF
300007A0  2001     		mov r0, #1 ; 1

#26		 
#27			(* Network 3 *)
#28			LD		BSET_NTP {R:3$0}
(*) UNDEF
300007A2  F8DF 70C4		ldr r7, [pc, #+196] ; 0x200002A7
300007A6  7838     		ldrb r0, [r7]

#29			OR		SET_DATA_RTC {R:3$7}
(*) BOOL
300007A8  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A6
300007AC  783F     		ldrb r7, [r7]
300007AE  4338     		orr r0, r0, r7

#30			ST		$$VAR$1
(*) BOOL
300007B0  F8DF 7110		ldr r7, [pc, #+272] ; 0x20000318
300007B4  7038     		strb r0, [r7]

#31			ST		NTP_SET {R:3$1}
(*) BOOL
300007B6  F8DF 7160		ldr r7, [pc, #+352] ; 0x38000205
300007BA  7038     		strb r0, [r7]

#32			LD		$$VAR$1
(*) UNDEF
300007BC  F8DF 7104		ldr r7, [pc, #+260] ; 0x20000318
300007C0  7838     		ldrb r0, [r7]

#33			AND(		NTPSETOK {R:3$3}
(*) BOOL
300007C2  B082     		sub sp, sp, #8
300007C4  F8CD 0000		str r0, [sp]
300007C8  F8DF 713C		ldr r7, [pc, #+316] ; 0x38000005
300007CC  7838     		ldrb r0, [r7]

#34			OR		NTPSETKO {R:3$5}
(*) BOOL
300007CE  F8DF 713C		ldr r7, [pc, #+316] ; 0x38000006
300007D2  783F     		ldrb r7, [r7]
300007D4  4338     		orr r0, r0, r7

#35			)
#36			R		BSET_NTP {R:3$4}
(*) BOOL
300007D6  4607     		mov r7, r0
300007D8  F8DD 0000		ldr r0, [sp]
300007DC  B002     		add sp, sp, #8
300007DE  4038     		and r0, r0, r7

(*) BOOL
300007E0  2800     		cmp r0, #0
300007E2  D009     		beq #0x000012
300007E4  B082     		sub sp, sp, #8
300007E6  F8CD 0000		str r0, [sp]
300007EA  2000     		mov r0, #0
300007EC  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002A7
300007F0  7038     		strb r0, [r7]
300007F2  F8DD 0000		ldr r0, [sp]
300007F6  B002     		add sp, sp, #8

#37		 
#38			(* Network 4 *)
#39			MOVE		TIMESTAMP,FB_CURR_DATE_TIME.UTC_TIMESTAMP {R:4$8}
(*) BOOL
300007F8  F8DF 7104		ldr r7, [pc, #+260] ; 0x38000000
300007FC  6838     		ldr r0, [r7]
300007FE  F8DF 70D4		ldr r7, [pc, #+212] ; 0x20000320
30000802  6038     		str r0, [r7]

#40			MOVE		1,FB_CURR_DATE_TIME.TZ {R:4$8}
(*) UDINT
30000804  2001     		mov r0, #1 ; 1
30000806  F8DF 70D0		ldr r7, [pc, #+208] ; 0x20000324
3000080A  8038     		strh r0, [r7]

#41			MOVE		TRUE,FB_CURR_DATE_TIME.USE_DST {R:4$8}
(*) INT
3000080C  2001     		mov r0, #1 ; 1
3000080E  F8DF 70CC		ldr r7, [pc, #+204] ; 0x20000326
30000812  7038     		strb r0, [r7]

#42			CAL		FB_CURR_DATE_TIME {R:4$8}
(*) BOOL
30000814  E92D 0021		stmdb sp!, { r0, r5 }
30000818  F8DF 50B4		ldr r5, [pc, #+180] ; 0x2000031C
3000081C  F8DF 40DC		ldr r4, [pc, #+220] ; 0x30000630
30000820  F044 0401		orr r4, r4, #1
30000824  47A0     		blx r4
30000826  E8BD 0021		ldmia sp!, { r0, r5 }

#43			MOVE		FB_CURR_DATE_TIME.CURR_DT,DATAORACORRENTI {R:4$8}
(*) BOOL
3000082A  F8DF 70B4		ldr r7, [pc, #+180] ; 0x20000328
3000082E  6838     		ldr r0, [r7]
30000830  F8DF 70B8		ldr r7, [pc, #+184] ; 0x20000330
30000834  6038     		str r0, [r7]

#44			MOVE		FB_CURR_DATE_TIME.IS_DST,SUMMER_TIME {R:4$8}
(*) DATE_AND_TIME
30000836  F8DF 70AC		ldr r7, [pc, #+172] ; 0x2000032C
3000083A  7838     		ldrb r0, [r7]
3000083C  F8DF 7088		ldr r7, [pc, #+136] ; 0x20000319
30000840  7038     		strb r0, [r7]

#45			MOVE		FB_CURR_DATE_TIME.WEEK_DAY,I_WEEKDAY {R:4$8}
(*) BOOL
30000842  F8DF 70A4		ldr r7, [pc, #+164] ; 0x2000032E
30000846  F9B7 0000		ldrsh r0, [r7]
3000084A  F8DF 7080		ldr r7, [pc, #+128] ; 0x2000031A
3000084E  8038     		strh r0, [r7]

#46			LD		TRUE
(-) UNDEF
30000850  2001     		mov r0, #1 ; 1

30000852  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000856  F8DD E000		ldr lr, [sp]
3000085A  B002     		add sp, sp, #8

3000085C  4770     		bx lr

30000860  200002A5		; 0x200002A5
30000864  200002A6		; 0x200002A6
30000868  200002A7		; 0x200002A7
3000086C  200002A8		; 0x200002A8
30000870  200002D4		; 0x200002D4
30000874  200002D8		; 0x200002D8
30000878  200002DC		; 0x200002DC
3000087C  200002F4		; 0x200002F4
30000880  200002F6		; 0x200002F6
30000884  200002F8		; 0x200002F8
30000888  200002FA		; 0x200002FA
3000088C  200002FC		; 0x200002FC
30000890  200002FE		; 0x200002FE
30000894  20000300		; 0x20000300
30000898  20000302		; 0x20000302
3000089C  20000303		; 0x20000303
300008A0  20000304		; 0x20000304
300008A4  20000308		; 0x20000308
300008A8  20000309		; 0x20000309
300008AC  2000030C		; 0x2000030C
300008B0  2000030E		; 0x2000030E
300008B4  20000310		; 0x20000310
300008B8  20000312		; 0x20000312
300008BC  20000314		; 0x20000314
300008C0  20000316		; 0x20000316
300008C4  20000318		; 0x20000318
300008C8  20000319		; 0x20000319
300008CC  2000031A		; 0x2000031A
300008D0  2000031C		; 0x2000031C
300008D4  20000320		; 0x20000320
300008D8  20000324		; 0x20000324
300008DC  20000326		; 0x20000326
300008E0  20000328		; 0x20000328
300008E4  2000032C		; 0x2000032C
300008E8  2000032E		; 0x2000032E
300008EC  20000330		; 0x20000330
300008F0  FFFFFFFF		; 0x2401E855
300008F4  300003B8		; 0x300003B8
300008F8  30000430		; 0x30000430
300008FC  30000630		; 0x30000630
30000900  FFFFFFFF		; 0x38000000
30000904  FFFFFFFF		; 0x38000004
30000908  FFFFFFFF		; 0x38000005
3000090C  FFFFFFFF		; 0x38000006
30000910  FFFFFFFF		; 0x38000200
30000914  FFFFFFFF		; 0x38000204
30000918  FFFFFFFF		; 0x38000205

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3000091C  4770     		bx lr


*** OUTPUT:
3000091E  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

30000920  B082     		sub sp, sp, #8
30000922  F8CD E000		str lr, [sp]
30000926  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000092A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000092E  F8DD E000		ldr lr, [sp]
30000932  B002     		add sp, sp, #8

30000934  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

30000940  B082     		sub sp, sp, #8
30000942  F8CD E000		str lr, [sp]
30000946  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
3000094A  2000     		mov r0, #0 ; 0
3000094C  F8DF 7054		ldr r7, [pc, #+84] ; 0x20000334
30000950  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
30000952  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
30000954  B088     		sub sp, sp, #32
30000956  2700     		mov r7, #0 ; 0
30000958  4639     		mov r1, r7
3000095A  2700     		mov r7, #0 ; 0
3000095C  463A     		mov r2, r7
3000095E  2700     		mov r7, #0 ; 0
30000960  463B     		mov r3, r7
30000962  2700     		mov r7, #0 ; 0
30000964  F8CD 7000		str r7, [sp]
30000968  2700     		mov r7, #0 ; 0
3000096A  F8CD 7004		str r7, [sp, #+4]
3000096E  2700     		mov r7, #0 ; 0
30000970  F8CD 7008		str r7, [sp, #+8]
30000974  2700     		mov r7, #0 ; 0
30000976  F8CD 700C		str r7, [sp, #+12]
3000097A  2700     		mov r7, #0 ; 0
3000097C  F8CD 7010		str r7, [sp, #+16]
30000980  2700     		mov r7, #0 ; 0
30000982  F8CD 7014		str r7, [sp, #+20]
30000986  2700     		mov r7, #0 ; 0
30000988  F8CD 7018		str r7, [sp, #+24]
3000098C  F8DF 4010		ldr r4, [pc, #+16] ; 0x8077561
30000990  F044 0401		orr r4, r4, #1
30000994  47A0     		blx r4
30000996  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
30000998  F8DF 700C		ldr r7, [pc, #+12] ; 0x20000338
3000099C  7038     		strb r0, [r7]

3000099E  E005     		b #10

300009A0  FFFFFFFF		; 0x08077561
300009A4  20000334		; 0x20000334
300009A8  20000338		; 0x20000338

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
300009AC  2010     		mov r0, #16 ; 16
300009AE  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807E279
300009B2  F044 0401		orr r4, r4, #1
300009B6  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
300009B8  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
300009BC  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
300009BE  2000     		mov r0, #0 ; 0
300009C0  2100     		mov r1, #0 ; 0
300009C2  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807E285
300009C6  F044 0401		orr r4, r4, #1
300009CA  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
300009CC  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
300009D0  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
300009D2  2001     		mov r0, #1 ; 1
300009D4  2100     		mov r1, #0 ; 0
300009D6  F8DF 4098		ldr r4, [pc, #+152] ; 0x807E285
300009DA  F044 0401		orr r4, r4, #1
300009DE  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
300009E0  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
300009E4  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
300009E6  2002     		mov r0, #2 ; 2
300009E8  2100     		mov r1, #0 ; 0
300009EA  F8DF 4084		ldr r4, [pc, #+132] ; 0x807E285
300009EE  F044 0401		orr r4, r4, #1
300009F2  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
300009F4  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
300009F8  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
300009FA  2003     		mov r0, #3 ; 3
300009FC  2100     		mov r1, #0 ; 0
300009FE  F8DF 4070		ldr r4, [pc, #+112] ; 0x807E285
30000A02  F044 0401		orr r4, r4, #1
30000A06  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
30000A08  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
30000A0C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
30000A0E  2004     		mov r0, #4 ; 4
30000A10  2100     		mov r1, #0 ; 0
30000A12  F8DF 405C		ldr r4, [pc, #+92] ; 0x807E285
30000A16  F044 0401		orr r4, r4, #1
30000A1A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
30000A1C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
30000A20  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
30000A22  2005     		mov r0, #5 ; 5
30000A24  2100     		mov r1, #0 ; 0
30000A26  F8DF 4048		ldr r4, [pc, #+72] ; 0x807E285
30000A2A  F044 0401		orr r4, r4, #1
30000A2E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
30000A30  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
30000A34  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
30000A36  2006     		mov r0, #6 ; 6
30000A38  2100     		mov r1, #0 ; 0
30000A3A  F8DF 4034		ldr r4, [pc, #+52] ; 0x807E285
30000A3E  F044 0401		orr r4, r4, #1
30000A42  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
30000A44  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
30000A48  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
30000A4A  2007     		mov r0, #7 ; 7
30000A4C  2100     		mov r1, #0 ; 0
30000A4E  F8DF 4020		ldr r4, [pc, #+32] ; 0x807E285
30000A52  F044 0401		orr r4, r4, #1
30000A56  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
30000A58  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
30000A5C  7038     		strb r0, [r7]

30000A5E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A62  F8DD E000		ldr lr, [sp]
30000A66  B002     		add sp, sp, #8

30000A68  4770     		bx lr

30000A6C  FFFFFFFF		; 0x0807E279
30000A70  FFFFFFFF		; 0x0807E285
30000A74  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000A78  4770     		bx lr


*** OUTPUT:
30000A7A  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

30000A7C  B082     		sub sp, sp, #8
30000A7E  F8CD E000		str lr, [sp]
30000A82  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000A86  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A8A  F8DD E000		ldr lr, [sp]
30000A8E  B002     		add sp, sp, #8

30000A90  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000AA0  B082     		sub sp, sp, #8
30000AA2  F8CD E000		str lr, [sp]
30000AA6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000AAA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000AAE  F8DD E000		ldr lr, [sp]
30000AB2  B002     		add sp, sp, #8

30000AB4  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

30000AB6  B082     		sub sp, sp, #8
30000AB8  F8CD E000		str lr, [sp]
30000ABC  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000AC0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000AC4  F8DD E000		ldr lr, [sp]
30000AC8  B002     		add sp, sp, #8

30000ACA  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

30000ACC  B082     		sub sp, sp, #8
30000ACE  F8CD E000		str lr, [sp]
30000AD2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000AD6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000ADA  F8DD E000		ldr lr, [sp]
30000ADE  B002     		add sp, sp, #8

30000AE0  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		0000000030000C74h
Code size:                		00000C74h

Start local data area:    		0000000020000298h
End local data area:      		0000000020000339h
Local data size:          		000000A1h

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                9F7E924E
DEBUG MEMO ID:                          300002EE
FULL MEMO ID:                           000077B6
********************************************

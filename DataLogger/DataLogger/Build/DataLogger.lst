***********************************************************************
*
*	CODE GENERATION LISTING FOR: DataLogger
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
3001E4D0  FB90 F3F1		sdiv r3, r0, r1
3001E4D4  4359     		mul r1, r1, r3
3001E4D6  EBC1 0000		rsb r0, r1, r0
3001E4DA  4770     		bx lr

$$MOD_U:
3001E4DC  FBB0 F3F1		udiv r3, r0, r1
3001E4E0  4359     		mul r1, r1, r3
3001E4E2  EBC1 0000		rsb r0, r1, r0
3001E4E6  4770     		bx lr

**************************************************
	List function: WeekDay
**************************************************

FUNCTION WeekDay : INT

        VAR_INPUT
Curr_Date_Time : DATE_AND_TIME;
	END_VAR

        VAR
DummyUdint : UDINT;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par Curr_Date_Time: CALLER STACK FRAME AT sp+0
	Var DummyUdint: REGISTER _TMP_32LO

3001E4E8  466F     		mov r7, sp
3001E4EA  B082     		sub sp, sp, #8
3001E4EC  F8CD E000		str lr, [sp]
3001E4F0  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
3001E4F4  463E     		mov r6, r7
3001E4F6  2400     		mov r4, #0

#0		{SRC:WeekDay}
#1		(*$WAITSWITCH$*)
#2		
#3			(* DummyUdint := TO_UDINT(Curr_Date_Time); *)
#4			LDP0		Curr_Date_Time	{LNXT:3|8|-1}
(-) UNDEF
#5			TO_UDINT	{LNXT:3|8|-1}
(-) DATE_AND_TIME
3001E4F8  6830     		ldr r0, [r6]

#6			ST		DummyUdint	{LNXT:3|8|-1}
(-) UDINT
3001E4FA  4681     		mov r9, r0

#7		
#8			(* DummyUdint :=  ((DummyUdint / 86400) +4) MOD 7; *)
#9			LD		DummyUdint	{LNXT:8|12|-1}
(-) UNDEF
3001E4FC  4648     		mov r0, r9

#10			DIV		86400	{LNXT:8|12|-1}
(*) UDINT
3001E4FE  F8DF 703C		ldr r7, [pc, #+60] ; 0x15180
3001E502  463F     		mov r7, r7
3001E504  B082     		sub sp, sp, #8
3001E506  F8CD 1000		str r1, [sp]
3001E50A  4639     		mov r1, r7
3001E50C  FBB0 F0F1		udiv r0, r0, r1
3001E510  F8DD 1000		ldr r1, [sp]
3001E514  B002     		add sp, sp, #8

#11			ADD		4	{LNXT:8|12|-1}
(-) UDINT
3001E516  1D00     		add r0, r0, #4

#12			MOD		7	{LNXT:8|12|-1}
(*) UDINT
3001E518  2107     		mov r1, #7 ; 7
3001E51A  467C     		mov r4, pc
3001E51C  3C42     		sub r4, r4, #+0x42 ; 0x3001E4DC
3001E51E  F044 0401		orr r4, r4, #1
3001E522  47A0     		blx r4

#13			ST		DummyUdint	{LNXT:8|12|-1}
(-) UDINT
3001E524  4681     		mov r9, r0

#14		
#15			(* WeekDay:= TO_INT (DummyUdint); *)
#16			LDP0		DummyUdint	{LNXT:12|-1|-1}
(-) UDINT
#17			TO_INT	{LNXT:12|-1|-1}
(*) UDINT
3001E526  4648     		mov r0, r9
3001E528  B200     		sxth r0, r0

#18			ST		WeekDay	{LNXT:12|-1|-1}
(-) INT
3001E52A  4604     		mov r4, r0

3001E52C  4620     		mov r0, r4
3001E52E  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
3001E532  F8DD E000		ldr lr, [sp]
3001E536  B002     		add sp, sp, #8

3001E538  4770     		bx lr

3001E53C  00015180		; 0x00015180

END_FUNCTION
**************************************************
	List function: YEAR_OF_DT
**************************************************

FUNCTION YEAR_OF_DT : INT

        VAR_INPUT
idate : DATE_AND_TIME;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par idate: CALLER STACK FRAME AT sp+0

3001E540  466F     		mov r7, sp
3001E542  B082     		sub sp, sp, #8
3001E544  F8CD E000		str lr, [sp]
3001E548  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
3001E54C  463E     		mov r6, r7
3001E54E  2400     		mov r4, #0

#0		{SRC:YEAR_OF_DT}
#1		(*$WAITSWITCH$*)
#2		
#3			(* YEAR_OF_DT := TO_INT((TO_DWORD(idate) + 43200) / 31557600 + 1970); *)
#4			LDP0		idate	{LNXT:12|-1|-1}
(-) UNDEF
#5			TO_DWORD	{LNXT:12|-1|-1}
(-) DATE_AND_TIME
3001E550  6830     		ldr r0, [r6]

#6			ADD		43200	{LNXT:12|-1|-1}
(*) DWORD
3001E552  F8DF 703C		ldr r7, [pc, #+60] ; 0xA8C0
3001E556  463F     		mov r7, r7
3001E558  19C0     		add r0, r0, r7

#7			DIV		31557600	{LNXT:12|-1|-1}
(*) DWORD
3001E55A  F8DF 7038		ldr r7, [pc, #+56] ; 0x1E187E0
3001E55E  463F     		mov r7, r7
3001E560  B082     		sub sp, sp, #8
3001E562  F8CD 1000		str r1, [sp]
3001E566  4639     		mov r1, r7
3001E568  FBB0 F0F1		udiv r0, r0, r1
3001E56C  F8DD 1000		ldr r1, [sp]
3001E570  B002     		add sp, sp, #8

#8			ADD		1970	{LNXT:12|-1|-1}
(*) DWORD
3001E572  F8DF 7018		ldr r7, [pc, #+24] ; 0x7B2
3001E576  463F     		mov r7, r7
3001E578  19C0     		add r0, r0, r7

#9			TO_INT	{LNXT:12|-1|-1}
(-) DWORD
3001E57A  B200     		sxth r0, r0

#10			ST		YEAR_OF_DT	{LNXT:12|-1|-1}
(-) INT
3001E57C  4604     		mov r4, r0

3001E57E  4620     		mov r0, r4
3001E580  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
3001E584  F8DD E000		ldr lr, [sp]
3001E588  B002     		add sp, sp, #8

3001E58A  4770     		bx lr

3001E58C  000007B2		; 0x000007B2
3001E590  0000A8C0		; 0x0000A8C0
3001E594  01E187E0		; 0x01E187E0

END_FUNCTION
**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E598  E92D 4040		stmdb sp!, { r6, lr }
3001E59C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E59E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
3001E5A0  2800     		cmp r0, #0
3001E5A2  D130     		bne #96 ; 0x3001E606


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
3001E5A6  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
3001E5A8  2800     		cmp r0, #0
3001E5AA  D031     		beq #98 ; 0x3001E610


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E5AE  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E5B0  2800     		cmp r0, #0
3001E5B2  BF18 2000		nemov r0, #0
3001E5B6  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E5BA  2800     		cmp r0, #0
3001E5BC  D004     		beq #8 ; 0x3001E5C8


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E5C0  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401F468
3001E5C4  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E5C6  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E5C8  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401F468
3001E5CC  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E5CE  6837     		ldr r7, [r6]
3001E5D0  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E5D2  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E5D4  68B7     		ldr r7, [r6, #8]
3001E5D6  42B8     		cmp r0, r7
3001E5D8  BF38 2000		lomov r0, #0
3001E5DC  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
3001E5E0  B082     		sub sp, sp, #8
3001E5E2  F8CD 0000		str r0, [sp]
3001E5E6  2800     		cmp r0, #0
3001E5E8  BF08 2001		eqmov r0, #1
3001E5EC  BF18 2000		nemov r0, #0
3001E5F0  7330     		strb r0, [r6, #12]
3001E5F2  F8DD 0000		ldr r0, [sp]
3001E5F6  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
3001E5F8  2800     		cmp r0, #0
3001E5FA  D009     		beq #18 ; 0x3001E610


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E5FE  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E600  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E602  E005     		b #10 ; 0x3001E610


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E606  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E608  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E60A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3001E60C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3001E60E  7330     		strb r0, [r6, #12]

3001E610  E8BD 4040		ldmia sp!, { r6, lr }

3001E614  4770     		bx lr

3001E618  FFFFFFFF		; 0x2401F468


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E61C  E92D 4040		stmdb sp!, { r6, lr }
3001E620  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E622  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
3001E624  2800     		cmp r0, #0
3001E626  D025     		beq #74 ; 0x3001E674


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3001E62A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3001E62C  2800     		cmp r0, #0
3001E62E  D126     		bne #76 ; 0x3001E67E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E632  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E634  2800     		cmp r0, #0
3001E636  BF18 2000		nemov r0, #0
3001E63A  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E63E  2800     		cmp r0, #0
3001E640  D004     		beq #8 ; 0x3001E64C


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E644  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401F468
3001E648  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E64A  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E64C  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401F468
3001E650  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E652  6837     		ldr r7, [r6]
3001E654  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E656  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E658  68B7     		ldr r7, [r6, #8]
3001E65A  42B8     		cmp r0, r7
3001E65C  BF38 2000		lomov r0, #0
3001E660  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
3001E664  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
3001E666  2800     		cmp r0, #0
3001E668  D009     		beq #18 ; 0x3001E67E


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E66C  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E66E  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E670  E005     		b #10 ; 0x3001E67E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E674  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E676  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E678  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3001E67A  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3001E67C  7330     		strb r0, [r6, #12]

3001E67E  E8BD 4040		ldmia sp!, { r6, lr }

3001E682  4770     		bx lr

3001E684  FFFFFFFF		; 0x2401F468


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function: DST
**************************************************

FUNCTION DST : BOOL

        VAR_INPUT
UTC : DATE_AND_TIME;
	END_VAR

        VAR
yr : INT;
yr4 : DWORD;
ltc : DWORD;
idate : UDINT;
March31 : DATE_AND_TIME;
	END_VAR

END_FUNCTION

	*** Function data allocation

	Par UTC: CALLER STACK FRAME AT sp+0
	Var yr: REGISTER _TMP_32LO
	Var yr4: REGISTER _TMP_32HI
	Var ltc: REGISTER _GPR3
	Var idate: LOCAL STACK FRAME AT sp-4
	Var March31: LOCAL STACK FRAME AT sp-8

3001E688  466F     		mov r7, sp
3001E68A  B082     		sub sp, sp, #8
3001E68C  B082     		sub sp, sp, #8
3001E68E  F8CD E000		str lr, [sp]
3001E692  E92D 1E50		stmdb sp!, { r4, r6, r9, r10, r11, r12 }
3001E696  463E     		mov r6, r7
3001E698  2400     		mov r4, #0

#0		{SRC:DST}
#1		(*$WAITSWITCH$*)
#2		
#3			(* yr := YEAR_OF_DT(UTC); *)
#4			LDP0		UTC	{LNXT:2|5|-1}
(-) UNDEF
#5			YEAR_OF_DT	{LNXT:2|5|-1}
(*) DATE_AND_TIME
3001E69A  B082     		sub sp, sp, #8
3001E69C  F8CD 4000		str r4, [sp]
3001E6A0  B082     		sub sp, sp, #8
3001E6A2  6837     		ldr r7, [r6]
3001E6A4  F8CD 7000		str r7, [sp]
3001E6A8  F8DF 4120		ldr r4, [pc, #+288] ; 0x3001E540
3001E6AC  F044 0401		orr r4, r4, #1
3001E6B0  47A0     		blx r4
3001E6B2  B002     		add sp, sp, #8
3001E6B4  F8DD 4000		ldr r4, [sp]
3001E6B8  B002     		add sp, sp, #8

#6			ST		yr	{LNXT:2|5|-1}
(-) INT
3001E6BA  4681     		mov r9, r0

#7		
#8			(* ltc := TO_DWORD(UTC); *)
#9			LDP0		UTC	{LNXT:5|8|-1}
(-) INT
#10			TO_DWORD	{LNXT:5|8|-1}
(-) DATE_AND_TIME
3001E6BC  6830     		ldr r0, [r6]

#11			ST		ltc	{LNXT:5|8|-1}
(-) DWORD
3001E6BE  4683     		mov r11, r0

#12		
#13			(* March31 := CONCAT_DT(yr, 3, 31, 0, 0, 0); *)
#14			LDP0		yr	{LNXT:8|11|-1}
(-) DWORD
#15			CONCAT_DT		3, 31, 0, 0, 0	{LNXT:8|11|-1}
(*) INT
3001E6C0  4648     		mov r0, r9
3001E6C2  B082     		sub sp, sp, #8
3001E6C4  F8CD 3000		str r3, [sp]
3001E6C8  E92D 0006		stmdb sp!, { r1, r2 }
3001E6CC  B082     		sub sp, sp, #8
3001E6CE  2700     		mov r7, #0 ; 0
3001E6D0  F8CD 7004		str r7, [sp, #+4]
3001E6D4  2700     		mov r7, #0 ; 0
3001E6D6  F8CD 7000		str r7, [sp]
3001E6DA  2300     		mov r3, #0 ; 0
3001E6DC  221F     		mov r2, #31 ; 31
3001E6DE  2103     		mov r1, #3 ; 3
3001E6E0  F8DF 40E0		ldr r4, [pc, #+224] ; 0x80A4719
3001E6E4  F044 0401		orr r4, r4, #1
3001E6E8  47A0     		blx r4
3001E6EA  B002     		add sp, sp, #8
3001E6EC  E8BD 0006		ldmia sp!, { r1, r2 }
3001E6F0  F8DD 3000		ldr r3, [sp]
3001E6F4  B002     		add sp, sp, #8

#16			ST		March31	{LNXT:8|11|-1}
(*) DATE_AND_TIME
3001E6F6  F8DF 70D8		ldr r7, [pc, #+216] ; 0xFFFFFFF8
3001E6FA  51F0     		str r0, [r6, +r7]

#17		
#18			(* idate := TO_UDINT(March31); *)
#19			LDP0		March31	{LNXT:11|14|-1}
(-) DATE_AND_TIME
#20			TO_UDINT	{LNXT:11|14|-1}
(*) DATE_AND_TIME
3001E6FC  F8DF 70D0		ldr r7, [pc, #+208] ; 0xFFFFFFF8
3001E700  59F0     		ldr r0, [r6, +r7]

#21			ST		idate	{LNXT:11|14|-1}
(*) UDINT
3001E702  F8DF 70D0		ldr r7, [pc, #+208] ; 0xFFFFFFFC
3001E706  51F0     		str r0, [r6, +r7]

#22		
#23			(* yr4 := (5 * yr) / 4; *)
#24			LD		5	{LNXT:14|15|-1}
(-) UNDEF
3001E708  2005     		mov r0, #5 ; 5

#25			MUL		yr	{LNXT:14|15|-1}
(*) USINT
3001E70A  FB00 F009		mul r0, r0, r9

#26			DIV		4	{LNXT:14|15|-1}
(*) INT
3001E70E  2704     		mov r7, #4 ; 4
3001E710  B082     		sub sp, sp, #8
3001E712  F8CD 1000		str r1, [sp]
3001E716  4639     		mov r1, r7
3001E718  FB90 F0F1		sdiv r0, r0, r1
3001E71C  F8DD 1000		ldr r1, [sp]
3001E720  B002     		add sp, sp, #8

#27			ST		yr4	{LNXT:14|15|-1}
(-) INT
3001E722  4682     		mov r10, r0

#28		
#29			(* yr4 := yr4 + 1; *)
#30			LD		yr4	{LNXT:15|18|-1}
(-) UNDEF
3001E724  4650     		mov r0, r10

#31			ADD		1	{LNXT:15|18|-1}
(-) DWORD
3001E726  1C40     		add r0, r0, #1

#32			ST		yr4	{LNXT:15|18|-1}
(-) DWORD
3001E728  4682     		mov r10, r0

#33		
#34			(* DST := (idate - ((yr4 + 3) MOD 7) * 86400 <= ltc) AND (idate + (214 - (yr4 MOD 7)) * 86400 > ltc); *)
#35			LD		214	{LNXT:18|-1|-1}
(-) UNDEF
3001E72A  20D6     		mov r0, #214 ; 214

#36			SUB(		yr4	{LNXT:18|-1|-1}
(*) USINT
3001E72C  B082     		sub sp, sp, #8
3001E72E  F8CD 0000		str r0, [sp]
3001E732  4650     		mov r0, r10

#37			MOD		7	{LNXT:18|-1|-1}
(*) DWORD
3001E734  2107     		mov r1, #7 ; 7
3001E736  F8DF 4090		ldr r4, [pc, #+144] ; 0x3001E4DC
3001E73A  F044 0401		orr r4, r4, #1
3001E73E  47A0     		blx r4

#38			)	{LNXT:18|-1|-1}
(*) DWORD
3001E740  4607     		mov r7, r0
3001E742  F8DD 0000		ldr r0, [sp]
3001E746  B002     		add sp, sp, #8
3001E748  1BC0     		sub r0, r0, r7

#39			MUL		86400	{LNXT:18|-1|-1}
(*) DWORD
3001E74A  F8DF 7074		ldr r7, [pc, #+116] ; 0x15180
3001E74E  463F     		mov r7, r7
3001E750  4378     		mul r0, r0, r7

#40			ADD		idate	{LNXT:18|-1|-1}
(*) DWORD
3001E752  F8DF 7080		ldr r7, [pc, #+128] ; 0xFFFFFFFC
3001E756  59F7     		ldr r7, [r6, +r7]
3001E758  19C0     		add r0, r0, r7

#41			GT		ltc	{LNXT:18|-1|-1}
(*) DWORD
3001E75A  4558     		cmp r0, r11
3001E75C  BF98 2000		lsmov r0, #0
3001E760  BF88 2001		himov r0, #1

#42			AND(		idate	{LNXT:18|-1|-1}
(*) BOOL
3001E764  B082     		sub sp, sp, #8
3001E766  F8CD 0000		str r0, [sp]
3001E76A  F8DF 7068		ldr r7, [pc, #+104] ; 0xFFFFFFFC
3001E76E  59F0     		ldr r0, [r6, +r7]

#43			SUB(		yr4	{LNXT:18|-1|-1}
(*) UDINT
3001E770  B082     		sub sp, sp, #8
3001E772  F8CD 0000		str r0, [sp]
3001E776  4650     		mov r0, r10

#44			ADD		3	{LNXT:18|-1|-1}
(-) DWORD
3001E778  1CC0     		add r0, r0, #3

#45			MOD		7	{LNXT:18|-1|-1}
(*) DWORD
3001E77A  2107     		mov r1, #7 ; 7
3001E77C  F8DF 4048		ldr r4, [pc, #+72] ; 0x3001E4DC
3001E780  F044 0401		orr r4, r4, #1
3001E784  47A0     		blx r4

#46			MUL		86400	{LNXT:18|-1|-1}
(*) DWORD
3001E786  F8DF 7038		ldr r7, [pc, #+56] ; 0x15180
3001E78A  463F     		mov r7, r7
3001E78C  4378     		mul r0, r0, r7

#47			)	{LNXT:18|-1|-1}
(*) DWORD
3001E78E  4607     		mov r7, r0
3001E790  F8DD 0000		ldr r0, [sp]
3001E794  B002     		add sp, sp, #8
3001E796  1BC0     		sub r0, r0, r7

#48			LE		ltc	{LNXT:18|-1|-1}
(*) UDINT
3001E798  4558     		cmp r0, r11
3001E79A  BF88 2000		himov r0, #0
3001E79E  BF98 2001		lsmov r0, #1

#49			)	{LNXT:18|-1|-1}
(*) BOOL
3001E7A2  4607     		mov r7, r0
3001E7A4  F8DD 0000		ldr r0, [sp]
3001E7A8  B002     		add sp, sp, #8
3001E7AA  4038     		and r0, r0, r7

#50			ST		DST	{LNXT:18|-1|-1}
(-) BOOL
3001E7AC  4604     		mov r4, r0

3001E7AE  4620     		mov r0, r4
3001E7B0  E8BD 1E50		ldmia sp!, { r4, r6, r9, r10, r11, r12 }
3001E7B4  F8DD E000		ldr lr, [sp]
3001E7B8  B002     		add sp, sp, #8
3001E7BA  B002     		add sp, sp, #8

3001E7BC  4770     		bx lr

3001E7C0  00015180		; 0x00015180
3001E7C4  FFFFFFFF		; 0x080A4719
3001E7C8  3001E4DC		; 0x3001E4DC
3001E7CC  3001E540		; 0x3001E540
3001E7D0  FFFFFFF8		; 0xFFFFFFF8
3001E7D4  FFFFFFFC		; 0xFFFFFFFC

END_FUNCTION
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

3001E7D8  E92D 4040		stmdb sp!, { r6, lr }
3001E7DC  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
3001E7DE  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
3001E7E2  5DF0     		ldrb r0, [r6, +r7]
3001E7E4  2800     		cmp r0, #0
3001E7E6  BF08 2001		eqmov r0, #1
3001E7EA  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3001E7EE  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
3001E7F0  6AF0     		ldr r0, [r6, #44]
3001E7F2  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
3001E7F4  E92D 0021		stmdb sp!, { r0, r5 }
3001E7F8  4635     		mov r5, r6
3001E7FA  F8DF 4050		ldr r4, [pc, #+80] ; 0x3001E61C
3001E7FE  F044 0401		orr r4, r4, #1
3001E802  47A0     		blx r4
3001E804  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
3001E808  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3001E80A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3001E80C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3001E80E  6AF0     		ldr r0, [r6, #44]
3001E810  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
3001E812  E92D 0021		stmdb sp!, { r0, r5 }
3001E816  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3001E81A  19F5     		add r5, r6, r7
3001E81C  F8DF 4028		ldr r4, [pc, #+40] ; 0x3001E598
3001E820  F044 0401		orr r4, r4, #1
3001E824  47A0     		blx r4
3001E826  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3001E82A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3001E82E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
3001E830  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
3001E834  55F0     		strb r0, [r6, +r7]

3001E836  E8BD 4040		ldmia sp!, { r6, lr }

3001E83A  4770     		bx lr

3001E83C  00000014		; 0x00000014
3001E840  00000020		; 0x00000020
3001E844  00000030		; 0x00000030
3001E848  3001E598		; 0x3001E598
3001E84C  3001E61C		; 0x3001E61C


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List function block: Set_Data_Time
**************************************************

FUNCTION_BLOCK Set_Data_Time

        VAR_IN_OUT
bSetTime : BOOL;
	END_VAR

        VAR_INPUT
iSetYears : INT;
iSetMonth : INT;
iSetDay : INT;
iSetHour : INT;
iSetMinute : INT;
iSetSeconds : INT;
iTimeZone : INT;
UseDST : BOOL;	{ DE:"Use Eu saving time" }
bArduino_TimeOk : BOOL;
	END_VAR

        VAR_OUTPUT
udiTimeSet : UDINT;
bArduino_Set : BOOL;
	END_VAR

        VAR
NONAME : BOOL;
dummyUdint : UDINT;
bIsDts : BOOL;
SetYears : INT;
SetMonth : INT;
SetDay : INT;
SetHour : INT;
SetMinute : INT;
SetSeconds : INT;
TimeZone : INT;
	END_VAR

END_FUNCTION_BLOCK

3001E850  E92D 4040		stmdb sp!, { r6, lr }
3001E854  462E     		mov r6, r5

#0		{SRC:Set_Data_Time}
#1		(*$WAITSWITCH$*)
#2		
#3			(* SetYears:= LIMIT(iSetYears,1970,2038); *)
#4			LDP0		iSetYears	{LNXT:4|5|-1}
(-) UNDEF
#5			LIMIT		1970, 2038	{LNXT:4|5|-1}
(*) INT
3001E856  F8DF 71BC		ldr r7, [pc, #+444] ; 0x18
3001E85A  5FF0     		ldrsh r0, [r6, +r7]
3001E85C  F8DF 71E0		ldr r7, [pc, #+480] ; 0x7B2
3001E860  463F     		mov r7, r7
3001E862  42B8     		cmp r0, r7
3001E864  DA01     		bge #0x000002
3001E866  4638     		mov r0, r7
3001E868  E005     		b #0x00000A
3001E86A  F8DF 71D8		ldr r7, [pc, #+472] ; 0x7F6
3001E86E  463F     		mov r7, r7
3001E870  42B8     		cmp r0, r7
3001E872  DD00     		ble #0x000000
3001E874  4638     		mov r0, r7

#6			ST		SetYears	{LNXT:4|5|-1}
(-) INT
3001E876  8170     		strh r0, [r6, #10]

#7		
#8			(* SetMonth:= LIMIT(iSetMonth,1,12); *)
#9			LDP0		iSetMonth	{LNXT:5|6|-1}
(-) INT
#10			LIMIT		1, 12	{LNXT:5|6|-1}
(*) INT
3001E878  F8DF 719C		ldr r7, [pc, #+412] ; 0x1A
3001E87C  5FF0     		ldrsh r0, [r6, +r7]
3001E87E  2701     		mov r7, #1 ; 1
3001E880  2701     		mov r7, #1 ; 1
3001E882  42B8     		cmp r0, r7
3001E884  DA01     		bge #0x000002
3001E886  4638     		mov r0, r7
3001E888  E004     		b #0x000008
3001E88A  270C     		mov r7, #12 ; 12
3001E88C  270C     		mov r7, #12 ; 12
3001E88E  42B8     		cmp r0, r7
3001E890  DD00     		ble #0x000000
3001E892  4638     		mov r0, r7

#11			ST		SetMonth	{LNXT:5|6|-1}
(-) INT
3001E894  81B0     		strh r0, [r6, #12]

#12		
#13			(* SetDay:= LIMIT(iSetDay,1,31); *)
#14			LDP0		iSetDay	{LNXT:6|7|-1}
(-) INT
#15			LIMIT		1, 31	{LNXT:6|7|-1}
(*) INT
3001E896  F8DF 7184		ldr r7, [pc, #+388] ; 0x1C
3001E89A  5FF0     		ldrsh r0, [r6, +r7]
3001E89C  2701     		mov r7, #1 ; 1
3001E89E  2701     		mov r7, #1 ; 1
3001E8A0  42B8     		cmp r0, r7
3001E8A2  DA01     		bge #0x000002
3001E8A4  4638     		mov r0, r7
3001E8A6  E004     		b #0x000008
3001E8A8  271F     		mov r7, #31 ; 31
3001E8AA  271F     		mov r7, #31 ; 31
3001E8AC  42B8     		cmp r0, r7
3001E8AE  DD00     		ble #0x000000
3001E8B0  4638     		mov r0, r7

#16			ST		SetDay	{LNXT:6|7|-1}
(-) INT
3001E8B2  81F0     		strh r0, [r6, #14]

#17		
#18			(* SetHour:= LIMIT(iSetHour,0,23); *)
#19			LDP0		iSetHour	{LNXT:7|8|-1}
(-) INT
#20			LIMIT		0, 23	{LNXT:7|8|-1}
(*) INT
3001E8B4  F8DF 7168		ldr r7, [pc, #+360] ; 0x1E
3001E8B8  5FF0     		ldrsh r0, [r6, +r7]
3001E8BA  2700     		mov r7, #0 ; 0
3001E8BC  2700     		mov r7, #0 ; 0
3001E8BE  42B8     		cmp r0, r7
3001E8C0  DA01     		bge #0x000002
3001E8C2  4638     		mov r0, r7
3001E8C4  E004     		b #0x000008
3001E8C6  2717     		mov r7, #23 ; 23
3001E8C8  2717     		mov r7, #23 ; 23
3001E8CA  42B8     		cmp r0, r7
3001E8CC  DD00     		ble #0x000000
3001E8CE  4638     		mov r0, r7

#21			ST		SetHour	{LNXT:7|8|-1}
(-) INT
3001E8D0  8230     		strh r0, [r6, #16]

#22		
#23			(* SetMinute:= LIMIT(iSetMinute,0,59); *)
#24			LDP0		iSetMinute	{LNXT:8|9|-1}
(-) INT
#25			LIMIT		0, 59	{LNXT:8|9|-1}
(*) INT
3001E8D2  F8DF 7150		ldr r7, [pc, #+336] ; 0x20
3001E8D6  5FF0     		ldrsh r0, [r6, +r7]
3001E8D8  2700     		mov r7, #0 ; 0
3001E8DA  2700     		mov r7, #0 ; 0
3001E8DC  42B8     		cmp r0, r7
3001E8DE  DA01     		bge #0x000002
3001E8E0  4638     		mov r0, r7
3001E8E2  E004     		b #0x000008
3001E8E4  273B     		mov r7, #59 ; 59
3001E8E6  273B     		mov r7, #59 ; 59
3001E8E8  42B8     		cmp r0, r7
3001E8EA  DD00     		ble #0x000000
3001E8EC  4638     		mov r0, r7

#26			ST		SetMinute	{LNXT:8|9|-1}
(-) INT
3001E8EE  8270     		strh r0, [r6, #18]

#27		
#28			(* SetSeconds:= LIMIT(iSetSeconds,0,59); *)
#29			LDP0		iSetSeconds	{LNXT:9|11|-1}
(-) INT
#30			LIMIT		0, 59	{LNXT:9|11|-1}
(*) INT
3001E8F0  F8DF 7134		ldr r7, [pc, #+308] ; 0x22
3001E8F4  5FF0     		ldrsh r0, [r6, +r7]
3001E8F6  2700     		mov r7, #0 ; 0
3001E8F8  2700     		mov r7, #0 ; 0
3001E8FA  42B8     		cmp r0, r7
3001E8FC  DA01     		bge #0x000002
3001E8FE  4638     		mov r0, r7
3001E900  E004     		b #0x000008
3001E902  273B     		mov r7, #59 ; 59
3001E904  273B     		mov r7, #59 ; 59
3001E906  42B8     		cmp r0, r7
3001E908  DD00     		ble #0x000000
3001E90A  4638     		mov r0, r7

#31			ST		SetSeconds	{LNXT:9|11|-1}
(-) INT
3001E90C  82B0     		strh r0, [r6, #20]

#32		
#33		
#34			(* IF bSetTime *)
#35			LD		bSetTime	{LNXT:11|-1|-1}
(*) UNDEF
3001E90E  F8DF 712C		ldr r7, [pc, #+300] ; 0x2D
3001E912  5DF0     		ldrb r0, [r6, +r7]

#36			JMPCN	$label0	{LNXT:11|14|43}
(-) BOOL
3001E914  2800     		cmp r0, #0
3001E916  D05F     		beq #190 ; 0x3001E9D8


#37		
#38			(* THEN *)
#39		
#40				(* dummyUdint := TO_UDINT(CONCAT_DT(SetYears,SetMonth,SetDay,SetHour,SetMinute,SetSeconds)); *)
#41				LDP0		SetYears	{LNXT:14|20|-1}
(-) BOOL
#42				CONCAT_DT		SetMonth, SetDay, SetHour, SetMinute, SetSeconds	{LNXT:14|20|-1}
(*) INT
3001E91A  F8DF 70E0		ldr r7, [pc, #+224] ; 0xA
3001E91E  5FF0     		ldrsh r0, [r6, +r7]
3001E920  B082     		sub sp, sp, #8
3001E922  F8CD 3000		str r3, [sp]
3001E926  E92D 0006		stmdb sp!, { r1, r2 }
3001E92A  B082     		sub sp, sp, #8
3001E92C  F8DF 70E0		ldr r7, [pc, #+224] ; 0x14
3001E930  5FF7     		ldrsh r7, [r6, +r7]
3001E932  F8CD 7004		str r7, [sp, #+4]
3001E936  F8DF 70D4		ldr r7, [pc, #+212] ; 0x12
3001E93A  5FF7     		ldrsh r7, [r6, +r7]
3001E93C  F8CD 7000		str r7, [sp]
3001E940  F8DF 70C4		ldr r7, [pc, #+196] ; 0x10
3001E944  5FF3     		ldrsh r3, [r6, +r7]
3001E946  F8DF 70BC		ldr r7, [pc, #+188] ; 0xE
3001E94A  5FF2     		ldrsh r2, [r6, +r7]
3001E94C  F8DF 70B0		ldr r7, [pc, #+176] ; 0xC
3001E950  5FF1     		ldrsh r1, [r6, +r7]
3001E952  F8DF 40F4		ldr r4, [pc, #+244] ; 0x80A4719
3001E956  F044 0401		orr r4, r4, #1
3001E95A  47A0     		blx r4
3001E95C  B002     		add sp, sp, #8
3001E95E  E8BD 0006		ldmia sp!, { r1, r2 }
3001E962  F8DD 3000		ldr r3, [sp]
3001E966  B002     		add sp, sp, #8

#43				TO_UDINT	{LNXT:14|20|-1}
(-) DATE_AND_TIME
#44				ST		dummyUdint	{LNXT:14|20|-1}
(-) UDINT
3001E968  6070     		str r0, [r6, #4]

#45		
#46				(* dummyUdint := dummyUdint - (iTimeZone *3600); *)
#47				LD		dummyUdint	{LNXT:20|22|-1}
(-) UNDEF
3001E96A  6870     		ldr r0, [r6, #4]

#48				SUB(		iTimeZone	{LNXT:20|22|-1}
(*) UDINT
3001E96C  B082     		sub sp, sp, #8
3001E96E  F8CD 0000		str r0, [sp]
3001E972  F8DF 70B8		ldr r7, [pc, #+184] ; 0x24
3001E976  5FF0     		ldrsh r0, [r6, +r7]

#49				MUL		3600	{LNXT:20|22|-1}
(*) INT
3001E978  F44F 6761		mov r7, #3600 ; 3600
3001E97C  4378     		mul r0, r0, r7

#50				)	{LNXT:20|22|-1}
(*) INT
3001E97E  4607     		mov r7, r0
3001E980  F8DD 0000		ldr r0, [sp]
3001E984  B002     		add sp, sp, #8
3001E986  1BC0     		sub r0, r0, r7

#51				ST		dummyUdint	{LNXT:20|22|-1}
(*) DINT
3001E988  B082     		sub sp, sp, #8
3001E98A  F8CD 0000		str r0, [sp]
3001E98E  6070     		str r0, [r6, #4]
3001E990  F8DD 0000		ldr r0, [sp]
3001E994  B002     		add sp, sp, #8

#52		
#53		
#54				(* IF UseDST *)
#55				LD		UseDST	{LNXT:22|-1|-1}
(*) UNDEF
3001E996  F8DF 7098		ldr r7, [pc, #+152] ; 0x26
3001E99A  5DF0     		ldrb r0, [r6, +r7]

#56				JMPCN	$label1	{LNXT:22|24|33}
(-) BOOL
3001E99C  2800     		cmp r0, #0
3001E99E  D015     		beq #42 ; 0x3001E9CC


#57		
#58				(* THEN *)
#59		
#60					(* bIsDts:= DST(TO_DATE_AND_TIME(dummyUdint)); *)
#61					LDP0		dummyUdint	{LNXT:24|26|-1}
(-) BOOL
#62					TO_DATE_AND_TIME	{LNXT:24|26|-1}
(-) UDINT
3001E9A2  6870     		ldr r0, [r6, #4]

#63					DST	{LNXT:24|26|-1}
(*) DATE_AND_TIME
3001E9A4  B082     		sub sp, sp, #8
3001E9A6  4607     		mov r7, r0
3001E9A8  F8CD 7000		str r7, [sp]
3001E9AC  F8DF 409C		ldr r4, [pc, #+156] ; 0x3001E688
3001E9B0  F044 0401		orr r4, r4, #1
3001E9B4  47A0     		blx r4
3001E9B6  B002     		add sp, sp, #8

#64					ST		bIsDts	{LNXT:24|26|-1}
(-) BOOL
3001E9B8  7230     		strb r0, [r6, #8]

#65		
#66		
#67					(* IF bIsDts *)
#68					LD		bIsDts	{LNXT:26|-1|-1}
(-) UNDEF
3001E9BA  7A30     		ldrb r0, [r6, #8]

#69					JMPCN	$label2	{LNXT:26|27|33}
(-) BOOL
3001E9BC  2800     		cmp r0, #0
3001E9BE  D005     		beq #10 ; 0x3001E9CC


#70		
#71					(* THEN *)
#72		
#73						(* dummyUdint := dummyUdint -3600; *)
#74						LD		dummyUdint	{LNXT:27|33|-1}
(-) UNDEF
3001E9C2  6870     		ldr r0, [r6, #4]

#75						SUB		3600	{LNXT:27|33|-1}
(*) UDINT
3001E9C4  F44F 6761		mov r7, #3600 ; 3600
3001E9C8  1BC0     		sub r0, r0, r7

#76						ST		dummyUdint	{LNXT:27|33|-1}
(-) UDINT
3001E9CA  6070     		str r0, [r6, #4]

#77		
#78		$label2:
#79					(* END_IF *)
#80		
#81		$label1:
#82				(* END_IF *)
#83		
#84				(* udiTimeSet:= dummyUdint; *)
#85				MOVE		dummyUdint,udiTimeSet	{LNXT:33|37|-1}
(*) UDINT
3001E9CC  6870     		ldr r0, [r6, #4]
3001E9CE  62B0     		str r0, [r6, #40]

#86		
#87				(* bArduino_Set := true; *)
#88				MOVE		true,bArduino_Set	{LNXT:37|43|-1}
(*) UDINT
3001E9D0  2001     		mov r0, #1 ; 1
3001E9D2  F8DF 7064		ldr r7, [pc, #+100] ; 0x2C
3001E9D6  55F0     		strb r0, [r6, +r7]

#89		
#90		$label0:
#91			(* END_IF *)
#92		
#93		
#94			(* IF bArduino_TimeOk *)
#95			LD		bArduino_TimeOk	{LNXT:43|-1|-1}
(*) UNDEF
3001E9D8  F8DF 7058		ldr r7, [pc, #+88] ; 0x27
3001E9DC  5DF0     		ldrb r0, [r6, +r7]

#96			JMPCN	$label3	{LNXT:43|44|-1}
(-) BOOL
3001E9DE  2800     		cmp r0, #0
3001E9E0  D008     		beq #16 ; 0x3001E9F4


#97		
#98			(* THEN *)
#99		
#100				(* bArduino_Set := false; *)
#101				MOVE		false,bArduino_Set	{LNXT:44|45|-1}
(*) BOOL
3001E9E4  2000     		mov r0, #0 ; 0
3001E9E6  F8DF 7050		ldr r7, [pc, #+80] ; 0x2C
3001E9EA  55F0     		strb r0, [r6, +r7]

#102		
#103				(* bSetTime := false; *)
#104				MOVE		false,bSetTime	{LNXT:45|-1|-1}
(*) BOOL
3001E9EC  2000     		mov r0, #0 ; 0
3001E9EE  F8DF 704C		ldr r7, [pc, #+76] ; 0x2D
3001E9F2  55F0     		strb r0, [r6, +r7]

3001E9F4  E8BD 4040		ldmia sp!, { r6, lr }

3001E9F8  4770     		bx lr

3001E9FC  0000000A		; 0x0000000A
3001EA00  0000000C		; 0x0000000C
3001EA04  0000000E		; 0x0000000E
3001EA08  00000010		; 0x00000010
3001EA0C  00000012		; 0x00000012
3001EA10  00000014		; 0x00000014
3001EA14  00000018		; 0x00000018
3001EA18  0000001A		; 0x0000001A
3001EA1C  0000001C		; 0x0000001C
3001EA20  0000001E		; 0x0000001E
3001EA24  00000020		; 0x00000020
3001EA28  00000022		; 0x00000022
3001EA2C  00000024		; 0x00000024
3001EA30  00000026		; 0x00000026
3001EA34  00000027		; 0x00000027
3001EA38  0000002C		; 0x0000002C
3001EA3C  0000002D		; 0x0000002D
3001EA40  000007B2		; 0x000007B2
3001EA44  000007F6		; 0x000007F6
3001EA48  FFFFFFFF		; 0x080A4719
3001EA4C  3001E688		; 0x3001E688


Frame allocation:

	0000 bit  0: VAR NONAME
	0004       : VAR dummyUdint
	0008 bit  0: VAR bIsDts
	000A       : VAR SetYears
	000C       : VAR SetMonth
	000E       : VAR SetDay
	0010       : VAR SetHour
	0012       : VAR SetMinute
	0014       : VAR SetSeconds
	0016       : VAR TimeZone
	0018       : VAR iSetYears
	001A       : VAR iSetMonth
	001C       : VAR iSetDay
	001E       : VAR iSetHour
	0020       : VAR iSetMinute
	0022       : VAR iSetSeconds
	0024       : VAR iTimeZone
	0026 bit  0: VAR UseDST
	0027 bit  0: VAR bArduino_TimeOk
	0028       : VAR udiTimeSet
	002C bit  0: VAR bArduino_Set
	002D bit  0: VAR bSetTime

END_FUNCTION_BLOCK
**************************************************
	List function block: Curr_Date_Time
**************************************************

FUNCTION_BLOCK Curr_Date_Time

        VAR_INPUT
UTC_TIMESTAMP : UDINT;
Tz : INT;	{ DE:"Time Zone" }
use_DST : BOOL;	{ DE:"Day Saving_time" }
	END_VAR

        VAR_OUTPUT
CURR_DT : DATE_AND_TIME;
Is_DST : BOOL;
Week_Day : INT;	{ DE:"0 sunday -- 6 saturday" }
	END_VAR

        VAR
Dummy_UDINT : UDINT;
	END_VAR

END_FUNCTION_BLOCK

3001EA50  E92D 4040		stmdb sp!, { r6, lr }
3001EA54  462E     		mov r6, r5

#0		{SRC:Curr_Date_Time}
#1		(*$WAITSWITCH$*)
#2		
#3			(* Dummy_UDINT := TO_UDINT (UTC_TIMESTAMP +(Tz *3600)); *)
#4			LD		Tz	{LNXT:3|6|-1}
(*) UNDEF
3001EA56  F8DF 7064		ldr r7, [pc, #+100] ; 0x8
3001EA5A  5FF0     		ldrsh r0, [r6, +r7]

#5			MUL		3600	{LNXT:3|6|-1}
(*) INT
3001EA5C  F44F 6761		mov r7, #3600 ; 3600
3001EA60  4378     		mul r0, r0, r7

#6			ADD		UTC_TIMESTAMP	{LNXT:3|6|-1}
(*) INT
3001EA62  6877     		ldr r7, [r6, #4]
3001EA64  19C0     		add r0, r0, r7

#7			TO_UDINT	{LNXT:3|6|-1}
(-) DINT
#8			ST		Dummy_UDINT	{LNXT:3|6|-1}
(-) UDINT
3001EA66  6030     		str r0, [r6]

#9		
#10		
#11			(* IF use_DST *)
#12			LD		use_DST	{LNXT:6|-1|-1}
(-) UNDEF
3001EA68  7AB0     		ldrb r0, [r6, #10]

#13			JMPCN	$label0	{LNXT:6|7|20}
(-) BOOL
3001EA6A  2800     		cmp r0, #0
3001EA6C  D017     		beq #46 ; 0x3001EA9E


#14		
#15			(* THEN *)
#16		
#17				(* Is_DST := DST(TO_DATE_AND_TIME(UTC_TIMESTAMP)); *)
#18				LDP0		UTC_TIMESTAMP	{LNXT:7|10|-1}
(-) BOOL
#19				TO_DATE_AND_TIME	{LNXT:7|10|-1}
(-) UDINT
3001EA70  6870     		ldr r0, [r6, #4]

#20				DST	{LNXT:7|10|-1}
(*) DATE_AND_TIME
3001EA72  B082     		sub sp, sp, #8
3001EA74  4607     		mov r7, r0
3001EA76  F8CD 7000		str r7, [sp]
3001EA7A  F8DF 4048		ldr r4, [pc, #+72] ; 0x3001E688
3001EA7E  F044 0401		orr r4, r4, #1
3001EA82  47A0     		blx r4
3001EA84  B002     		add sp, sp, #8

#21				ST		Is_DST	{LNXT:7|10|-1}
(-) BOOL
3001EA86  7430     		strb r0, [r6, #16]

#22		
#23		
#24				(* IF Is_DST *)
#25				LD		Is_DST	{LNXT:10|-1|-1}
(-) UNDEF
3001EA88  7C30     		ldrb r0, [r6, #16]

#26				JMPCN	$label1	{LNXT:10|11|15}
(-) BOOL
3001EA8A  2800     		cmp r0, #0
3001EA8C  D005     		beq #10 ; 0x3001EA9A


#27		
#28				(* THEN *)
#29		
#30					(* Dummy_UDINT := Dummy_UDINT +3600; *)
#31					LD		Dummy_UDINT	{LNXT:11|15|-1}
(-) UNDEF
3001EA90  6830     		ldr r0, [r6]

#32					ADD		3600	{LNXT:11|15|-1}
(*) UDINT
3001EA92  F44F 6761		mov r7, #3600 ; 3600
3001EA96  19C0     		add r0, r0, r7

#33					ST		Dummy_UDINT	{LNXT:11|15|-1}
(-) UDINT
3001EA98  6030     		str r0, [r6]

#34		
#35		$label1:
#36				(* END_IF *)
#37		
#38				(* CURR_DT := TO_DATE_AND_TIME(Dummy_UDINT); *)
#39				LDP0		Dummy_UDINT	{LNXT:15|20|-1}
(-) UDINT
#40				TO_DATE_AND_TIME	{LNXT:15|20|-1}
(-) UDINT
3001EA9A  6830     		ldr r0, [r6]

#41				ST		CURR_DT	{LNXT:15|20|-1}
(-) DATE_AND_TIME
3001EA9C  60F0     		str r0, [r6, #12]

#42		
#43		$label0:
#44			(* END_IF *)
#45		
#46			(* Week_Day := WeekDay(CURR_DT); *)
#47			LDP0		CURR_DT	{LNXT:20|-1|-1}
(-) DATE_AND_TIME
#48			WeekDay	{LNXT:20|-1|-1}
(*) DATE_AND_TIME
3001EA9E  B082     		sub sp, sp, #8
3001EAA0  68F7     		ldr r7, [r6, #12]
3001EAA2  F8CD 7000		str r7, [sp]
3001EAA6  F8DF 4018		ldr r4, [pc, #+24] ; 0x3001E4E8
3001EAAA  F044 0401		orr r4, r4, #1
3001EAAE  47A0     		blx r4
3001EAB0  B002     		add sp, sp, #8

#49			ST		Week_Day	{LNXT:20|-1|-1}
(-) INT
3001EAB2  8270     		strh r0, [r6, #18]

3001EAB4  E8BD 4040		ldmia sp!, { r6, lr }

3001EAB8  4770     		bx lr

3001EABC  00000008		; 0x00000008
3001EAC0  3001E4E8		; 0x3001E4E8
3001EAC4  3001E688		; 0x3001E688


Frame allocation:

	0000       : VAR Dummy_UDINT
	0004       : VAR UTC_TIMESTAMP
	0008       : VAR Tz
	000A bit  0: VAR use_DST
	000C       : VAR CURR_DT
	0010 bit  0: VAR Is_DST
	0012       : VAR Week_Day

END_FUNCTION_BLOCK
**************************************************
	List program: Data_ora
**************************************************

PROGRAM Data_ora

        VAR
iWeekDay : INT;	{ DE:"0 Sunday, 6 Saturday" }
BSet : BOOL;
Dummy_Bit : BOOL;
bDST : BOOL;
ClocK1Hz : Clock_gen;
FB_Set_Time : Set_Data_Time;
FB_Curr_Date_Time : Curr_Date_Time;
Summer_time : BOOL;
bSet_Ntp : BOOL;
i_WeekDay : INT;
	END_VAR

END_PROGRAM

3001EAD0  B082     		sub sp, sp, #8
3001EAD2  F8CD E000		str lr, [sp]
3001EAD6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:Data_ora}
#1		 
#2		  
#3			(* Network 1 *)
#4			MOVE		500,CLOCK1HZ.TEMPO {R:1$2}
(*) UDINT
3001EADA  F44F 70FA		mov r0, #500 ; 500
3001EADE  F8DF 71B0		ldr r7, [pc, #+432] ; 0x200002D4
3001EAE2  6038     		str r0, [r7]

#5			CAL		CLOCK1HZ {R:1$2}
(*) UDINT
3001EAE4  E92D 0021		stmdb sp!, { r0, r5 }
3001EAE8  F8DF 51A0		ldr r5, [pc, #+416] ; 0x200002A8
3001EAEC  F8DF 4224		ldr r4, [pc, #+548] ; 0x3001E7D8
3001EAF0  F044 0401		orr r4, r4, #1
3001EAF4  47A0     		blx r4
3001EAF6  E8BD 0021		ldmia sp!, { r0, r5 }

#6			LD		TRUE
(-) UNDEF
3001EAFA  2001     		mov r0, #1 ; 1

#7			AND		CLOCK1HZ.OUT {R:1$6}
(*) BOOL
3001EAFC  F8DF 7194		ldr r7, [pc, #+404] ; 0x200002D8
3001EB00  783F     		ldrb r7, [r7]
3001EB02  4038     		and r0, r0, r7

#8			ST		GREENLED {R:1$5}
(*) BOOL
3001EB04  F8DF 7208		ldr r7, [pc, #+520] ; 0x2402052D
3001EB08  7038     		strb r0, [r7]

#9		 
#10			(* Network 2 *)
#11			MOVE		BSET,FB_SET_TIME.BSETTIME {R:2$36}
(*) BOOL
3001EB0A  F8DF 7174		ldr r7, [pc, #+372] ; 0x200002A5
3001EB0E  7838     		ldrb r0, [r7]
3001EB10  F8DF 71B4		ldr r7, [pc, #+436] ; 0x20000309
3001EB14  7038     		strb r0, [r7]

#12			MOVE		DATATIME_SET.ANNO,FB_SET_TIME.ISETYEARS {R:2$36}
(*) BOOL
3001EB16  F8DF 71B4		ldr r7, [pc, #+436] ; 0x2000030C
3001EB1A  F9B7 0000		ldrsh r0, [r7]
3001EB1E  F8DF 717C		ldr r7, [pc, #+380] ; 0x200002F4
3001EB22  8038     		strh r0, [r7]

#13			MOVE		DATATIME_SET.MESE,FB_SET_TIME.ISETMONTH {R:2$36}
(*) INT
3001EB24  F8DF 71A8		ldr r7, [pc, #+424] ; 0x2000030E
3001EB28  F9B7 0000		ldrsh r0, [r7]
3001EB2C  F8DF 7170		ldr r7, [pc, #+368] ; 0x200002F6
3001EB30  8038     		strh r0, [r7]

#14			MOVE		DATATIME_SET.GIORNO,FB_SET_TIME.ISETDAY {R:2$36}
(*) INT
3001EB32  F8DF 71A0		ldr r7, [pc, #+416] ; 0x20000310
3001EB36  F9B7 0000		ldrsh r0, [r7]
3001EB3A  F8DF 7168		ldr r7, [pc, #+360] ; 0x200002F8
3001EB3E  8038     		strh r0, [r7]

#15			MOVE		DATATIME_SET.ORE,FB_SET_TIME.ISETHOUR {R:2$36}
(*) INT
3001EB40  F8DF 7194		ldr r7, [pc, #+404] ; 0x20000312
3001EB44  F9B7 0000		ldrsh r0, [r7]
3001EB48  F8DF 715C		ldr r7, [pc, #+348] ; 0x200002FA
3001EB4C  8038     		strh r0, [r7]

#16			MOVE		DATATIME_SET.MINUTI,FB_SET_TIME.ISETMINUTE {R:2$36}
(*) INT
3001EB4E  F8DF 718C		ldr r7, [pc, #+396] ; 0x20000314
3001EB52  F9B7 0000		ldrsh r0, [r7]
3001EB56  F8DF 7154		ldr r7, [pc, #+340] ; 0x200002FC
3001EB5A  8038     		strh r0, [r7]

#17			MOVE		DATATIME_SET.SECONDI,FB_SET_TIME.ISETSECONDS {R:2$36}
(*) INT
3001EB5C  F8DF 7180		ldr r7, [pc, #+384] ; 0x20000316
3001EB60  F9B7 0000		ldrsh r0, [r7]
3001EB64  F8DF 7148		ldr r7, [pc, #+328] ; 0x200002FE
3001EB68  8038     		strh r0, [r7]

#18			MOVE		1,FB_SET_TIME.ITIMEZONE {R:2$36}
(*) INT
3001EB6A  2001     		mov r0, #1 ; 1
3001EB6C  F8DF 7144		ldr r7, [pc, #+324] ; 0x20000300
3001EB70  8038     		strh r0, [r7]

#19			MOVE		TRUE,FB_SET_TIME.USEDST {R:2$36}
(*) INT
3001EB72  2001     		mov r0, #1 ; 1
3001EB74  F8DF 7140		ldr r7, [pc, #+320] ; 0x20000302
3001EB78  7038     		strb r0, [r7]

#20			MOVE		TIMESETOK,FB_SET_TIME.BARDUINO_TIMEOK {R:2$36}
(*) BOOL
3001EB7A  F8DF 71A8		ldr r7, [pc, #+424] ; 0x38000004
3001EB7E  7838     		ldrb r0, [r7]
3001EB80  F8DF 7138		ldr r7, [pc, #+312] ; 0x20000303
3001EB84  7038     		strb r0, [r7]

#21			CAL		FB_SET_TIME {R:2$36}
(*) BOOL
3001EB86  E92D 0021		stmdb sp!, { r0, r5 }
3001EB8A  F8DF 510C		ldr r5, [pc, #+268] ; 0x200002DC
3001EB8E  F8DF 4188		ldr r4, [pc, #+392] ; 0x3001E850
3001EB92  F044 0401		orr r4, r4, #1
3001EB96  47A0     		blx r4
3001EB98  E8BD 0021		ldmia sp!, { r0, r5 }

#22			MOVE		FB_SET_TIME.BSETTIME,BSET {R:2$36}
(*) BOOL
3001EB9C  F8DF 7128		ldr r7, [pc, #+296] ; 0x20000309
3001EBA0  7838     		ldrb r0, [r7]
3001EBA2  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002A5
3001EBA6  7038     		strb r0, [r7]

#23			MOVE		FB_SET_TIME.UDITIMESET,TIMETOSET {R:2$36}
(*) BOOL
3001EBA8  F8DF 7114		ldr r7, [pc, #+276] ; 0x20000304
3001EBAC  6838     		ldr r0, [r7]
3001EBAE  F8DF 7180		ldr r7, [pc, #+384] ; 0x38000200
3001EBB2  6038     		str r0, [r7]

#24			MOVE		FB_SET_TIME.BARDUINO_SET,SET_TIME {R:2$36}
(*) UDINT
3001EBB4  F8DF 710C		ldr r7, [pc, #+268] ; 0x20000308
3001EBB8  7838     		ldrb r0, [r7]
3001EBBA  F8DF 7178		ldr r7, [pc, #+376] ; 0x38000204
3001EBBE  7038     		strb r0, [r7]

#25			LD		TRUE
(-) UNDEF
3001EBC0  2001     		mov r0, #1 ; 1

#26		 
#27			(* Network 3 *)
#28			LD		BSET_NTP {R:3$0}
(*) UNDEF
3001EBC2  F8DF 70C4		ldr r7, [pc, #+196] ; 0x200002A7
3001EBC6  7838     		ldrb r0, [r7]

#29			OR		SET_DATA_RTC {R:3$7}
(*) BOOL
3001EBC8  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A6
3001EBCC  783F     		ldrb r7, [r7]
3001EBCE  4338     		orr r0, r0, r7

#30			ST		$$VAR$1
(*) BOOL
3001EBD0  F8DF 7110		ldr r7, [pc, #+272] ; 0x20000318
3001EBD4  7038     		strb r0, [r7]

#31			ST		NTP_SET {R:3$1}
(*) BOOL
3001EBD6  F8DF 7160		ldr r7, [pc, #+352] ; 0x38000205
3001EBDA  7038     		strb r0, [r7]

#32			LD		$$VAR$1
(*) UNDEF
3001EBDC  F8DF 7104		ldr r7, [pc, #+260] ; 0x20000318
3001EBE0  7838     		ldrb r0, [r7]

#33			AND(		NTPSETOK {R:3$3}
(*) BOOL
3001EBE2  B082     		sub sp, sp, #8
3001EBE4  F8CD 0000		str r0, [sp]
3001EBE8  F8DF 713C		ldr r7, [pc, #+316] ; 0x38000005
3001EBEC  7838     		ldrb r0, [r7]

#34			OR		NTPSETKO {R:3$5}
(*) BOOL
3001EBEE  F8DF 713C		ldr r7, [pc, #+316] ; 0x38000006
3001EBF2  783F     		ldrb r7, [r7]
3001EBF4  4338     		orr r0, r0, r7

#35			)
#36			R		BSET_NTP {R:3$4}
(*) BOOL
3001EBF6  4607     		mov r7, r0
3001EBF8  F8DD 0000		ldr r0, [sp]
3001EBFC  B002     		add sp, sp, #8
3001EBFE  4038     		and r0, r0, r7

(*) BOOL
3001EC00  2800     		cmp r0, #0
3001EC02  D009     		beq #0x000012
3001EC04  B082     		sub sp, sp, #8
3001EC06  F8CD 0000		str r0, [sp]
3001EC0A  2000     		mov r0, #0
3001EC0C  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002A7
3001EC10  7038     		strb r0, [r7]
3001EC12  F8DD 0000		ldr r0, [sp]
3001EC16  B002     		add sp, sp, #8

#37		 
#38			(* Network 4 *)
#39			MOVE		TIMESTAMP,FB_CURR_DATE_TIME.UTC_TIMESTAMP {R:4$8}
(*) BOOL
3001EC18  F8DF 7104		ldr r7, [pc, #+260] ; 0x38000000
3001EC1C  6838     		ldr r0, [r7]
3001EC1E  F8DF 70D4		ldr r7, [pc, #+212] ; 0x20000320
3001EC22  6038     		str r0, [r7]

#40			MOVE		1,FB_CURR_DATE_TIME.TZ {R:4$8}
(*) UDINT
3001EC24  2001     		mov r0, #1 ; 1
3001EC26  F8DF 70D0		ldr r7, [pc, #+208] ; 0x20000324
3001EC2A  8038     		strh r0, [r7]

#41			MOVE		TRUE,FB_CURR_DATE_TIME.USE_DST {R:4$8}
(*) INT
3001EC2C  2001     		mov r0, #1 ; 1
3001EC2E  F8DF 70CC		ldr r7, [pc, #+204] ; 0x20000326
3001EC32  7038     		strb r0, [r7]

#42			CAL		FB_CURR_DATE_TIME {R:4$8}
(*) BOOL
3001EC34  E92D 0021		stmdb sp!, { r0, r5 }
3001EC38  F8DF 50B4		ldr r5, [pc, #+180] ; 0x2000031C
3001EC3C  F8DF 40DC		ldr r4, [pc, #+220] ; 0x3001EA50
3001EC40  F044 0401		orr r4, r4, #1
3001EC44  47A0     		blx r4
3001EC46  E8BD 0021		ldmia sp!, { r0, r5 }

#43			MOVE		FB_CURR_DATE_TIME.CURR_DT,DATAORACORRENTI {R:4$8}
(*) BOOL
3001EC4A  F8DF 70B4		ldr r7, [pc, #+180] ; 0x20000328
3001EC4E  6838     		ldr r0, [r7]
3001EC50  F8DF 70B8		ldr r7, [pc, #+184] ; 0x20000330
3001EC54  6038     		str r0, [r7]

#44			MOVE		FB_CURR_DATE_TIME.IS_DST,SUMMER_TIME {R:4$8}
(*) DATE_AND_TIME
3001EC56  F8DF 70AC		ldr r7, [pc, #+172] ; 0x2000032C
3001EC5A  7838     		ldrb r0, [r7]
3001EC5C  F8DF 7088		ldr r7, [pc, #+136] ; 0x20000319
3001EC60  7038     		strb r0, [r7]

#45			MOVE		FB_CURR_DATE_TIME.WEEK_DAY,I_WEEKDAY {R:4$8}
(*) BOOL
3001EC62  F8DF 70A4		ldr r7, [pc, #+164] ; 0x2000032E
3001EC66  F9B7 0000		ldrsh r0, [r7]
3001EC6A  F8DF 7080		ldr r7, [pc, #+128] ; 0x2000031A
3001EC6E  8038     		strh r0, [r7]

#46			LD		TRUE
(-) UNDEF
3001EC70  2001     		mov r0, #1 ; 1

3001EC72  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EC76  F8DD E000		ldr lr, [sp]
3001EC7A  B002     		add sp, sp, #8

3001EC7C  4770     		bx lr

3001EC80  200002A5		; 0x200002A5
3001EC84  200002A6		; 0x200002A6
3001EC88  200002A7		; 0x200002A7
3001EC8C  200002A8		; 0x200002A8
3001EC90  200002D4		; 0x200002D4
3001EC94  200002D8		; 0x200002D8
3001EC98  200002DC		; 0x200002DC
3001EC9C  200002F4		; 0x200002F4
3001ECA0  200002F6		; 0x200002F6
3001ECA4  200002F8		; 0x200002F8
3001ECA8  200002FA		; 0x200002FA
3001ECAC  200002FC		; 0x200002FC
3001ECB0  200002FE		; 0x200002FE
3001ECB4  20000300		; 0x20000300
3001ECB8  20000302		; 0x20000302
3001ECBC  20000303		; 0x20000303
3001ECC0  20000304		; 0x20000304
3001ECC4  20000308		; 0x20000308
3001ECC8  20000309		; 0x20000309
3001ECCC  2000030C		; 0x2000030C
3001ECD0  2000030E		; 0x2000030E
3001ECD4  20000310		; 0x20000310
3001ECD8  20000312		; 0x20000312
3001ECDC  20000314		; 0x20000314
3001ECE0  20000316		; 0x20000316
3001ECE4  20000318		; 0x20000318
3001ECE8  20000319		; 0x20000319
3001ECEC  2000031A		; 0x2000031A
3001ECF0  2000031C		; 0x2000031C
3001ECF4  20000320		; 0x20000320
3001ECF8  20000324		; 0x20000324
3001ECFC  20000326		; 0x20000326
3001ED00  20000328		; 0x20000328
3001ED04  2000032C		; 0x2000032C
3001ED08  2000032E		; 0x2000032E
3001ED0C  20000330		; 0x20000330
3001ED10  FFFFFFFF		; 0x2402052D
3001ED14  3001E7D8		; 0x3001E7D8
3001ED18  3001E850		; 0x3001E850
3001ED1C  3001EA50		; 0x3001EA50
3001ED20  FFFFFFFF		; 0x38000000
3001ED24  FFFFFFFF		; 0x38000004
3001ED28  FFFFFFFF		; 0x38000005
3001ED2C  FFFFFFFF		; 0x38000006
3001ED30  FFFFFFFF		; 0x38000200
3001ED34  FFFFFFFF		; 0x38000204
3001ED38  FFFFFFFF		; 0x38000205

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001ED3C  4770     		bx lr


*** OUTPUT:
3001ED3E  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

3001ED40  B082     		sub sp, sp, #8
3001ED42  F8CD E000		str lr, [sp]
3001ED46  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001ED4A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001ED4E  F8DD E000		ldr lr, [sp]
3001ED52  B002     		add sp, sp, #8

3001ED54  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

3001ED60  B082     		sub sp, sp, #8
3001ED62  F8CD E000		str lr, [sp]
3001ED66  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
3001ED6A  2000     		mov r0, #0 ; 0
3001ED6C  F8DF 7054		ldr r7, [pc, #+84] ; 0x20000334
3001ED70  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
3001ED72  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
3001ED74  B088     		sub sp, sp, #32
3001ED76  2700     		mov r7, #0 ; 0
3001ED78  4639     		mov r1, r7
3001ED7A  2700     		mov r7, #0 ; 0
3001ED7C  463A     		mov r2, r7
3001ED7E  2700     		mov r7, #0 ; 0
3001ED80  463B     		mov r3, r7
3001ED82  2700     		mov r7, #0 ; 0
3001ED84  F8CD 7000		str r7, [sp]
3001ED88  2700     		mov r7, #0 ; 0
3001ED8A  F8CD 7004		str r7, [sp, #+4]
3001ED8E  2700     		mov r7, #0 ; 0
3001ED90  F8CD 7008		str r7, [sp, #+8]
3001ED94  2700     		mov r7, #0 ; 0
3001ED96  F8CD 700C		str r7, [sp, #+12]
3001ED9A  2700     		mov r7, #0 ; 0
3001ED9C  F8CD 7010		str r7, [sp, #+16]
3001EDA0  2700     		mov r7, #0 ; 0
3001EDA2  F8CD 7014		str r7, [sp, #+20]
3001EDA6  2700     		mov r7, #0 ; 0
3001EDA8  F8CD 7018		str r7, [sp, #+24]
3001EDAC  F8DF 4010		ldr r4, [pc, #+16] ; 0x80A0251
3001EDB0  F044 0401		orr r4, r4, #1
3001EDB4  47A0     		blx r4
3001EDB6  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
3001EDB8  F8DF 700C		ldr r7, [pc, #+12] ; 0x20000338
3001EDBC  7038     		strb r0, [r7]

3001EDBE  E005     		b #10

3001EDC0  FFFFFFFF		; 0x080A0251
3001EDC4  20000334		; 0x20000334
3001EDC8  20000338		; 0x20000338

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3001EDCC  2010     		mov r0, #16 ; 16
3001EDCE  F8DF 40BC		ldr r4, [pc, #+188] ; 0x80A6F69
3001EDD2  F044 0401		orr r4, r4, #1
3001EDD6  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
3001EDD8  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3001EDDC  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3001EDDE  2000     		mov r0, #0 ; 0
3001EDE0  2100     		mov r1, #0 ; 0
3001EDE2  F8DF 40AC		ldr r4, [pc, #+172] ; 0x80A6F75
3001EDE6  F044 0401		orr r4, r4, #1
3001EDEA  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3001EDEC  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
3001EDF0  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
3001EDF2  2001     		mov r0, #1 ; 1
3001EDF4  2100     		mov r1, #0 ; 0
3001EDF6  F8DF 4098		ldr r4, [pc, #+152] ; 0x80A6F75
3001EDFA  F044 0401		orr r4, r4, #1
3001EDFE  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
3001EE00  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
3001EE04  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
3001EE06  2002     		mov r0, #2 ; 2
3001EE08  2100     		mov r1, #0 ; 0
3001EE0A  F8DF 4084		ldr r4, [pc, #+132] ; 0x80A6F75
3001EE0E  F044 0401		orr r4, r4, #1
3001EE12  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
3001EE14  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
3001EE18  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3001EE1A  2003     		mov r0, #3 ; 3
3001EE1C  2100     		mov r1, #0 ; 0
3001EE1E  F8DF 4070		ldr r4, [pc, #+112] ; 0x80A6F75
3001EE22  F044 0401		orr r4, r4, #1
3001EE26  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
3001EE28  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3001EE2C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3001EE2E  2004     		mov r0, #4 ; 4
3001EE30  2100     		mov r1, #0 ; 0
3001EE32  F8DF 405C		ldr r4, [pc, #+92] ; 0x80A6F75
3001EE36  F044 0401		orr r4, r4, #1
3001EE3A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3001EE3C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
3001EE40  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
3001EE42  2005     		mov r0, #5 ; 5
3001EE44  2100     		mov r1, #0 ; 0
3001EE46  F8DF 4048		ldr r4, [pc, #+72] ; 0x80A6F75
3001EE4A  F044 0401		orr r4, r4, #1
3001EE4E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
3001EE50  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
3001EE54  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
3001EE56  2006     		mov r0, #6 ; 6
3001EE58  2100     		mov r1, #0 ; 0
3001EE5A  F8DF 4034		ldr r4, [pc, #+52] ; 0x80A6F75
3001EE5E  F044 0401		orr r4, r4, #1
3001EE62  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
3001EE64  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
3001EE68  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
3001EE6A  2007     		mov r0, #7 ; 7
3001EE6C  2100     		mov r1, #0 ; 0
3001EE6E  F8DF 4020		ldr r4, [pc, #+32] ; 0x80A6F75
3001EE72  F044 0401		orr r4, r4, #1
3001EE76  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
3001EE78  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
3001EE7C  7038     		strb r0, [r7]

3001EE7E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EE82  F8DD E000		ldr lr, [sp]
3001EE86  B002     		add sp, sp, #8

3001EE88  4770     		bx lr

3001EE8C  FFFFFFFF		; 0x080A6F69
3001EE90  FFFFFFFF		; 0x080A6F75
3001EE94  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EE98  4770     		bx lr


*** OUTPUT:
3001EE9A  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3001EE9C  B082     		sub sp, sp, #8
3001EE9E  F8CD E000		str lr, [sp]
3001EEA2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EEA6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EEAA  F8DD E000		ldr lr, [sp]
3001EEAE  B002     		add sp, sp, #8

3001EEB0  4770     		bx lr

**************************************************
	List program: $$MbSBoot_0
**************************************************

PROGRAM $$MbSBoot_0

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
	END_VAR

END_PROGRAM

3001EEC0  B082     		sub sp, sp, #8
3001EEC2  F8CD E000		str lr, [sp]
3001EEC6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:$$MbSBoot_0}
#1		(*$WAITSWITCH$*)
#2		
#3			(* openChannel_return := sysMbSRtu_OpenChn2( 1, 0, MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, FALSE, 0); *)
#4			LDP0		1	{LNXT:2|2|-1}
(-) UDINT
#5			sysMbSRtu_OpenChn2		0, MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, FALSE, 0	{LNXT:2|2|-1}
(*) USINT
3001EECA  B084     		sub sp, sp, #16
3001EECC  2001     		mov r0, #1 ; 1
3001EECE  2100     		mov r1, #0 ; 0
3001EED0  F44F 4216		mov r2, #38400 ; 38400
3001EED4  2300     		mov r3, #0 ; 0
3001EED6  2701     		mov r7, #1 ; 1
3001EED8  F8CD 7000		str r7, [sp]
3001EEDC  2702     		mov r7, #2 ; 2
3001EEDE  F8CD 7004		str r7, [sp, #+4]
3001EEE2  2700     		mov r7, #0 ; 0
3001EEE4  F8CD 7008		str r7, [sp, #+8]
3001EEE8  2700     		mov r7, #0 ; 0
3001EEEA  F8CD 700C		str r7, [sp, #+12]
3001EEEE  F8DF 401C		ldr r4, [pc, #+28] ; 0x80A9BED
3001EEF2  F044 0401		orr r4, r4, #1
3001EEF6  47A0     		blx r4
3001EEF8  B004     		add sp, sp, #16

#6			ST		openChannel_return	{LNXT:2|2|-1}
(*) USINT
3001EEFA  F8DF 7014		ldr r7, [pc, #+20] ; 0x2000033A
3001EEFE  7038     		strb r0, [r7]

3001EF00  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EF04  F8DD E000		ldr lr, [sp]
3001EF08  B002     		add sp, sp, #8

3001EF0A  4770     		bx lr

3001EF0C  FFFFFFFF		; 0x080A9BED
3001EF10  2000033A		; 0x2000033A

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EF14  4770     		bx lr


*** OUTPUT:
3001EF16  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

3001EF18  B082     		sub sp, sp, #8
3001EF1A  F8CD E000		str lr, [sp]
3001EF1E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EF22  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EF26  F8DD E000		ldr lr, [sp]
3001EF2A  B002     		add sp, sp, #8

3001EF2C  4770     		bx lr



**************************************************
	Global init code
**************************************************

3001EF40  B082     		sub sp, sp, #8
3001EF42  F8CD E000		str lr, [sp]
3001EF46  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EF4A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EF4E  F8DD E000		ldr lr, [sp]
3001EF52  B002     		add sp, sp, #8

3001EF54  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

3001EF56  B082     		sub sp, sp, #8
3001EF58  F8CD E000		str lr, [sp]
3001EF5C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EF60  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EF64  F8DD E000		ldr lr, [sp]
3001EF68  B002     		add sp, sp, #8

3001EF6A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3001EF6C  B082     		sub sp, sp, #8
3001EF6E  F8CD E000		str lr, [sp]
3001EF72  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EF76  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EF7A  F8DD E000		ldr lr, [sp]
3001EF7E  B002     		add sp, sp, #8

3001EF80  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		000000003001E400h
End code area:            		000000003001F13Ch
Code size:                		00000D3Ch

Start local data area:    		0000000020000298h
End local data area:      		000000002000033Bh
Local data size:          		000000A3h

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                21B00458
DEBUG MEMO ID:                          3001E6EE
FULL MEMO ID:                           000041B0
********************************************

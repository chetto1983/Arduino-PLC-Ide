***********************************************************************
*
*	CODE GENERATION LISTING FOR: Mqtt
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
300000F0  FB90 F3F1		sdiv r3, r0, r1
300000F4  4359     		mul r1, r1, r3
300000F6  EBC1 0000		rsb r0, r1, r0
300000FA  4770     		bx lr

$$MOD_U:
300000FC  FBB0 F3F1		udiv r3, r0, r1
30000100  4359     		mul r1, r1, r3
30000102  EBC1 0000		rsb r0, r1, r0
30000106  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

30000108  E92D 4040		stmdb sp!, { r6, lr }
3000010C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3000010E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
30000110  2800     		cmp r0, #0
30000112  D130     		bne #96 ; 0x30000176


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
30000116  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
30000118  2800     		cmp r0, #0
3000011A  D031     		beq #98 ; 0x30000180


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3000011E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000120  2800     		cmp r0, #0
30000122  BF18 2000		nemov r0, #0
30000126  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000012A  2800     		cmp r0, #0
3000012C  D004     		beq #8 ; 0x30000138


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000130  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D578
30000134  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
30000136  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
30000138  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D578
3000013C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3000013E  6837     		ldr r7, [r6]
30000140  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000142  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000144  68B7     		ldr r7, [r6, #8]
30000146  42B8     		cmp r0, r7
30000148  BF38 2000		lomov r0, #0
3000014C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
30000150  B082     		sub sp, sp, #8
30000152  F8CD 0000		str r0, [sp]
30000156  2800     		cmp r0, #0
30000158  BF08 2001		eqmov r0, #1
3000015C  BF18 2000		nemov r0, #0
30000160  7330     		strb r0, [r6, #12]
30000162  F8DD 0000		ldr r0, [sp]
30000166  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
30000168  2800     		cmp r0, #0
3000016A  D009     		beq #18 ; 0x30000180


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000016E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000170  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000172  E005     		b #10 ; 0x30000180


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000176  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000178  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3000017A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3000017C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3000017E  7330     		strb r0, [r6, #12]

30000180  E8BD 4040		ldmia sp!, { r6, lr }

30000184  4770     		bx lr

30000188  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3000018C  E92D 4040		stmdb sp!, { r6, lr }
30000190  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
30000192  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
30000194  2800     		cmp r0, #0
30000196  D025     		beq #74 ; 0x300001E4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3000019A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3000019C  2800     		cmp r0, #0
3000019E  D126     		bne #76 ; 0x300001EE


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
300001A2  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
300001A4  2800     		cmp r0, #0
300001A6  BF18 2000		nemov r0, #0
300001AA  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
300001AE  2800     		cmp r0, #0
300001B0  D004     		beq #8 ; 0x300001BC


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300001B4  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D578
300001B8  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300001BA  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300001BC  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D578
300001C0  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300001C2  6837     		ldr r7, [r6]
300001C4  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
300001C6  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
300001C8  68B7     		ldr r7, [r6, #8]
300001CA  42B8     		cmp r0, r7
300001CC  BF38 2000		lomov r0, #0
300001D0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
300001D4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
300001D6  2800     		cmp r0, #0
300001D8  D009     		beq #18 ; 0x300001EE


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
300001DC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
300001DE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
300001E0  E005     		b #10 ; 0x300001EE


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
300001E4  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
300001E6  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
300001E8  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
300001EA  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
300001EC  7330     		strb r0, [r6, #12]

300001EE  E8BD 4040		ldmia sp!, { r6, lr }

300001F2  4770     		bx lr

300001F4  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

300001F8  E92D 4040		stmdb sp!, { r6, lr }
300001FC  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
300001FE  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
30000202  5DF0     		ldrb r0, [r6, +r7]
30000204  2800     		cmp r0, #0
30000206  BF08 2001		eqmov r0, #1
3000020A  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3000020E  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
30000210  6AF0     		ldr r0, [r6, #44]
30000212  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
30000214  E92D 0021		stmdb sp!, { r0, r5 }
30000218  4635     		mov r5, r6
3000021A  467C     		mov r4, pc
3000021C  3C92     		sub r4, r4, #+0x92 ; 0x3000018C
3000021E  F044 0401		orr r4, r4, #1
30000222  47A0     		blx r4
30000224  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
30000228  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3000022A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3000022C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3000022E  6AF0     		ldr r0, [r6, #44]
30000230  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
30000232  E92D 0021		stmdb sp!, { r0, r5 }
30000236  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3000023A  19F5     		add r5, r6, r7
3000023C  F8DF 4028		ldr r4, [pc, #+40] ; 0x30000108
30000240  F044 0401		orr r4, r4, #1
30000244  47A0     		blx r4
30000246  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3000024A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3000024E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
30000250  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
30000254  55F0     		strb r0, [r6, +r7]

30000256  E8BD 4040		ldmia sp!, { r6, lr }

3000025A  4770     		bx lr

3000025C  00000014		; 0x00000014
30000260  00000020		; 0x00000020
30000264  00000030		; 0x00000030
30000268  30000108		; 0x30000108


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List program: MqttHandeler
**************************************************

PROGRAM MqttHandeler

        VAR
Clock_1Hz : Clock_Gen;
Fail_Counter : UDINT;
Send_Counter : UDINT;
	END_VAR

END_PROGRAM

30000270  B082     		sub sp, sp, #8
30000272  F8CD E000		str lr, [sp]
30000276  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:MqttHandeler}
#1		 
#2		 	(* P/N contacts management *)
#3			LD		LEDGREEN
(*) UNDEF
3000027A  F8DF 71E0		ldr r7, [pc, #+480] ; 0x2401E63D
3000027E  7838     		ldrb r0, [r7]

#4			ANDN	$$MEMPC$LEDGREEN
(*) BOOL
30000280  F8DF 71D0		ldr r7, [pc, #+464] ; 0x20000334
30000284  783F     		ldrb r7, [r7]
30000286  2F00     		cmp r7, #0
30000288  BF08 2701		eqmov r7, #1
3000028C  BF18 2700		nemov r7, #0
30000290  4038     		and r0, r0, r7

#5			ST		$$PC$LEDGREEN
(*) BOOL
30000292  F8DF 71C4		ldr r7, [pc, #+452] ; 0x20000335
30000296  7038     		strb r0, [r7]

#6			LD		LEDGREEN
(*) UNDEF
30000298  F8DF 71C0		ldr r7, [pc, #+448] ; 0x2401E63D
3000029C  7838     		ldrb r0, [r7]

#7			ST		$$MEMPC$LEDGREEN
(*) BOOL
3000029E  F8DF 71B4		ldr r7, [pc, #+436] ; 0x20000334
300002A2  7038     		strb r0, [r7]

#8			LD		SEND_KO
(*) UNDEF
300002A4  F8DF 71C4		ldr r7, [pc, #+452] ; 0x38000002
300002A8  7838     		ldrb r0, [r7]

#9			ANDN	$$MEMPC$SEND_KO
(*) BOOL
300002AA  F8DF 7198		ldr r7, [pc, #+408] ; 0x20000330
300002AE  783F     		ldrb r7, [r7]
300002B0  2F00     		cmp r7, #0
300002B2  BF08 2701		eqmov r7, #1
300002B6  BF18 2700		nemov r7, #0
300002BA  4038     		and r0, r0, r7

#10			ST		$$PC$SEND_KO
(*) BOOL
300002BC  F8DF 7188		ldr r7, [pc, #+392] ; 0x20000331
300002C0  7038     		strb r0, [r7]

#11			LD		SEND_KO
(*) UNDEF
300002C2  F8DF 71A8		ldr r7, [pc, #+424] ; 0x38000002
300002C6  7838     		ldrb r0, [r7]

#12			ST		$$MEMPC$SEND_KO
(*) BOOL
300002C8  F8DF 7178		ldr r7, [pc, #+376] ; 0x20000330
300002CC  7038     		strb r0, [r7]

#13			LD		SEND_OK
(*) UNDEF
300002CE  F8DF 7198		ldr r7, [pc, #+408] ; 0x38000001
300002D2  7838     		ldrb r0, [r7]

#14			ANDN	$$MEMPC$SEND_OK
(*) BOOL
300002D4  F8DF 7174		ldr r7, [pc, #+372] ; 0x20000332
300002D8  783F     		ldrb r7, [r7]
300002DA  2F00     		cmp r7, #0
300002DC  BF08 2701		eqmov r7, #1
300002E0  BF18 2700		nemov r7, #0
300002E4  4038     		and r0, r0, r7

#15			ST		$$PC$SEND_OK
(*) BOOL
300002E6  F8DF 7168		ldr r7, [pc, #+360] ; 0x20000333
300002EA  7038     		strb r0, [r7]

#16			LD		SEND_OK
(*) UNDEF
300002EC  F8DF 7178		ldr r7, [pc, #+376] ; 0x38000001
300002F0  7838     		ldrb r0, [r7]

#17			ST		$$MEMPC$SEND_OK
(*) BOOL
300002F2  F8DF 7158		ldr r7, [pc, #+344] ; 0x20000332
300002F6  7038     		strb r0, [r7]

#18		 
#19			(* Network 1 *)
#20			MOVE		500,CLOCK_1HZ.TEMPO {R:1$2}
(*) BOOL
300002F8  F44F 70FA		mov r0, #500 ; 500
300002FC  F8DF 7130		ldr r7, [pc, #+304] ; 0x2000031C
30000300  6038     		str r0, [r7]

#21			CAL		CLOCK_1HZ {R:1$2}
(*) UDINT
30000302  E92D 0021		stmdb sp!, { r0, r5 }
30000306  F8DF 5124		ldr r5, [pc, #+292] ; 0x200002F0
3000030A  F8DF 4154		ldr r4, [pc, #+340] ; 0x300001F8
3000030E  F044 0401		orr r4, r4, #1
30000312  47A0     		blx r4
30000314  E8BD 0021		ldmia sp!, { r0, r5 }

#22			MOVE		CLOCK_1HZ.OUT,LEDGREEN {R:1$2}
(*) UDINT
30000318  F8DF 7118		ldr r7, [pc, #+280] ; 0x20000320
3000031C  7838     		ldrb r0, [r7]
3000031E  F8DF 713C		ldr r7, [pc, #+316] ; 0x2401E63D
30000322  7038     		strb r0, [r7]

#23			LD		TRUE
(-) UNDEF
30000324  2001     		mov r0, #1 ; 1

#24		 
#25			(* Network 2 *)
#26			LD		$$PC$LEDGREEN
(*) UNDEF
30000326  F8DF 7130		ldr r7, [pc, #+304] ; 0x20000335
3000032A  7838     		ldrb r0, [r7]

#27			AND		MQTT_OK {R:2$12}
(*) BOOL
3000032C  F8DF 7134		ldr r7, [pc, #+308] ; 0x38000000
30000330  783F     		ldrb r7, [r7]
30000332  4038     		and r0, r0, r7

#28			ST		$$VAR$1
(*) BOOL
30000334  F8DF 70F0		ldr r7, [pc, #+240] ; 0x200002EF
30000338  7038     		strb r0, [r7]

#29			JMPCN	$$LAB$1
(-) BOOL
3000033A  2800     		cmp r0, #0
3000033C  D008     		beq #16 ; 0x30000350


#30			LD		PLC_TEMP {R:2$3}
(*) UNDEF
30000340  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002E4
30000344  ED97 0A00		flds s0, [r7]

#31			ST		TEMPERATURA {R:2$4}
(*) REAL
30000348  F8DF 7128		ldr r7, [pc, #+296] ; 0x38000204
3000034C  ED87 0A00		fsts s0, [r7]

#32		$$LAB$1:
#33			LD		$$VAR$1
(*) UNDEF
30000350  F8DF 70D4		ldr r7, [pc, #+212] ; 0x200002EF
30000354  7838     		ldrb r0, [r7]

#34			ST		$$VAR$2
(*) BOOL
30000356  F8DF 70E0		ldr r7, [pc, #+224] ; 0x20000324
3000035A  7038     		strb r0, [r7]

#35			JMPCN	$$LAB$2
(-) BOOL
3000035C  2800     		cmp r0, #0
3000035E  D008     		beq #16 ; 0x30000372


#36			LD		PLC_HUM {R:2$7}
(*) UNDEF
30000362  F8DF 70C0		ldr r7, [pc, #+192] ; 0x200002E8
30000366  ED97 0A00		flds s0, [r7]

#37			ST		UMIDITA {R:2$8}
(*) REAL
3000036A  F8DF 710C		ldr r7, [pc, #+268] ; 0x38000208
3000036E  ED87 0A00		fsts s0, [r7]

#38		$$LAB$2:
#39			LD		$$VAR$2
(*) UNDEF
30000372  F8DF 70C4		ldr r7, [pc, #+196] ; 0x20000324
30000376  7838     		ldrb r0, [r7]

#40			ST		SEND_DATA {R:2$9}
(*) BOOL
30000378  F8DF 70F4		ldr r7, [pc, #+244] ; 0x38000200
3000037C  7038     		strb r0, [r7]

#41		 
#42			(* Network 3 *)
#43			LD		$$PC$SEND_KO
(*) UNDEF
3000037E  F8DF 70C8		ldr r7, [pc, #+200] ; 0x20000331
30000382  7838     		ldrb r0, [r7]

#44			ST		$$VAR$1
(*) BOOL
30000384  F8DF 70A0		ldr r7, [pc, #+160] ; 0x200002EF
30000388  7038     		strb r0, [r7]

#45			JMPCN	$$LAB$3
(-) BOOL
3000038A  2800     		cmp r0, #0
3000038C  D008     		beq #16 ; 0x300003A0


#46			LD		1 {R:3$8}
(-) UNDEF
30000390  2001     		mov r0, #1 ; 1

#47			ADD		FAIL_COUNTER {R:3$6}
(*) USINT
30000392  F8DF 70A8		ldr r7, [pc, #+168] ; 0x20000328
30000396  683F     		ldr r7, [r7]
30000398  19C0     		add r0, r0, r7

#48			ST		FAIL_COUNTER {R:3$7}
(*) UDINT
3000039A  F8DF 70A0		ldr r7, [pc, #+160] ; 0x20000328
3000039E  6038     		str r0, [r7]

#49		$$LAB$3:
#50			LD		$$VAR$1
(*) UNDEF
300003A0  F8DF 7084		ldr r7, [pc, #+132] ; 0x200002EF
300003A4  7838     		ldrb r0, [r7]

#51		 
#52			(* Network 4 *)
#53			LD		$$PC$SEND_OK
(*) UNDEF
300003A6  F8DF 70A8		ldr r7, [pc, #+168] ; 0x20000333
300003AA  7838     		ldrb r0, [r7]

#54			ST		$$VAR$1
(*) BOOL
300003AC  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002EF
300003B0  7038     		strb r0, [r7]

#55			JMPCN	$$LAB$4
(-) BOOL
300003B2  2800     		cmp r0, #0
300003B4  D008     		beq #16 ; 0x300003C8


#56			LD		1 {R:4$8}
(-) UNDEF
300003B8  2001     		mov r0, #1 ; 1

#57			ADD		SEND_COUNTER {R:4$6}
(*) USINT
300003BA  F8DF 7084		ldr r7, [pc, #+132] ; 0x2000032C
300003BE  683F     		ldr r7, [r7]
300003C0  19C0     		add r0, r0, r7

#58			ST		SEND_COUNTER {R:4$7}
(*) UDINT
300003C2  F8DF 707C		ldr r7, [pc, #+124] ; 0x2000032C
300003C6  6038     		str r0, [r7]

#59		$$LAB$4:
#60			LD		$$VAR$1
(*) UNDEF
300003C8  F8DF 705C		ldr r7, [pc, #+92] ; 0x200002EF
300003CC  7838     		ldrb r0, [r7]

#61		 
#62			(* Network 5 *)
#63			LD		SEND_OK {R:5$0}
(*) UNDEF
300003CE  F8DF 7098		ldr r7, [pc, #+152] ; 0x38000001
300003D2  7838     		ldrb r0, [r7]

#64			OR		SEND_KO {R:5$2}
(*) BOOL
300003D4  F8DF 7094		ldr r7, [pc, #+148] ; 0x38000002
300003D8  783F     		ldrb r7, [r7]
300003DA  4338     		orr r0, r0, r7

#65			ORN		MQTT_OK {R:5$4}
(*) BOOL
300003DC  F8DF 7084		ldr r7, [pc, #+132] ; 0x38000000
300003E0  783F     		ldrb r7, [r7]
300003E2  2F00     		cmp r7, #0
300003E4  BF08 2701		eqmov r7, #1
300003E8  BF18 2700		nemov r7, #0
300003EC  4338     		orr r0, r0, r7

#66			AND		SENDMQTT {R:5$5}
(*) BOOL
300003EE  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002AF
300003F2  783F     		ldrb r7, [r7]
300003F4  4038     		and r0, r0, r7

#67			R		SENDMQTT {R:5$1}
(*) BOOL
300003F6  2800     		cmp r0, #0
300003F8  D009     		beq #0x000012
300003FA  B082     		sub sp, sp, #8
300003FC  F8CD 0000		str r0, [sp]
30000400  2000     		mov r0, #0
30000402  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002AF
30000406  7038     		strb r0, [r7]
30000408  F8DD 0000		ldr r0, [sp]
3000040C  B002     		add sp, sp, #8

3000040E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000412  F8DD E000		ldr lr, [sp]
30000416  B002     		add sp, sp, #8

30000418  4770     		bx lr

3000041C  200002AF		; 0x200002AF
30000420  200002E4		; 0x200002E4
30000424  200002E8		; 0x200002E8
30000428  200002EF		; 0x200002EF
3000042C  200002F0		; 0x200002F0
30000430  2000031C		; 0x2000031C
30000434  20000320		; 0x20000320
30000438  20000324		; 0x20000324
3000043C  20000328		; 0x20000328
30000440  2000032C		; 0x2000032C
30000444  20000330		; 0x20000330
30000448  20000331		; 0x20000331
3000044C  20000332		; 0x20000332
30000450  20000333		; 0x20000333
30000454  20000334		; 0x20000334
30000458  20000335		; 0x20000335
3000045C  FFFFFFFF		; 0x2401E63D
30000460  300001F8		; 0x300001F8
30000464  FFFFFFFF		; 0x38000000
30000468  FFFFFFFF		; 0x38000001
3000046C  FFFFFFFF		; 0x38000002
30000470  FFFFFFFF		; 0x38000200
30000474  FFFFFFFF		; 0x38000204
30000478  FFFFFFFF		; 0x38000208

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3000047C  4770     		bx lr


*** OUTPUT:
3000047E  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

30000480  B082     		sub sp, sp, #8
30000482  F8CD E000		str lr, [sp]
30000486  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::MQTTHANDELER.$$PC$LEDGREEN = 1
3000048A  F8DF 0028		ldr r0, [pc, #+40] ; 0x1
3000048E  F8DF 7030		ldr r7, [pc, #+48] ; 0x20000335
30000492  7038     		strb r0, [r7]

Var init: V::MQTTHANDELER.$$PC$SEND_KO = 1
30000494  F8DF 001C		ldr r0, [pc, #+28] ; 0x1
30000498  F8DF 701C		ldr r7, [pc, #+28] ; 0x20000331
3000049C  7038     		strb r0, [r7]

Var init: V::MQTTHANDELER.$$PC$SEND_OK = 1
3000049E  F8DF 0014		ldr r0, [pc, #+20] ; 0x1
300004A2  F8DF 7018		ldr r7, [pc, #+24] ; 0x20000333
300004A6  7038     		strb r0, [r7]

300004A8  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300004AC  F8DD E000		ldr lr, [sp]
300004B0  B002     		add sp, sp, #8

300004B2  4770     		bx lr

300004B4  00000001		; 0x00000001
300004B8  20000331		; 0x20000331
300004BC  20000333		; 0x20000333
300004C0  20000335		; 0x20000335

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

300004E0  B082     		sub sp, sp, #8
300004E2  F8CD E000		str lr, [sp]
300004E6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
300004EA  2000     		mov r0, #0 ; 0
300004EC  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
300004F0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
300004F2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
300004F4  B088     		sub sp, sp, #32
300004F6  2700     		mov r7, #0 ; 0
300004F8  4639     		mov r1, r7
300004FA  2700     		mov r7, #0 ; 0
300004FC  463A     		mov r2, r7
300004FE  2700     		mov r7, #0 ; 0
30000500  463B     		mov r3, r7
30000502  2700     		mov r7, #0 ; 0
30000504  F8CD 7000		str r7, [sp]
30000508  2700     		mov r7, #0 ; 0
3000050A  F8CD 7004		str r7, [sp, #+4]
3000050E  2700     		mov r7, #0 ; 0
30000510  F8CD 7008		str r7, [sp, #+8]
30000514  2700     		mov r7, #0 ; 0
30000516  F8CD 700C		str r7, [sp, #+12]
3000051A  2700     		mov r7, #0 ; 0
3000051C  F8CD 7010		str r7, [sp, #+16]
30000520  2700     		mov r7, #0 ; 0
30000522  F8CD 7014		str r7, [sp, #+20]
30000526  2700     		mov r7, #0 ; 0
30000528  F8CD 7018		str r7, [sp, #+24]
3000052C  F8DF 4010		ldr r4, [pc, #+16] ; 0x807904D
30000530  F044 0401		orr r4, r4, #1
30000534  47A0     		blx r4
30000536  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
30000538  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
3000053C  7038     		strb r0, [r7]

3000053E  E005     		b #10

30000540  FFFFFFFF		; 0x0807904D
30000544  200002A5		; 0x200002A5
30000548  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3000054C  2010     		mov r0, #16 ; 16
3000054E  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807FD69
30000552  F044 0401		orr r4, r4, #1
30000556  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
30000558  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3000055C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3000055E  2000     		mov r0, #0 ; 0
30000560  2100     		mov r1, #0 ; 0
30000562  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807FD75
30000566  F044 0401		orr r4, r4, #1
3000056A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3000056C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
30000570  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
30000572  2001     		mov r0, #1 ; 1
30000574  2100     		mov r1, #0 ; 0
30000576  F8DF 4098		ldr r4, [pc, #+152] ; 0x807FD75
3000057A  F044 0401		orr r4, r4, #1
3000057E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
30000580  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
30000584  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
30000586  2002     		mov r0, #2 ; 2
30000588  2100     		mov r1, #0 ; 0
3000058A  F8DF 4084		ldr r4, [pc, #+132] ; 0x807FD75
3000058E  F044 0401		orr r4, r4, #1
30000592  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
30000594  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
30000598  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3000059A  2003     		mov r0, #3 ; 3
3000059C  2100     		mov r1, #0 ; 0
3000059E  F8DF 4070		ldr r4, [pc, #+112] ; 0x807FD75
300005A2  F044 0401		orr r4, r4, #1
300005A6  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
300005A8  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
300005AC  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
300005AE  2004     		mov r0, #4 ; 4
300005B0  2100     		mov r1, #0 ; 0
300005B2  F8DF 405C		ldr r4, [pc, #+92] ; 0x807FD75
300005B6  F044 0401		orr r4, r4, #1
300005BA  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
300005BC  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
300005C0  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
300005C2  2005     		mov r0, #5 ; 5
300005C4  2100     		mov r1, #0 ; 0
300005C6  F8DF 4048		ldr r4, [pc, #+72] ; 0x807FD75
300005CA  F044 0401		orr r4, r4, #1
300005CE  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
300005D0  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
300005D4  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
300005D6  2006     		mov r0, #6 ; 6
300005D8  2100     		mov r1, #0 ; 0
300005DA  F8DF 4034		ldr r4, [pc, #+52] ; 0x807FD75
300005DE  F044 0401		orr r4, r4, #1
300005E2  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
300005E4  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
300005E8  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
300005EA  2007     		mov r0, #7 ; 7
300005EC  2100     		mov r1, #0 ; 0
300005EE  F8DF 4020		ldr r4, [pc, #+32] ; 0x807FD75
300005F2  F044 0401		orr r4, r4, #1
300005F6  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
300005F8  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
300005FC  7038     		strb r0, [r7]

300005FE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000602  F8DD E000		ldr lr, [sp]
30000606  B002     		add sp, sp, #8

30000608  4770     		bx lr

3000060C  FFFFFFFF		; 0x0807FD69
30000610  FFFFFFFF		; 0x0807FD75
30000614  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000618  4770     		bx lr


*** OUTPUT:
3000061A  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3000061C  B082     		sub sp, sp, #8
3000061E  F8CD E000		str lr, [sp]
30000622  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000626  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000062A  F8DD E000		ldr lr, [sp]
3000062E  B002     		add sp, sp, #8

30000630  4770     		bx lr

**************************************************
	List program: MbMBoot
**************************************************

PROGRAM MbMBoot

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
memory_return : BOOL;
	END_VAR

END_PROGRAM

30000640  B082     		sub sp, sp, #8
30000642  F8CD E000		str lr, [sp]
30000646  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMBoot}
#1		(*$WAITSWITCH$*)
#2		
#3			(* memory_return := sysMbMRtu_MemoryMapping( 0, 0, 0, 0, 0); *)
#4			LDP0		0	{LNXT:2|3|-1}
(-) UDINT
#5			sysMbMRtu_MemoryMapping		0, 0, 0, 0	{LNXT:2|3|-1}
(*) USINT
3000064A  B082     		sub sp, sp, #8
3000064C  2700     		mov r7, #0 ; 0
3000064E  4638     		mov r0, r7
30000650  2700     		mov r7, #0 ; 0
30000652  4639     		mov r1, r7
30000654  2700     		mov r7, #0 ; 0
30000656  463A     		mov r2, r7
30000658  2700     		mov r7, #0 ; 0
3000065A  463B     		mov r3, r7
3000065C  2700     		mov r7, #0 ; 0
3000065E  F8CD 7000		str r7, [sp]
30000662  F8DF 407C		ldr r4, [pc, #+124] ; 0x8081F45
30000666  F044 0401		orr r4, r4, #1
3000066A  47A0     		blx r4
3000066C  B002     		add sp, sp, #8

#6			ST		memory_return	{LNXT:2|3|-1}
(*) BOOL
3000066E  F8DF 7074		ldr r7, [pc, #+116] ; 0x200002AC
30000672  7038     		strb r0, [r7]

#7		
#8		
#9			(* IF memory_return *)
#10			LD		memory_return	{LNXT:3|-1|-1}
(*) UNDEF
30000674  F8DF 706C		ldr r7, [pc, #+108] ; 0x200002AC
30000678  7838     		ldrb r0, [r7]

#11			NOT	{LNXT:3|-1|-1}
(*) BOOL
3000067A  2800     		cmp r0, #0
3000067C  BF08 2001		eqmov r0, #1
30000680  BF18 2000		nemov r0, #0

#12			JMPCN	$label0	{LNXT:3|4|7}
(-) BOOL
30000684  2800     		cmp r0, #0
30000686  D002     		beq #4 ; 0x3000068E


#13		
#14			(* THEN *)
#15		
#16				(* RETURN *)
#17				RET
#18		
(-) BOOL
3000068A  E020     		b #64 ; 0x300006CE


#19		$label0:
#20			(* END_IF *)
#21		
#22			(* openChannel_return := sysMbMRtu_OpenChn2(0, MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0); *)
#23			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#24			sysMbMRtu_OpenChn2		MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0	{LNXT:7|8|-1}
(*) USINT
3000068E  B082     		sub sp, sp, #8
30000690  2000     		mov r0, #0 ; 0
30000692  F44F 4116		mov r1, #38400 ; 38400
30000696  2200     		mov r2, #0 ; 0
30000698  2301     		mov r3, #1 ; 1
3000069A  2702     		mov r7, #2 ; 2
3000069C  F8CD 7000		str r7, [sp]
300006A0  2700     		mov r7, #0 ; 0
300006A2  F8CD 7004		str r7, [sp, #+4]
300006A6  F8DF 4034		ldr r4, [pc, #+52] ; 0x808127D
300006AA  F044 0401		orr r4, r4, #1
300006AE  47A0     		blx r4
300006B0  B002     		add sp, sp, #8

#25			ST		openChannel_return	{LNXT:7|8|-1}
(*) USINT
300006B2  F8DF 7034		ldr r7, [pc, #+52] ; 0x200002AD
300006B6  7038     		strb r0, [r7]

#26		
#27		
#28			(* IF openChannel_return = 16#FF *)
#29			LD		openChannel_return	{LNXT:8|-1|-1}
(*) UNDEF
300006B8  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002AD
300006BC  7838     		ldrb r0, [r7]

#30			EQ		16#FF	{LNXT:8|-1|-1}
(*) USINT
300006BE  28FF     		cmp r0, #255
300006C0  BF18 2000		nemov r0, #0
300006C4  BF08 2001		eqmov r0, #1

#31			JMPCN	$label1	{LNXT:8|9|2}
(-) BOOL
300006C8  2800     		cmp r0, #0
300006CA  D000     		beq #0 ; 0x300006CE


#32		
#33			(* THEN *)
#34		
#35				(* RETURN *)
#36				RET
#37		
(-) BOOL
300006CE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300006D2  F8DD E000		ldr lr, [sp]
300006D6  B002     		add sp, sp, #8

300006D8  4770     		bx lr

300006DC  FFFFFFFF		; 0x0808127D
300006E0  FFFFFFFF		; 0x08081F45
300006E4  200002AC		; 0x200002AC
300006E8  200002AD		; 0x200002AD

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300006EC  4770     		bx lr


*** OUTPUT:
300006EE  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

300006F0  B082     		sub sp, sp, #8
300006F2  F8CD E000		str lr, [sp]
300006F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300006FA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300006FE  F8DD E000		ldr lr, [sp]
30000702  B002     		add sp, sp, #8

30000704  4770     		bx lr

**************************************************
	List program: MbMPrm
**************************************************

PROGRAM MbMPrm

        VAR
slaveparam_return : BOOL;
	END_VAR

END_PROGRAM

30000710  B082     		sub sp, sp, #8
30000712  F8CD E000		str lr, [sp]
30000716  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000071A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000071E  F8DD E000		ldr lr, [sp]
30000722  B002     		add sp, sp, #8

30000724  4770     		bx lr

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000726  4770     		bx lr


*** OUTPUT:
30000728  4770     		bx lr



**************************************************
	Task MbMPrm init code
**************************************************

3000072A  B082     		sub sp, sp, #8
3000072C  F8CD E000		str lr, [sp]
30000730  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000734  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000738  F8DD E000		ldr lr, [sp]
3000073C  B002     		add sp, sp, #8

3000073E  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000750  B082     		sub sp, sp, #8
30000752  F8CD E000		str lr, [sp]
30000756  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000075A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000075E  F8DD E000		ldr lr, [sp]
30000762  B002     		add sp, sp, #8

30000764  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

30000766  B082     		sub sp, sp, #8
30000768  F8CD E000		str lr, [sp]
3000076C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000770  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000774  F8DD E000		ldr lr, [sp]
30000778  B002     		add sp, sp, #8

3000077A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3000077C  B082     		sub sp, sp, #8
3000077E  F8CD E000		str lr, [sp]
30000782  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000786  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000078A  F8DD E000		ldr lr, [sp]
3000078E  B002     		add sp, sp, #8

30000790  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		0000000030000938h
Code size:                		00000938h

Start local data area:    		0000000020000298h
End local data area:      		0000000020000336h
Local data size:          		0000009Eh

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                68F5FA0D
DEBUG MEMO ID:                          300002EE
FULL MEMO ID:                           00001E90
********************************************

***********************************************************************
*
*	CODE GENERATION LISTING FOR: Mqtt
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
30000110  FB90 F3F1		sdiv r3, r0, r1
30000114  4359     		mul r1, r1, r3
30000116  EBC1 0000		rsb r0, r1, r0
3000011A  4770     		bx lr

$$MOD_U:
3000011C  FBB0 F3F1		udiv r3, r0, r1
30000120  4359     		mul r1, r1, r3
30000122  EBC1 0000		rsb r0, r1, r0
30000126  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

30000128  E92D 4040		stmdb sp!, { r6, lr }
3000012C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3000012E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
30000130  2800     		cmp r0, #0
30000132  D130     		bne #96 ; 0x30000196


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
30000136  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
30000138  2800     		cmp r0, #0
3000013A  D031     		beq #98 ; 0x300001A0


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3000013E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000140  2800     		cmp r0, #0
30000142  BF18 2000		nemov r0, #0
30000146  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000014A  2800     		cmp r0, #0
3000014C  D004     		beq #8 ; 0x30000158


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000150  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D578
30000154  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
30000156  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
30000158  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D578
3000015C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3000015E  6837     		ldr r7, [r6]
30000160  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000162  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000164  68B7     		ldr r7, [r6, #8]
30000166  42B8     		cmp r0, r7
30000168  BF38 2000		lomov r0, #0
3000016C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
30000170  B082     		sub sp, sp, #8
30000172  F8CD 0000		str r0, [sp]
30000176  2800     		cmp r0, #0
30000178  BF08 2001		eqmov r0, #1
3000017C  BF18 2000		nemov r0, #0
30000180  7330     		strb r0, [r6, #12]
30000182  F8DD 0000		ldr r0, [sp]
30000186  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
30000188  2800     		cmp r0, #0
3000018A  D009     		beq #18 ; 0x300001A0


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000018E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000190  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000192  E005     		b #10 ; 0x300001A0


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000196  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000198  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3000019A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3000019C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3000019E  7330     		strb r0, [r6, #12]

300001A0  E8BD 4040		ldmia sp!, { r6, lr }

300001A4  4770     		bx lr

300001A8  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

300001AC  E92D 4040		stmdb sp!, { r6, lr }
300001B0  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
300001B2  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
300001B4  2800     		cmp r0, #0
300001B6  D025     		beq #74 ; 0x30000204


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
300001BA  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
300001BC  2800     		cmp r0, #0
300001BE  D126     		bne #76 ; 0x3000020E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
300001C2  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
300001C4  2800     		cmp r0, #0
300001C6  BF18 2000		nemov r0, #0
300001CA  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
300001CE  2800     		cmp r0, #0
300001D0  D004     		beq #8 ; 0x300001DC


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300001D4  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D578
300001D8  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300001DA  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300001DC  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D578
300001E0  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300001E2  6837     		ldr r7, [r6]
300001E4  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
300001E6  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
300001E8  68B7     		ldr r7, [r6, #8]
300001EA  42B8     		cmp r0, r7
300001EC  BF38 2000		lomov r0, #0
300001F0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
300001F4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
300001F6  2800     		cmp r0, #0
300001F8  D009     		beq #18 ; 0x3000020E


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
300001FC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
300001FE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000200  E005     		b #10 ; 0x3000020E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000204  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000206  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
30000208  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3000020A  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3000020C  7330     		strb r0, [r6, #12]

3000020E  E8BD 4040		ldmia sp!, { r6, lr }

30000212  4770     		bx lr

30000214  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

30000218  E92D 4040		stmdb sp!, { r6, lr }
3000021C  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
3000021E  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
30000222  5DF0     		ldrb r0, [r6, +r7]
30000224  2800     		cmp r0, #0
30000226  BF08 2001		eqmov r0, #1
3000022A  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3000022E  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
30000230  6AF0     		ldr r0, [r6, #44]
30000232  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
30000234  E92D 0021		stmdb sp!, { r0, r5 }
30000238  4635     		mov r5, r6
3000023A  467C     		mov r4, pc
3000023C  3C92     		sub r4, r4, #+0x92 ; 0x300001AC
3000023E  F044 0401		orr r4, r4, #1
30000242  47A0     		blx r4
30000244  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
30000248  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3000024A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3000024C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3000024E  6AF0     		ldr r0, [r6, #44]
30000250  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
30000252  E92D 0021		stmdb sp!, { r0, r5 }
30000256  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3000025A  19F5     		add r5, r6, r7
3000025C  F8DF 4028		ldr r4, [pc, #+40] ; 0x30000128
30000260  F044 0401		orr r4, r4, #1
30000264  47A0     		blx r4
30000266  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3000026A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3000026E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
30000270  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
30000274  55F0     		strb r0, [r6, +r7]

30000276  E8BD 4040		ldmia sp!, { r6, lr }

3000027A  4770     		bx lr

3000027C  00000014		; 0x00000014
30000280  00000020		; 0x00000020
30000284  00000030		; 0x00000030
30000288  30000128		; 0x30000128


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List program: MqttHandeler
**************************************************

PROGRAM MqttHandeler

        VAR
Clock_1Hz : Clock_Gen;
Azioni : WORD;
Transizioni : WORD;
DummyBit : BOOL;
SendClock : TON;
DataReady : BOOL;
	END_VAR

END_PROGRAM

30000290  B082     		sub sp, sp, #8
30000292  F8CD E000		str lr, [sp]
30000296  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:MqttHandeler}
#1		 
#2		  
#3			(* Network 1 *)
#4			MOVE		500,CLOCK_1HZ.TEMPO {R:1$2}
(*) UDINT
3000029A  F44F 70FA		mov r0, #500 ; 500
3000029E  F8DF 7360		ldr r7, [pc, #+864] ; 0x20000360
300002A2  6038     		str r0, [r7]

#5			CAL		CLOCK_1HZ {R:1$2}
(*) UDINT
300002A4  E92D 0021		stmdb sp!, { r0, r5 }
300002A8  F8DF 5350		ldr r5, [pc, #+848] ; 0x20000334
300002AC  467C     		mov r4, pc
300002AE  3C98     		sub r4, r4, #+0x98 ; 0x30000218
300002B0  F044 0401		orr r4, r4, #1
300002B4  47A0     		blx r4
300002B6  E8BD 0021		ldmia sp!, { r0, r5 }

#6			MOVE		CLOCK_1HZ.OUT,LEDGREEN {R:1$2}
(*) UDINT
300002BA  F8DF 7348		ldr r7, [pc, #+840] ; 0x20000364
300002BE  7838     		ldrb r0, [r7]
300002C0  F8DF 737C		ldr r7, [pc, #+892] ; 0x2401E63D
300002C4  7038     		strb r0, [r7]

#7			LD		TRUE
(-) UNDEF
300002C6  2001     		mov r0, #1 ; 1

#8		 
#9			(* Network 2 *)
#10			LD		AZIONI {R:2$3}
(*) UNDEF
300002C8  F8DF 733C		ldr r7, [pc, #+828] ; 0x20000368
300002CC  8838     		ldrh r0, [r7]

#11			EQ		0 {R:2$6}
(*) WORD
300002CE  2800     		cmp r0, #0
300002D0  BF18 2000		nemov r0, #0
300002D4  BF08 2001		eqmov r0, #1

#12			ST		DUMMYBIT {R:2$5}
(*) BOOL
300002D8  F8DF 731C		ldr r7, [pc, #+796] ; 0x20000316
300002DC  7038     		strb r0, [r7]

#13			LD		TRUE
(-) UNDEF
300002DE  2001     		mov r0, #1 ; 1

#14			AND		DUMMYBIT {R:2$7}
(*) BOOL
300002E0  F8DF 7314		ldr r7, [pc, #+788] ; 0x20000316
300002E4  783F     		ldrb r7, [r7]
300002E6  4038     		and r0, r0, r7

#15			S		AZIONI.0 {R:2$12}
(*) BOOL
300002E8  2800     		cmp r0, #0
300002EA  D013     		beq #0x000026
300002EC  B082     		sub sp, sp, #8
300002EE  F8CD 0000		str r0, [sp]
300002F2  2001     		mov r0, #1
300002F4  F8DF 7310		ldr r7, [pc, #+784] ; 0x20000368
300002F8  B082     		sub sp, sp, #8
300002FA  F8CD 7000		str r7, [sp]
300002FE  883F     		ldrh r7, [r7]
30000300  F360 0700		bfi r7, r0, #0, #1
30000304  4638     		mov r0, r7
30000306  F8DD 7000		ldr r7, [sp]
3000030A  B002     		add sp, sp, #8
3000030C  8038     		strh r0, [r7]
3000030E  F8DD 0000		ldr r0, [sp]
30000312  B002     		add sp, sp, #8

#16		 
#17			(* Network 3 *)
#18			LD		AZIONI {R:3$3}
(*) UNDEF
30000314  F8DF 72F0		ldr r7, [pc, #+752] ; 0x20000368
30000318  8838     		ldrh r0, [r7]

#19			ST		TRANSIZIONI {R:3$4}
(*) WORD
3000031A  F8DF 72F0		ldr r7, [pc, #+752] ; 0x2000036A
3000031E  8038     		strh r0, [r7]

#20			LD		TRUE
(-) UNDEF
30000320  2001     		mov r0, #1 ; 1

#21		 
#22			(* Network 4 *)
#23			LDN		MQTT_OK {R:4$2}
(*) UNDEF
30000322  F8DF 7334		ldr r7, [pc, #+820] ; 0x38000000
30000326  7838     		ldrb r0, [r7]
30000328  2800     		cmp r0, #0
3000032A  BF08 2001		eqmov r0, #1
3000032E  BF18 2000		nemov r0, #0

#24			ST		$$VAR$1
(*) BOOL
30000332  F8DF 72DC		ldr r7, [pc, #+732] ; 0x2000036C
30000336  7038     		strb r0, [r7]

#25			JMPCN	$$LAB$1
(-) BOOL
30000338  2800     		cmp r0, #0
3000033A  D004     		beq #8 ; 0x30000346


#26			LD		0 {R:4$7}
(-) UNDEF
3000033E  2000     		mov r0, #0 ; 0

#27			ST		AZIONI {R:4$6}
(*) USINT
30000340  F8DF 72C4		ldr r7, [pc, #+708] ; 0x20000368
30000344  8038     		strh r0, [r7]

#28		$$LAB$1:
#29			LD		$$VAR$1
(*) UNDEF
30000346  F8DF 72C8		ldr r7, [pc, #+712] ; 0x2000036C
3000034A  7838     		ldrb r0, [r7]

#30		 
#31			(* Network 5 *)
#32			LD		TRANSIZIONI.0 {R:5$0}
(*) UNDEF
3000034C  F8DF 72BC		ldr r7, [pc, #+700] ; 0x2000036A
30000350  8838     		ldrh r0, [r7]
30000352  F3C0 0000		ubfx r0, r0, #0, #1

#33			AND		SENDCLOCK.Q {R:5$2}
(*) BOOL
30000356  F8DF 72D4		ldr r7, [pc, #+724] ; 0x2000037C
3000035A  783F     		ldrb r7, [r7]
3000035C  4038     		and r0, r0, r7

#34			R		AZIONI.0 {R:5$1}
(*) BOOL
3000035E  2800     		cmp r0, #0
30000360  D013     		beq #0x000026
30000362  B082     		sub sp, sp, #8
30000364  F8CD 0000		str r0, [sp]
30000368  2000     		mov r0, #0
3000036A  F8DF 729C		ldr r7, [pc, #+668] ; 0x20000368
3000036E  B082     		sub sp, sp, #8
30000370  F8CD 7000		str r7, [sp]
30000374  883F     		ldrh r7, [r7]
30000376  F360 0700		bfi r7, r0, #0, #1
3000037A  4638     		mov r0, r7
3000037C  F8DD 7000		ldr r7, [sp]
30000380  B002     		add sp, sp, #8
30000382  8038     		strh r0, [r7]
30000384  F8DD 0000		ldr r0, [sp]
30000388  B002     		add sp, sp, #8

#35			S		AZIONI.1 {R:5$4}
(*) BOOL
3000038A  2800     		cmp r0, #0
3000038C  D013     		beq #0x000026
3000038E  B082     		sub sp, sp, #8
30000390  F8CD 0000		str r0, [sp]
30000394  2001     		mov r0, #1
30000396  F8DF 7270		ldr r7, [pc, #+624] ; 0x20000368
3000039A  B082     		sub sp, sp, #8
3000039C  F8CD 7000		str r7, [sp]
300003A0  883F     		ldrh r7, [r7]
300003A2  F360 0741		bfi r7, r0, #1, #1
300003A6  4638     		mov r0, r7
300003A8  F8DD 7000		ldr r7, [sp]
300003AC  B002     		add sp, sp, #8
300003AE  8038     		strh r0, [r7]
300003B0  F8DD 0000		ldr r0, [sp]
300003B4  B002     		add sp, sp, #8

#36		 
#37			(* Network 6 *)
#38			LD		TRANSIZIONI.1 {R:6$0}
(*) UNDEF
300003B6  F8DF 7254		ldr r7, [pc, #+596] ; 0x2000036A
300003BA  8838     		ldrh r0, [r7]
300003BC  F3C0 0040		ubfx r0, r0, #1, #1

#39			AND		DATAREADY {R:6$2}
(*) BOOL
300003C0  F8DF 7250		ldr r7, [pc, #+592] ; 0x2000036D
300003C4  783F     		ldrb r7, [r7]
300003C6  4038     		and r0, r0, r7

#40			R		AZIONI.1 {R:6$1}
(*) BOOL
300003C8  2800     		cmp r0, #0
300003CA  D013     		beq #0x000026
300003CC  B082     		sub sp, sp, #8
300003CE  F8CD 0000		str r0, [sp]
300003D2  2000     		mov r0, #0
300003D4  F8DF 7230		ldr r7, [pc, #+560] ; 0x20000368
300003D8  B082     		sub sp, sp, #8
300003DA  F8CD 7000		str r7, [sp]
300003DE  883F     		ldrh r7, [r7]
300003E0  F360 0741		bfi r7, r0, #1, #1
300003E4  4638     		mov r0, r7
300003E6  F8DD 7000		ldr r7, [sp]
300003EA  B002     		add sp, sp, #8
300003EC  8038     		strh r0, [r7]
300003EE  F8DD 0000		ldr r0, [sp]
300003F2  B002     		add sp, sp, #8

#41			S		AZIONI.2 {R:6$4}
(*) BOOL
300003F4  2800     		cmp r0, #0
300003F6  D013     		beq #0x000026
300003F8  B082     		sub sp, sp, #8
300003FA  F8CD 0000		str r0, [sp]
300003FE  2001     		mov r0, #1
30000400  F8DF 7204		ldr r7, [pc, #+516] ; 0x20000368
30000404  B082     		sub sp, sp, #8
30000406  F8CD 7000		str r7, [sp]
3000040A  883F     		ldrh r7, [r7]
3000040C  F360 0782		bfi r7, r0, #2, #1
30000410  4638     		mov r0, r7
30000412  F8DD 7000		ldr r7, [sp]
30000416  B002     		add sp, sp, #8
30000418  8038     		strh r0, [r7]
3000041A  F8DD 0000		ldr r0, [sp]
3000041E  B002     		add sp, sp, #8

#42		 
#43			(* Network 7 *)
#44			LD		TRANSIZIONI.2 {R:7$0}
(*) UNDEF
30000420  F8DF 71E8		ldr r7, [pc, #+488] ; 0x2000036A
30000424  8838     		ldrh r0, [r7]
30000426  F3C0 0080		ubfx r0, r0, #2, #1

#45			AND		SEND_OK {R:7$2}
(*) BOOL
3000042A  F8DF 7230		ldr r7, [pc, #+560] ; 0x38000001
3000042E  783F     		ldrb r7, [r7]
30000430  4038     		and r0, r0, r7

#46			R		AZIONI.2 {R:7$1}
(*) BOOL
30000432  2800     		cmp r0, #0
30000434  D013     		beq #0x000026
30000436  B082     		sub sp, sp, #8
30000438  F8CD 0000		str r0, [sp]
3000043C  2000     		mov r0, #0
3000043E  F8DF 71C8		ldr r7, [pc, #+456] ; 0x20000368
30000442  B082     		sub sp, sp, #8
30000444  F8CD 7000		str r7, [sp]
30000448  883F     		ldrh r7, [r7]
3000044A  F360 0782		bfi r7, r0, #2, #1
3000044E  4638     		mov r0, r7
30000450  F8DD 7000		ldr r7, [sp]
30000454  B002     		add sp, sp, #8
30000456  8038     		strh r0, [r7]
30000458  F8DD 0000		ldr r0, [sp]
3000045C  B002     		add sp, sp, #8

#47			S		AZIONI.0 {R:7$4}
(*) BOOL
3000045E  2800     		cmp r0, #0
30000460  D013     		beq #0x000026
30000462  B082     		sub sp, sp, #8
30000464  F8CD 0000		str r0, [sp]
30000468  2001     		mov r0, #1
3000046A  F8DF 719C		ldr r7, [pc, #+412] ; 0x20000368
3000046E  B082     		sub sp, sp, #8
30000470  F8CD 7000		str r7, [sp]
30000474  883F     		ldrh r7, [r7]
30000476  F360 0700		bfi r7, r0, #0, #1
3000047A  4638     		mov r0, r7
3000047C  F8DD 7000		ldr r7, [sp]
30000480  B002     		add sp, sp, #8
30000482  8038     		strh r0, [r7]
30000484  F8DD 0000		ldr r0, [sp]
30000488  B002     		add sp, sp, #8

#48		 
#49			(* Network 8 *)
#50			LD		AZIONI.0 {R:8$0}
(*) UNDEF
3000048A  F8DF 717C		ldr r7, [pc, #+380] ; 0x20000368
3000048E  8838     		ldrh r0, [r7]
30000490  F3C0 0000		ubfx r0, r0, #0, #1

#51			AND		MQTT_OK {R:8$4}
(*) BOOL
30000494  F8DF 71C0		ldr r7, [pc, #+448] ; 0x38000000
30000498  783F     		ldrb r7, [r7]
3000049A  4038     		and r0, r0, r7

#52			ST		SENDCLOCK.IN {R:8$2}
(*) BOOL
3000049C  F8DF 7184		ldr r7, [pc, #+388] ; 0x20000374
300004A0  7038     		strb r0, [r7]

#53			MOVE		10000,SENDCLOCK.PT {R:8$2}
(*) BOOL
300004A2  F8DF 7150		ldr r7, [pc, #+336] ; 0x2710
300004A6  4638     		mov r0, r7
300004A8  F8DF 717C		ldr r7, [pc, #+380] ; 0x20000378
300004AC  6038     		str r0, [r7]

#54			CAL		SENDCLOCK {R:8$2}
(*) UDINT
300004AE  E92D 0021		stmdb sp!, { r0, r5 }
300004B2  F8DF 516C		ldr r5, [pc, #+364] ; 0x20000370
300004B6  F8DF 419C		ldr r4, [pc, #+412] ; 0x300001AC
300004BA  F044 0401		orr r4, r4, #1
300004BE  47A0     		blx r4
300004C0  E8BD 0021		ldmia sp!, { r0, r5 }

#55			LD		SENDCLOCK.Q {R:8$2}
(*) UNDEF
300004C4  F8DF 7164		ldr r7, [pc, #+356] ; 0x2000037C
300004C8  7838     		ldrb r0, [r7]

#56		 
#57			(* Network 9 *)
#58			LD		AZIONI.1 {R:9$26}
(*) UNDEF
300004CA  F8DF 713C		ldr r7, [pc, #+316] ; 0x20000368
300004CE  8838     		ldrh r0, [r7]
300004D0  F3C0 0040		ubfx r0, r0, #1, #1

#59			JMPCN	$$LAB$2
(-) BOOL
300004D4  2800     		cmp r0, #0
300004D6  D01C     		beq #56 ; 0x30000512


#60			(* $EXPR9$14 := TO_REAL(SENS_TEMPERATURE) / 1000.0; *)
#61			LDP0		SENS_TEMPERATURE	{R:9$14}
(-) BOOL
#62			TO_REAL	{R:9$14}
(*) INT
300004DA  F8DF 7168		ldr r7, [pc, #+360] ; 0x2401F060
300004DE  F9B7 0000		ldrsh r0, [r7]
300004E2  EE00 0A10		fmsr s0, r0
300004E6  EEB8 0AC0		fsitos s0, s0

#63			DIV		1000.0	{R:9$14}
(*) REAL
300004EA  F8DF 7188		ldr r7, [pc, #+392] ; 0x447A0000 = 1000.000000
300004EE  EE03 7A90		fmsr s7, r7
300004F2  EE80 0A23		fdivs s0, s0, s7
300004F6  EE10 0A10		fmrs r0, s0

#64			ST		$EXPR9$14	{R:9$14}
(*) REAL
300004FA  F8DF 7134		ldr r7, [pc, #+308] ; 0x20000384
300004FE  ED87 0A00		fsts s0, [r7]

#65			LD		$EXPR9$14 {R:9$14}
(*) UNDEF
30000502  F8DF 712C		ldr r7, [pc, #+300] ; 0x20000384
30000506  ED97 0A00		flds s0, [r7]

#66			ST		TEMPERATURA {R:9$4}
(*) REAL
3000050A  F8DF 7158		ldr r7, [pc, #+344] ; 0x38000204
3000050E  ED87 0A00		fsts s0, [r7]

#67		$$LAB$2:
#68			LD		AZIONI.1
(*) UNDEF
30000512  F8DF 70F4		ldr r7, [pc, #+244] ; 0x20000368
30000516  8838     		ldrh r0, [r7]
30000518  F3C0 0040		ubfx r0, r0, #1, #1

#69			ST		$$VAR$1
(*) BOOL
3000051C  F8DF 70F0		ldr r7, [pc, #+240] ; 0x2000036C
30000520  7038     		strb r0, [r7]

#70			JMPCN	$$LAB$3
(-) BOOL
30000522  2800     		cmp r0, #0
30000524  D01C     		beq #56 ; 0x30000560


#71			(* $EXPR9$15 := TO_REAL(SENS_HUMIDITY) /1000.0; *)
#72			LDP0		SENS_HUMIDITY	{R:9$15}
(-) BOOL
#73			TO_REAL	{R:9$15}
(*) INT
30000528  F8DF 7120		ldr r7, [pc, #+288] ; 0x2401F064
3000052C  F9B7 0000		ldrsh r0, [r7]
30000530  EE00 0A10		fmsr s0, r0
30000534  EEB8 0AC0		fsitos s0, s0

#74			DIV		1000.0	{R:9$15}
(*) REAL
30000538  F8DF 7138		ldr r7, [pc, #+312] ; 0x447A0000 = 1000.000000
3000053C  EE03 7A90		fmsr s7, r7
30000540  EE80 0A23		fdivs s0, s0, s7
30000544  EE10 0A10		fmrs r0, s0

#75			ST		$EXPR9$15	{R:9$15}
(*) REAL
30000548  F8DF 70E8		ldr r7, [pc, #+232] ; 0x20000388
3000054C  ED87 0A00		fsts s0, [r7]

#76			LD		$EXPR9$15 {R:9$15}
(*) UNDEF
30000550  F8DF 70E0		ldr r7, [pc, #+224] ; 0x20000388
30000554  ED97 0A00		flds s0, [r7]

#77			ST		UMIDITA {R:9$8}
(*) REAL
30000558  F8DF 710C		ldr r7, [pc, #+268] ; 0x38000208
3000055C  ED87 0A00		fsts s0, [r7]

#78		$$LAB$3:
#79			LD		$$VAR$1
(*) UNDEF
30000560  F8DF 70AC		ldr r7, [pc, #+172] ; 0x2000036C
30000564  7838     		ldrb r0, [r7]

#80			ST		$$VAR$2
(*) BOOL
30000566  F8DF 70B4		ldr r7, [pc, #+180] ; 0x2000036F
3000056A  7038     		strb r0, [r7]

#81			JMPCN	$$LAB$4
(-) BOOL
3000056C  2800     		cmp r0, #0
3000056E  D012     		beq #36 ; 0x30000596


#82			(* $EXPR9$30 := TO_BOOL(SENS_TEMPOK); *)
#83			LDP0		SENS_TEMPOK	{R:9$30}
(-) BOOL
#84			TO_BOOL	{R:9$30}
(*) INT
30000572  F8DF 70D4		ldr r7, [pc, #+212] ; 0x2401F062
30000576  F9B7 0000		ldrsh r0, [r7]
3000057A  2800     		cmp r0, #0
3000057C  BF18 2001		nemov r0, #1
30000580  BF08 2000		eqmov r0, #0

#85			ST		$EXPR9$30	{R:9$30}
(*) BOOL
30000584  F8DF 7090		ldr r7, [pc, #+144] ; 0x2000036E
30000588  7038     		strb r0, [r7]

#86			LD		$EXPR9$30 {R:9$30}
(*) UNDEF
3000058A  F8DF 708C		ldr r7, [pc, #+140] ; 0x2000036E
3000058E  7838     		ldrb r0, [r7]

#87			ST		SENSTEMP_OK {R:9$31}
(*) BOOL
30000590  F8DF 70D8		ldr r7, [pc, #+216] ; 0x3800020C
30000594  7038     		strb r0, [r7]

#88		$$LAB$4:
#89			LD		$$VAR$2
(*) UNDEF
30000596  F8DF 7084		ldr r7, [pc, #+132] ; 0x2000036F
3000059A  7838     		ldrb r0, [r7]

#90			ST		$$VAR$3
(*) BOOL
3000059C  F8DF 7098		ldr r7, [pc, #+152] ; 0x2000038C
300005A0  7038     		strb r0, [r7]

#91			JMPCN	$$LAB$5
(-) BOOL
300005A2  2800     		cmp r0, #0
300005A4  D012     		beq #36 ; 0x300005CC


#92			(* $EXPR9$33 := TO_BOOL(SENS_HUMOK); *)
#93			LDP0		SENS_HUMOK	{R:9$33}
(-) BOOL
#94			TO_BOOL	{R:9$33}
(*) INT
300005A8  F8DF 70A4		ldr r7, [pc, #+164] ; 0x2401F066
300005AC  F9B7 0000		ldrsh r0, [r7]
300005B0  2800     		cmp r0, #0
300005B2  BF18 2001		nemov r0, #1
300005B6  BF08 2000		eqmov r0, #0

#95			ST		$EXPR9$33	{R:9$33}
(*) BOOL
300005BA  F8DF 7080		ldr r7, [pc, #+128] ; 0x2000038D
300005BE  7038     		strb r0, [r7]

#96			LD		$EXPR9$33 {R:9$33}
(*) UNDEF
300005C0  F8DF 7078		ldr r7, [pc, #+120] ; 0x2000038D
300005C4  7838     		ldrb r0, [r7]

#97			ST		SENSHUM_OK {R:9$34}
(*) BOOL
300005C6  F8DF 70A8		ldr r7, [pc, #+168] ; 0x3800020D
300005CA  7038     		strb r0, [r7]

#98		$$LAB$5:
#99			LD		$$VAR$3
(*) UNDEF
300005CC  F8DF 7068		ldr r7, [pc, #+104] ; 0x2000038C
300005D0  7838     		ldrb r0, [r7]

#100			ST		DATAREADY {R:9$41}
(*) BOOL
300005D2  F8DF 7040		ldr r7, [pc, #+64] ; 0x2000036D
300005D6  7038     		strb r0, [r7]

#101		 
#102			(* Network 10 *)
#103			LD		AZIONI.2 {R:10$0}
(*) UNDEF
300005D8  F8DF 702C		ldr r7, [pc, #+44] ; 0x20000368
300005DC  8838     		ldrh r0, [r7]
300005DE  F3C0 0080		ubfx r0, r0, #2, #1

#104			ST		SEND_DATA {R:10$7}
(*) BOOL
300005E2  F8DF 707C		ldr r7, [pc, #+124] ; 0x38000200
300005E6  7038     		strb r0, [r7]

300005E8  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300005EC  F8DD E000		ldr lr, [sp]
300005F0  B002     		add sp, sp, #8

300005F2  4770     		bx lr

300005F4  00002710		; 0x00002710
300005F8  20000316		; 0x20000316
300005FC  20000334		; 0x20000334
30000600  20000360		; 0x20000360
30000604  20000364		; 0x20000364
30000608  20000368		; 0x20000368
3000060C  2000036A		; 0x2000036A
30000610  2000036C		; 0x2000036C
30000614  2000036D		; 0x2000036D
30000618  2000036E		; 0x2000036E
3000061C  2000036F		; 0x2000036F
30000620  20000370		; 0x20000370
30000624  20000374		; 0x20000374
30000628  20000378		; 0x20000378
3000062C  2000037C		; 0x2000037C
30000630  20000384		; 0x20000384
30000634  20000388		; 0x20000388
30000638  2000038C		; 0x2000038C
3000063C  2000038D		; 0x2000038D
30000640  FFFFFFFF		; 0x2401E63D
30000644  FFFFFFFF		; 0x2401F060
30000648  FFFFFFFF		; 0x2401F062
3000064C  FFFFFFFF		; 0x2401F064
30000650  FFFFFFFF		; 0x2401F066
30000654  300001AC		; 0x300001AC
30000658  FFFFFFFF		; 0x38000000
3000065C  FFFFFFFF		; 0x38000001
30000660  FFFFFFFF		; 0x38000200
30000664  FFFFFFFF		; 0x38000204
30000668  FFFFFFFF		; 0x38000208
3000066C  FFFFFFFF		; 0x3800020C
30000670  FFFFFFFF		; 0x3800020D
30000674  447A0000		; 0x447A0000

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000678  4770     		bx lr


*** OUTPUT:
3000067A  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

3000067C  B082     		sub sp, sp, #8
3000067E  F8CD E000		str lr, [sp]
30000682  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000686  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000068A  F8DD E000		ldr lr, [sp]
3000068E  B002     		add sp, sp, #8

30000690  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

300006A0  B082     		sub sp, sp, #8
300006A2  F8CD E000		str lr, [sp]
300006A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
300006AA  2000     		mov r0, #0 ; 0
300006AC  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
300006B0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
300006B2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
300006B4  B088     		sub sp, sp, #32
300006B6  2700     		mov r7, #0 ; 0
300006B8  4639     		mov r1, r7
300006BA  2700     		mov r7, #0 ; 0
300006BC  463A     		mov r2, r7
300006BE  2700     		mov r7, #0 ; 0
300006C0  463B     		mov r3, r7
300006C2  2700     		mov r7, #0 ; 0
300006C4  F8CD 7000		str r7, [sp]
300006C8  2700     		mov r7, #0 ; 0
300006CA  F8CD 7004		str r7, [sp, #+4]
300006CE  2700     		mov r7, #0 ; 0
300006D0  F8CD 7008		str r7, [sp, #+8]
300006D4  2700     		mov r7, #0 ; 0
300006D6  F8CD 700C		str r7, [sp, #+12]
300006DA  2700     		mov r7, #0 ; 0
300006DC  F8CD 7010		str r7, [sp, #+16]
300006E0  2700     		mov r7, #0 ; 0
300006E2  F8CD 7014		str r7, [sp, #+20]
300006E6  2700     		mov r7, #0 ; 0
300006E8  F8CD 7018		str r7, [sp, #+24]
300006EC  F8DF 4010		ldr r4, [pc, #+16] ; 0x8079085
300006F0  F044 0401		orr r4, r4, #1
300006F4  47A0     		blx r4
300006F6  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
300006F8  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
300006FC  7038     		strb r0, [r7]

300006FE  E005     		b #10

30000700  FFFFFFFF		; 0x08079085
30000704  200002A5		; 0x200002A5
30000708  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3000070C  2010     		mov r0, #16 ; 16
3000070E  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807FDA1
30000712  F044 0401		orr r4, r4, #1
30000716  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
30000718  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3000071C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3000071E  2000     		mov r0, #0 ; 0
30000720  2100     		mov r1, #0 ; 0
30000722  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807FDAD
30000726  F044 0401		orr r4, r4, #1
3000072A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3000072C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
30000730  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
30000732  2001     		mov r0, #1 ; 1
30000734  2100     		mov r1, #0 ; 0
30000736  F8DF 4098		ldr r4, [pc, #+152] ; 0x807FDAD
3000073A  F044 0401		orr r4, r4, #1
3000073E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
30000740  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
30000744  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
30000746  2002     		mov r0, #2 ; 2
30000748  2100     		mov r1, #0 ; 0
3000074A  F8DF 4084		ldr r4, [pc, #+132] ; 0x807FDAD
3000074E  F044 0401		orr r4, r4, #1
30000752  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
30000754  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
30000758  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3000075A  2003     		mov r0, #3 ; 3
3000075C  2100     		mov r1, #0 ; 0
3000075E  F8DF 4070		ldr r4, [pc, #+112] ; 0x807FDAD
30000762  F044 0401		orr r4, r4, #1
30000766  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
30000768  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3000076C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3000076E  2004     		mov r0, #4 ; 4
30000770  2100     		mov r1, #0 ; 0
30000772  F8DF 405C		ldr r4, [pc, #+92] ; 0x807FDAD
30000776  F044 0401		orr r4, r4, #1
3000077A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3000077C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
30000780  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
30000782  2005     		mov r0, #5 ; 5
30000784  2100     		mov r1, #0 ; 0
30000786  F8DF 4048		ldr r4, [pc, #+72] ; 0x807FDAD
3000078A  F044 0401		orr r4, r4, #1
3000078E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
30000790  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
30000794  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
30000796  2006     		mov r0, #6 ; 6
30000798  2100     		mov r1, #0 ; 0
3000079A  F8DF 4034		ldr r4, [pc, #+52] ; 0x807FDAD
3000079E  F044 0401		orr r4, r4, #1
300007A2  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
300007A4  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
300007A8  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
300007AA  2007     		mov r0, #7 ; 7
300007AC  2100     		mov r1, #0 ; 0
300007AE  F8DF 4020		ldr r4, [pc, #+32] ; 0x807FDAD
300007B2  F044 0401		orr r4, r4, #1
300007B6  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
300007B8  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
300007BC  7038     		strb r0, [r7]

300007BE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007C2  F8DD E000		ldr lr, [sp]
300007C6  B002     		add sp, sp, #8

300007C8  4770     		bx lr

300007CC  FFFFFFFF		; 0x0807FDA1
300007D0  FFFFFFFF		; 0x0807FDAD
300007D4  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300007D8  4770     		bx lr


*** OUTPUT:
300007DA  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

300007DC  B082     		sub sp, sp, #8
300007DE  F8CD E000		str lr, [sp]
300007E2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300007E6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300007EA  F8DD E000		ldr lr, [sp]
300007EE  B002     		add sp, sp, #8

300007F0  4770     		bx lr

**************************************************
	List program: MbMBoot
**************************************************

PROGRAM MbMBoot

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
memory_return : BOOL;
dbAddrArr_0 : ARRAY[0..3] OF DWORD;
	END_VAR

        VAR CONSTANT
msg_reg_types_info_0 : ARRAY[0..4] OF BYTE := [4, 1, 1, 1, 1];
dbElemsArr_0 : ARRAY[0..11] OF UINT := [100, 0, 0, 100, 2, 0, 100, 4, 0, 100, 6, 0];
	END_VAR

END_PROGRAM

30000800  B082     		sub sp, sp, #8
30000802  F8CD E000		str lr, [sp]
30000806  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMBoot}
#1		(*$WAITSWITCH$*)
#2		
#3			(* memory_return := sysMbMRtu_MemoryMapping( TO_DWORD(ADR(sysMbMRtuNetList[0])), 1, TO_DWORD(ADR($$mbm_msg_queue[0])), 1, 100); *)
#4			ADR		$$mbm_msg_queue[0]	{LNXT:2|3|-1}
(*) UDINT
3000080A  F8DF 017C		ldr r0, [pc, #+380] ; 0x200002AC

#5			TO_DWORD	{LNXT:2|3|-1}
(-) @BYTE
#6			ST		$$TMP3	{LNXT:2|3|-1}
(*) DWORD
3000080E  F8DF 717C		ldr r7, [pc, #+380] ; 0x200002EC
30000812  6038     		str r0, [r7]

#7			ADR		sysMbMRtuNetList[0]	{LNXT:2|3|-1}
(*) DWORD
30000814  F8DF 0178		ldr r0, [pc, #+376] ; 0x200002F0

#8			TO_DWORD	{LNXT:2|3|-1}
(-) @DWORD
#9			sysMbMRtu_MemoryMapping		1, $$TMP3, 1, 100	{LNXT:2|3|-1}
(*) DWORD
30000818  B082     		sub sp, sp, #8
3000081A  2701     		mov r7, #1 ; 1
3000081C  4639     		mov r1, r7
3000081E  F8DF 716C		ldr r7, [pc, #+364] ; 0x200002EC
30000822  683A     		ldr r2, [r7]
30000824  2701     		mov r7, #1 ; 1
30000826  463B     		mov r3, r7
30000828  2764     		mov r7, #100 ; 100
3000082A  F8CD 7000		str r7, [sp]
3000082E  F8DF 414C		ldr r4, [pc, #+332] ; 0x8081F7D
30000832  F044 0401		orr r4, r4, #1
30000836  47A0     		blx r4
30000838  B002     		add sp, sp, #8

#10			ST		memory_return	{LNXT:2|3|-1}
(*) BOOL
3000083A  F8DF 7148		ldr r7, [pc, #+328] ; 0x200002A7
3000083E  7038     		strb r0, [r7]

#11		
#12		
#13			(* IF memory_return *)
#14			LD		memory_return	{LNXT:3|-1|-1}
(*) UNDEF
30000840  F8DF 7140		ldr r7, [pc, #+320] ; 0x200002A7
30000844  7838     		ldrb r0, [r7]

#15			NOT	{LNXT:3|-1|-1}
(*) BOOL
30000846  2800     		cmp r0, #0
30000848  BF08 2001		eqmov r0, #1
3000084C  BF18 2000		nemov r0, #0

#16			JMPCN	$label0	{LNXT:3|4|7}
(-) BOOL
30000850  2800     		cmp r0, #0
30000852  D002     		beq #4 ; 0x3000085A


#17		
#18			(* THEN *)
#19		
#20				(* RETURN *)
#21				RET
#22		
(-) BOOL
30000856  E083     		b #262 ; 0x30000960


#23		$label0:
#24			(* END_IF *)
#25		
#26			(* openChannel_return := sysMbMRtu_OpenChn2(0, MbBaudrate#MbBaud_9600, MbMode#MbMode_8E1, 1, 2, 0); *)
#27			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#28			sysMbMRtu_OpenChn2		MbBaudrate#MbBaud_9600, MbMode#MbMode_8E1, 1, 2, 0	{LNXT:7|8|-1}
(*) USINT
3000085A  B082     		sub sp, sp, #8
3000085C  2000     		mov r0, #0 ; 0
3000085E  F44F 5116		mov r1, #9600 ; 9600
30000862  2201     		mov r2, #1 ; 1
30000864  2301     		mov r3, #1 ; 1
30000866  2702     		mov r7, #2 ; 2
30000868  F8CD 7000		str r7, [sp]
3000086C  2700     		mov r7, #0 ; 0
3000086E  F8CD 7004		str r7, [sp, #+4]
30000872  F8DF 40F8		ldr r4, [pc, #+248] ; 0x80812B5
30000876  F044 0401		orr r4, r4, #1
3000087A  47A0     		blx r4
3000087C  B002     		add sp, sp, #8

#29			ST		openChannel_return	{LNXT:7|8|-1}
(*) USINT
3000087E  F8DF 7100		ldr r7, [pc, #+256] ; 0x200002A6
30000882  7038     		strb r0, [r7]

#30		
#31		
#32			(* IF openChannel_return = 16#FF *)
#33			LD		openChannel_return	{LNXT:8|-1|-1}
(*) UNDEF
30000884  F8DF 70F8		ldr r7, [pc, #+248] ; 0x200002A6
30000888  7838     		ldrb r0, [r7]

#34			EQ		16#FF	{LNXT:8|-1|-1}
(*) USINT
3000088A  28FF     		cmp r0, #255
3000088C  BF18 2000		nemov r0, #0
30000890  BF08 2001		eqmov r0, #1

#35			JMPCN	$label1	{LNXT:8|9|12}
(-) BOOL
30000894  2800     		cmp r0, #0
30000896  D002     		beq #4 ; 0x3000089E


#36		
#37			(* THEN *)
#38		
#39				(* RETURN *)
#40				RET
#41		
(-) BOOL
3000089A  E061     		b #194 ; 0x30000960


#42		$label1:
#43			(* END_IF *)
#44		
#45			(* slave_return := sysMbMRtu_SlaveAddToNetList2(openChannel_return,1,100,1,0); *)
#46			LDP0		openChannel_return	{LNXT:12|13|-1}
(-) BOOL
#47			sysMbMRtu_SlaveAddToNetList2		1, 100, 1, 0	{LNXT:12|13|-1}
(*) USINT
3000089E  B082     		sub sp, sp, #8
300008A0  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002A6
300008A4  7838     		ldrb r0, [r7]
300008A6  2101     		mov r1, #1 ; 1
300008A8  2764     		mov r7, #100 ; 100
300008AA  463A     		mov r2, r7
300008AC  2701     		mov r7, #1 ; 1
300008AE  463B     		mov r3, r7
300008B0  2700     		mov r7, #0 ; 0
300008B2  F8CD 7000		str r7, [sp]
300008B6  F8DF 40B8		ldr r4, [pc, #+184] ; 0x80813C5
300008BA  F044 0401		orr r4, r4, #1
300008BE  47A0     		blx r4
300008C0  B002     		add sp, sp, #8

#48			ST		slave_return	{LNXT:12|13|-1}
(*) USINT
300008C2  F8DF 70D0		ldr r7, [pc, #+208] ; 0x20000314
300008C6  7038     		strb r0, [r7]

#49		
#50			(* slaveMsg_return := sysMbMRtu_NewSlaveMessage3(openChannel_return, 1, 3, 1, 4, ADR(dbElemsArr_0), ADR(dbAddrArr_0), 0, 1000, NULL, ADR(msg_reg_types_info_0)); *)
#51			ADR		dbElemsArr_0	{LNXT:13|14|-1}
(*) USINT
300008C8  F8DF 00E0		ldr r0, [pc, #+224] ; 0x300000E0

#52			ST		$$TMP4	{LNXT:13|14|-1}
(*) @UINT
300008CC  F8DF 70CC		ldr r7, [pc, #+204] ; 0x20000318
300008D0  6038     		str r0, [r7]

#53			ADR		dbAddrArr_0	{LNXT:13|14|-1}
(*) @UINT
300008D2  F8DF 00CC		ldr r0, [pc, #+204] ; 0x2000031C

#54			ST		$$TMP5	{LNXT:13|14|-1}
(*) @DWORD
300008D6  F8DF 70CC		ldr r7, [pc, #+204] ; 0x2000032C
300008DA  6038     		str r0, [r7]

#55			ADR		msg_reg_types_info_0	{LNXT:13|14|-1}
(*) @DWORD
300008DC  F8DF 00D0		ldr r0, [pc, #+208] ; 0x300000F8

#56			ST		$$TMP6	{LNXT:13|14|-1}
(*) @BYTE
300008E0  F8DF 70C4		ldr r7, [pc, #+196] ; 0x20000330
300008E4  6038     		str r0, [r7]

#57			LDP0		openChannel_return	{LNXT:13|14|-1}
(-) @BYTE
#58			sysMbMRtu_NewSlaveMessage3		1, 3, 1, 4, $$TMP4, $$TMP5, 0, 1000, NULL, $$TMP6	{LNXT:13|14|-1}
(*) USINT
300008E6  B088     		sub sp, sp, #32
300008E8  F8DF 7094		ldr r7, [pc, #+148] ; 0x200002A6
300008EC  7838     		ldrb r0, [r7]
300008EE  2101     		mov r1, #1 ; 1
300008F0  2703     		mov r7, #3 ; 3
300008F2  463A     		mov r2, r7
300008F4  2701     		mov r7, #1 ; 1
300008F6  463B     		mov r3, r7
300008F8  2704     		mov r7, #4 ; 4
300008FA  F8CD 7000		str r7, [sp]
300008FE  F8DF 709C		ldr r7, [pc, #+156] ; 0x20000318
30000902  683F     		ldr r7, [r7]
30000904  F8CD 7004		str r7, [sp, #+4]
30000908  F8DF 7098		ldr r7, [pc, #+152] ; 0x2000032C
3000090C  683F     		ldr r7, [r7]
3000090E  F8CD 7008		str r7, [sp, #+8]
30000912  2700     		mov r7, #0 ; 0
30000914  F8CD 700C		str r7, [sp, #+12]
30000918  F44F 777A		mov r7, #1000 ; 1000
3000091C  F8CD 7010		str r7, [sp, #+16]
30000920  2700     		mov r7, #0 ; 0
30000922  F8CD 7014		str r7, [sp, #+20]
30000926  F8DF 7080		ldr r7, [pc, #+128] ; 0x20000330
3000092A  683F     		ldr r7, [r7]
3000092C  F8CD 7018		str r7, [sp, #+24]
30000930  F8DF 4044		ldr r4, [pc, #+68] ; 0x8081945
30000934  F044 0401		orr r4, r4, #1
30000938  47A0     		blx r4
3000093A  B008     		add sp, sp, #32

#59			ST		slaveMsg_return	{LNXT:13|14|-1}
(*) BOOL
3000093C  F8DF 7058		ldr r7, [pc, #+88] ; 0x20000315
30000940  7038     		strb r0, [r7]

#60		
#61		
#62			(* IF slaveMsg_return *)
#63			LD		slaveMsg_return	{LNXT:14|-1|-1}
(*) UNDEF
30000942  F8DF 7054		ldr r7, [pc, #+84] ; 0x20000315
30000946  7838     		ldrb r0, [r7]

#64			JMPCN	$label2	{LNXT:14|15|2}
(-) BOOL
30000948  2800     		cmp r0, #0
3000094A  D009     		beq #18 ; 0x30000960


#65		
#66			(* THEN *)
#67		
#68				(* slaveMsg_return := sysMbMRtu_MsgConfigCompleted(TRUE); *)
#69				LDP0		TRUE	{LNXT:15|2|-1}
(-) BOOL
#70				sysMbMRtu_MsgConfigCompleted	{LNXT:15|2|-1}
(*) BOOL
3000094E  2001     		mov r0, #1 ; 1
30000950  F8DF 4020		ldr r4, [pc, #+32] ; 0x80815D1
30000954  F044 0401		orr r4, r4, #1
30000958  47A0     		blx r4

#71				ST		slaveMsg_return	{LNXT:15|2|-1}
(*) BOOL
3000095A  F8DF 703C		ldr r7, [pc, #+60] ; 0x20000315
3000095E  7038     		strb r0, [r7]

30000960  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000964  F8DD E000		ldr lr, [sp]
30000968  B002     		add sp, sp, #8

3000096A  4770     		bx lr

3000096C  FFFFFFFF		; 0x080812B5
30000970  FFFFFFFF		; 0x080813C5
30000974  FFFFFFFF		; 0x080815D1
30000978  FFFFFFFF		; 0x08081945
3000097C  FFFFFFFF		; 0x08081F7D
30000980  200002A6		; 0x200002A6
30000984  200002A7		; 0x200002A7
30000988  200002AC		; 0x200002AC
3000098C  200002EC		; 0x200002EC
30000990  200002F0		; 0x200002F0
30000994  20000314		; 0x20000314
30000998  20000315		; 0x20000315
3000099C  20000318		; 0x20000318
300009A0  2000031C		; 0x2000031C
300009A4  2000032C		; 0x2000032C
300009A8  20000330		; 0x20000330
300009AC  300000E0		; 0x300000E0
300009B0  300000F8		; 0x300000F8

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300009B4  4770     		bx lr


*** OUTPUT:
300009B6  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

300009B8  B082     		sub sp, sp, #8
300009BA  F8CD E000		str lr, [sp]
300009BE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300009C2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300009C6  F8DD E000		ldr lr, [sp]
300009CA  B002     		add sp, sp, #8

300009CC  4770     		bx lr

**************************************************
	List program: MbMPrm
**************************************************

PROGRAM MbMPrm

        VAR
slaveparam_return : BOOL;
	END_VAR

END_PROGRAM

300009E0  B082     		sub sp, sp, #8
300009E2  F8CD E000		str lr, [sp]
300009E6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMPrm}
#1		(*$WAITSWITCH$*)
#2		
#3			(* slaveparam_return := sysMbMRtu_SlavePrmInteger( sysMbMRtuStatus.chn, 1, 0, 401, 1, 0, 200 ); *)
#4			LDP0		sysMbMRtuStatus.chn	{LNXT:2|2|-1}
(-) UDINT
#5			sysMbMRtu_SlavePrmInteger		1, 0, 401, 1, 0, 200	{LNXT:2|2|-1}
(*) USINT
300009EA  B084     		sub sp, sp, #16
300009EC  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401F97D
300009F0  7838     		ldrb r0, [r7]
300009F2  2101     		mov r1, #1 ; 1
300009F4  2700     		mov r7, #0 ; 0
300009F6  463A     		mov r2, r7
300009F8  F8DF 7034		ldr r7, [pc, #+52] ; 0x191
300009FC  463B     		mov r3, r7
300009FE  2701     		mov r7, #1 ; 1
30000A00  F8CD 7000		str r7, [sp]
30000A04  2700     		mov r7, #0 ; 0
30000A06  F8CD 7004		str r7, [sp, #+4]
30000A0A  27C8     		mov r7, #200 ; 200
30000A0C  F8CD 7008		str r7, [sp, #+8]
30000A10  F8DF 4020		ldr r4, [pc, #+32] ; 0x80815E5
30000A14  F044 0401		orr r4, r4, #1
30000A18  47A0     		blx r4
30000A1A  B004     		add sp, sp, #16

#6			ST		slaveparam_return	{LNXT:2|2|-1}
(*) BOOL
30000A1C  F8DF 7018		ldr r7, [pc, #+24] ; 0x20000317
30000A20  7038     		strb r0, [r7]

30000A22  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A26  F8DD E000		ldr lr, [sp]
30000A2A  B002     		add sp, sp, #8

30000A2C  4770     		bx lr

30000A30  00000191		; 0x00000191
30000A34  FFFFFFFF		; 0x080815E5
30000A38  20000317		; 0x20000317
30000A3C  FFFFFFFF		; 0x2401F97D

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000A40  4770     		bx lr


*** OUTPUT:
30000A42  4770     		bx lr



**************************************************
	Task MbMPrm init code
**************************************************

30000A44  B082     		sub sp, sp, #8
30000A46  F8CD E000		str lr, [sp]
30000A4A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000A4E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A52  F8DD E000		ldr lr, [sp]
30000A56  B002     		add sp, sp, #8

30000A58  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000A70  B082     		sub sp, sp, #8
30000A72  F8CD E000		str lr, [sp]
30000A76  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000A7A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A7E  F8DD E000		ldr lr, [sp]
30000A82  B002     		add sp, sp, #8

30000A84  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

30000A86  B082     		sub sp, sp, #8
30000A88  F8CD E000		str lr, [sp]
30000A8C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000A90  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000A94  F8DD E000		ldr lr, [sp]
30000A98  B002     		add sp, sp, #8

30000A9A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

30000A9C  B082     		sub sp, sp, #8
30000A9E  F8CD E000		str lr, [sp]
30000AA2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000AA6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000AAA  F8DD E000		ldr lr, [sp]
30000AAE  B002     		add sp, sp, #8

30000AB0  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		0000000030000D70h
Code size:                		00000D70h

Start local data area:    		0000000020000298h
End local data area:      		000000002000038Eh
Local data size:          		000000F6h

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                2ED6D400
DEBUG MEMO ID:                          300002EE
FULL MEMO ID:                           0000FB23
********************************************

***********************************************************************
*
*	CODE GENERATION LISTING FOR: Mqtt
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
3001E510  FB90 F3F1		sdiv r3, r0, r1
3001E514  4359     		mul r1, r1, r3
3001E516  EBC1 0000		rsb r0, r1, r0
3001E51A  4770     		bx lr

$$MOD_U:
3001E51C  FBB0 F3F1		udiv r3, r0, r1
3001E520  4359     		mul r1, r1, r3
3001E522  EBC1 0000		rsb r0, r1, r0
3001E526  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E528  E92D 4040		stmdb sp!, { r6, lr }
3001E52C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E52E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
3001E530  2800     		cmp r0, #0
3001E532  D130     		bne #96 ; 0x3001E596


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
3001E536  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
3001E538  2800     		cmp r0, #0
3001E53A  D031     		beq #98 ; 0x3001E5A0


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E53E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E540  2800     		cmp r0, #0
3001E542  BF18 2000		nemov r0, #0
3001E546  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E54A  2800     		cmp r0, #0
3001E54C  D004     		beq #8 ; 0x3001E558


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E550  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D578
3001E554  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E556  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E558  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D578
3001E55C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E55E  6837     		ldr r7, [r6]
3001E560  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E562  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E564  68B7     		ldr r7, [r6, #8]
3001E566  42B8     		cmp r0, r7
3001E568  BF38 2000		lomov r0, #0
3001E56C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
3001E570  B082     		sub sp, sp, #8
3001E572  F8CD 0000		str r0, [sp]
3001E576  2800     		cmp r0, #0
3001E578  BF08 2001		eqmov r0, #1
3001E57C  BF18 2000		nemov r0, #0
3001E580  7330     		strb r0, [r6, #12]
3001E582  F8DD 0000		ldr r0, [sp]
3001E586  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
3001E588  2800     		cmp r0, #0
3001E58A  D009     		beq #18 ; 0x3001E5A0


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E58E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E590  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E592  E005     		b #10 ; 0x3001E5A0


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E596  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E598  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E59A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3001E59C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3001E59E  7330     		strb r0, [r6, #12]

3001E5A0  E8BD 4040		ldmia sp!, { r6, lr }

3001E5A4  4770     		bx lr

3001E5A8  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E5AC  E92D 4040		stmdb sp!, { r6, lr }
3001E5B0  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E5B2  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
3001E5B4  2800     		cmp r0, #0
3001E5B6  D025     		beq #74 ; 0x3001E604


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3001E5BA  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3001E5BC  2800     		cmp r0, #0
3001E5BE  D126     		bne #76 ; 0x3001E60E


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E5C2  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E5C4  2800     		cmp r0, #0
3001E5C6  BF18 2000		nemov r0, #0
3001E5CA  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E5CE  2800     		cmp r0, #0
3001E5D0  D004     		beq #8 ; 0x3001E5DC


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E5D4  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D578
3001E5D8  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E5DA  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E5DC  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D578
3001E5E0  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E5E2  6837     		ldr r7, [r6]
3001E5E4  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E5E6  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E5E8  68B7     		ldr r7, [r6, #8]
3001E5EA  42B8     		cmp r0, r7
3001E5EC  BF38 2000		lomov r0, #0
3001E5F0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
3001E5F4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
3001E5F6  2800     		cmp r0, #0
3001E5F8  D009     		beq #18 ; 0x3001E60E


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E5FC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E5FE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E600  E005     		b #10 ; 0x3001E60E


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E604  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E606  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E608  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3001E60A  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3001E60C  7330     		strb r0, [r6, #12]

3001E60E  E8BD 4040		ldmia sp!, { r6, lr }

3001E612  4770     		bx lr

3001E614  FFFFFFFF		; 0x2401D578


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

3001E618  E92D 4040		stmdb sp!, { r6, lr }
3001E61C  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
3001E61E  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
3001E622  5DF0     		ldrb r0, [r6, +r7]
3001E624  2800     		cmp r0, #0
3001E626  BF08 2001		eqmov r0, #1
3001E62A  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3001E62E  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
3001E630  6AF0     		ldr r0, [r6, #44]
3001E632  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
3001E634  E92D 0021		stmdb sp!, { r0, r5 }
3001E638  4635     		mov r5, r6
3001E63A  467C     		mov r4, pc
3001E63C  3C92     		sub r4, r4, #+0x92 ; 0x3001E5AC
3001E63E  F044 0401		orr r4, r4, #1
3001E642  47A0     		blx r4
3001E644  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
3001E648  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3001E64A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3001E64C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3001E64E  6AF0     		ldr r0, [r6, #44]
3001E650  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
3001E652  E92D 0021		stmdb sp!, { r0, r5 }
3001E656  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3001E65A  19F5     		add r5, r6, r7
3001E65C  F8DF 4028		ldr r4, [pc, #+40] ; 0x3001E528
3001E660  F044 0401		orr r4, r4, #1
3001E664  47A0     		blx r4
3001E666  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3001E66A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3001E66E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
3001E670  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
3001E674  55F0     		strb r0, [r6, +r7]

3001E676  E8BD 4040		ldmia sp!, { r6, lr }

3001E67A  4770     		bx lr

3001E67C  00000014		; 0x00000014
3001E680  00000020		; 0x00000020
3001E684  00000030		; 0x00000030
3001E688  3001E528		; 0x3001E528


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List program: MqttHandeler
**************************************************

PROGRAM MqttHandeler

        VAR
Clock_1Hz : Clock_Gen;
Azioni : WORD;
Transizioni : WORD;
DummyBit : BOOL;
SendClock : TON;
DataReady : BOOL;
	END_VAR

END_PROGRAM

3001E690  B082     		sub sp, sp, #8
3001E692  F8CD E000		str lr, [sp]
3001E696  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:MqttHandeler}
#1		 
#2		  
#3			(* Network 1 *)
#4			MOVE		500,CLOCK_1HZ.TEMPO {R:1$2}
(*) UDINT
3001E69A  F44F 70FA		mov r0, #500 ; 500
3001E69E  F8DF 736C		ldr r7, [pc, #+876] ; 0x2000031C
3001E6A2  6038     		str r0, [r7]

#5			CAL		CLOCK_1HZ {R:1$2}
(*) UDINT
3001E6A4  E92D 0021		stmdb sp!, { r0, r5 }
3001E6A8  F8DF 535C		ldr r5, [pc, #+860] ; 0x200002F0
3001E6AC  467C     		mov r4, pc
3001E6AE  3C98     		sub r4, r4, #+0x98 ; 0x3001E618
3001E6B0  F044 0401		orr r4, r4, #1
3001E6B4  47A0     		blx r4
3001E6B6  E8BD 0021		ldmia sp!, { r0, r5 }

#6			MOVE		CLOCK_1HZ.OUT,LEDGREEN {R:1$2}
(*) UDINT
3001E6BA  F8DF 7354		ldr r7, [pc, #+852] ; 0x20000320
3001E6BE  7838     		ldrb r0, [r7]
3001E6C0  F8DF 7388		ldr r7, [pc, #+904] ; 0x2401E63D
3001E6C4  7038     		strb r0, [r7]

#7			LD		TRUE
(-) UNDEF
3001E6C6  2001     		mov r0, #1 ; 1

#8		 
#9			(* Network 2 *)
#10			LD		AZIONI {R:2$3}
(*) UNDEF
3001E6C8  F8DF 7350		ldr r7, [pc, #+848] ; 0x200003BE
3001E6CC  8838     		ldrh r0, [r7]

#11			EQ		0 {R:2$6}
(*) WORD
3001E6CE  2800     		cmp r0, #0
3001E6D0  BF18 2000		nemov r0, #0
3001E6D4  BF08 2001		eqmov r0, #1

#12			ST		DUMMYBIT {R:2$5}
(*) BOOL
3001E6D8  F8DF 733C		ldr r7, [pc, #+828] ; 0x200003BD
3001E6DC  7038     		strb r0, [r7]

#13			LD		TRUE
(-) UNDEF
3001E6DE  2001     		mov r0, #1 ; 1

#14			AND		DUMMYBIT {R:2$7}
(*) BOOL
3001E6E0  F8DF 7334		ldr r7, [pc, #+820] ; 0x200003BD
3001E6E4  783F     		ldrb r7, [r7]
3001E6E6  4038     		and r0, r0, r7

#15			S		AZIONI.0 {R:2$12}
(*) BOOL
3001E6E8  2800     		cmp r0, #0
3001E6EA  D013     		beq #0x000026
3001E6EC  B082     		sub sp, sp, #8
3001E6EE  F8CD 0000		str r0, [sp]
3001E6F2  2001     		mov r0, #1
3001E6F4  F8DF 7324		ldr r7, [pc, #+804] ; 0x200003BE
3001E6F8  B082     		sub sp, sp, #8
3001E6FA  F8CD 7000		str r7, [sp]
3001E6FE  883F     		ldrh r7, [r7]
3001E700  F360 0700		bfi r7, r0, #0, #1
3001E704  4638     		mov r0, r7
3001E706  F8DD 7000		ldr r7, [sp]
3001E70A  B002     		add sp, sp, #8
3001E70C  8038     		strh r0, [r7]
3001E70E  F8DD 0000		ldr r0, [sp]
3001E712  B002     		add sp, sp, #8

#16		 
#17			(* Network 3 *)
#18			LD		AZIONI {R:3$3}
(*) UNDEF
3001E714  F8DF 7304		ldr r7, [pc, #+772] ; 0x200003BE
3001E718  8838     		ldrh r0, [r7]

#19			ST		TRANSIZIONI {R:3$4}
(*) WORD
3001E71A  F8DF 7304		ldr r7, [pc, #+772] ; 0x200003C0
3001E71E  8038     		strh r0, [r7]

#20			LD		TRUE
(-) UNDEF
3001E720  2001     		mov r0, #1 ; 1

#21		 
#22			(* Network 4 *)
#23			LDN		MQTT_OK {R:4$2}
(*) UNDEF
3001E722  F8DF 7340		ldr r7, [pc, #+832] ; 0x38000000
3001E726  7838     		ldrb r0, [r7]
3001E728  2800     		cmp r0, #0
3001E72A  BF08 2001		eqmov r0, #1
3001E72E  BF18 2000		nemov r0, #0

#24			ST		$$VAR$1
(*) BOOL
3001E732  F8DF 72D0		ldr r7, [pc, #+720] ; 0x200002EF
3001E736  7038     		strb r0, [r7]

#25			JMPCN	$$LAB$1
(-) BOOL
3001E738  2800     		cmp r0, #0
3001E73A  D004     		beq #8 ; 0x3001E746


#26			LD		0 {R:4$7}
(-) UNDEF
3001E73E  2000     		mov r0, #0 ; 0

#27			ST		AZIONI {R:4$6}
(*) USINT
3001E740  F8DF 72D8		ldr r7, [pc, #+728] ; 0x200003BE
3001E744  8038     		strh r0, [r7]

#28		$$LAB$1:
#29			LD		$$VAR$1
(*) UNDEF
3001E746  F8DF 72BC		ldr r7, [pc, #+700] ; 0x200002EF
3001E74A  7838     		ldrb r0, [r7]

#30		 
#31			(* Network 5 *)
#32			LD		TRANSIZIONI.0 {R:5$0}
(*) UNDEF
3001E74C  F8DF 72D0		ldr r7, [pc, #+720] ; 0x200003C0
3001E750  8838     		ldrh r0, [r7]
3001E752  F3C0 0000		ubfx r0, r0, #0, #1

#33			AND		MQTT_OK {R:5$5}
(*) BOOL
3001E756  F8DF 730C		ldr r7, [pc, #+780] ; 0x38000000
3001E75A  783F     		ldrb r7, [r7]
3001E75C  4038     		and r0, r0, r7

#34			AND		SENDCLOCK.Q {R:5$2}
(*) BOOL
3001E75E  F8DF 72D4		ldr r7, [pc, #+724] ; 0x200003D0
3001E762  783F     		ldrb r7, [r7]
3001E764  4038     		and r0, r0, r7

#35			R		AZIONI.0 {R:5$1}
(*) BOOL
3001E766  2800     		cmp r0, #0
3001E768  D013     		beq #0x000026
3001E76A  B082     		sub sp, sp, #8
3001E76C  F8CD 0000		str r0, [sp]
3001E770  2000     		mov r0, #0
3001E772  F8DF 72A8		ldr r7, [pc, #+680] ; 0x200003BE
3001E776  B082     		sub sp, sp, #8
3001E778  F8CD 7000		str r7, [sp]
3001E77C  883F     		ldrh r7, [r7]
3001E77E  F360 0700		bfi r7, r0, #0, #1
3001E782  4638     		mov r0, r7
3001E784  F8DD 7000		ldr r7, [sp]
3001E788  B002     		add sp, sp, #8
3001E78A  8038     		strh r0, [r7]
3001E78C  F8DD 0000		ldr r0, [sp]
3001E790  B002     		add sp, sp, #8

#36			S		AZIONI.1 {R:5$4}
(*) BOOL
3001E792  2800     		cmp r0, #0
3001E794  D013     		beq #0x000026
3001E796  B082     		sub sp, sp, #8
3001E798  F8CD 0000		str r0, [sp]
3001E79C  2001     		mov r0, #1
3001E79E  F8DF 727C		ldr r7, [pc, #+636] ; 0x200003BE
3001E7A2  B082     		sub sp, sp, #8
3001E7A4  F8CD 7000		str r7, [sp]
3001E7A8  883F     		ldrh r7, [r7]
3001E7AA  F360 0741		bfi r7, r0, #1, #1
3001E7AE  4638     		mov r0, r7
3001E7B0  F8DD 7000		ldr r7, [sp]
3001E7B4  B002     		add sp, sp, #8
3001E7B6  8038     		strh r0, [r7]
3001E7B8  F8DD 0000		ldr r0, [sp]
3001E7BC  B002     		add sp, sp, #8

#37		 
#38			(* Network 6 *)
#39			LD		TRANSIZIONI.1 {R:6$0}
(*) UNDEF
3001E7BE  F8DF 7260		ldr r7, [pc, #+608] ; 0x200003C0
3001E7C2  8838     		ldrh r0, [r7]
3001E7C4  F3C0 0040		ubfx r0, r0, #1, #1

#40			AND		DATAREADY {R:6$2}
(*) BOOL
3001E7C8  F8DF 7258		ldr r7, [pc, #+600] ; 0x200003C3
3001E7CC  783F     		ldrb r7, [r7]
3001E7CE  4038     		and r0, r0, r7

#41			R		AZIONI.1 {R:6$1}
(*) BOOL
3001E7D0  2800     		cmp r0, #0
3001E7D2  D013     		beq #0x000026
3001E7D4  B082     		sub sp, sp, #8
3001E7D6  F8CD 0000		str r0, [sp]
3001E7DA  2000     		mov r0, #0
3001E7DC  F8DF 723C		ldr r7, [pc, #+572] ; 0x200003BE
3001E7E0  B082     		sub sp, sp, #8
3001E7E2  F8CD 7000		str r7, [sp]
3001E7E6  883F     		ldrh r7, [r7]
3001E7E8  F360 0741		bfi r7, r0, #1, #1
3001E7EC  4638     		mov r0, r7
3001E7EE  F8DD 7000		ldr r7, [sp]
3001E7F2  B002     		add sp, sp, #8
3001E7F4  8038     		strh r0, [r7]
3001E7F6  F8DD 0000		ldr r0, [sp]
3001E7FA  B002     		add sp, sp, #8

#42			S		AZIONI.2 {R:6$4}
(*) BOOL
3001E7FC  2800     		cmp r0, #0
3001E7FE  D013     		beq #0x000026
3001E800  B082     		sub sp, sp, #8
3001E802  F8CD 0000		str r0, [sp]
3001E806  2001     		mov r0, #1
3001E808  F8DF 7210		ldr r7, [pc, #+528] ; 0x200003BE
3001E80C  B082     		sub sp, sp, #8
3001E80E  F8CD 7000		str r7, [sp]
3001E812  883F     		ldrh r7, [r7]
3001E814  F360 0782		bfi r7, r0, #2, #1
3001E818  4638     		mov r0, r7
3001E81A  F8DD 7000		ldr r7, [sp]
3001E81E  B002     		add sp, sp, #8
3001E820  8038     		strh r0, [r7]
3001E822  F8DD 0000		ldr r0, [sp]
3001E826  B002     		add sp, sp, #8

#43		 
#44			(* Network 7 *)
#45			LD		TRANSIZIONI.2 {R:7$0}
(*) UNDEF
3001E828  F8DF 71F4		ldr r7, [pc, #+500] ; 0x200003C0
3001E82C  8838     		ldrh r0, [r7]
3001E82E  F3C0 0080		ubfx r0, r0, #2, #1

#46			AND		SEND_OK {R:7$2}
(*) BOOL
3001E832  F8DF 7234		ldr r7, [pc, #+564] ; 0x38000001
3001E836  783F     		ldrb r7, [r7]
3001E838  4038     		and r0, r0, r7

#47			R		AZIONI.2 {R:7$1}
(*) BOOL
3001E83A  2800     		cmp r0, #0
3001E83C  D013     		beq #0x000026
3001E83E  B082     		sub sp, sp, #8
3001E840  F8CD 0000		str r0, [sp]
3001E844  2000     		mov r0, #0
3001E846  F8DF 71D4		ldr r7, [pc, #+468] ; 0x200003BE
3001E84A  B082     		sub sp, sp, #8
3001E84C  F8CD 7000		str r7, [sp]
3001E850  883F     		ldrh r7, [r7]
3001E852  F360 0782		bfi r7, r0, #2, #1
3001E856  4638     		mov r0, r7
3001E858  F8DD 7000		ldr r7, [sp]
3001E85C  B002     		add sp, sp, #8
3001E85E  8038     		strh r0, [r7]
3001E860  F8DD 0000		ldr r0, [sp]
3001E864  B002     		add sp, sp, #8

#48			S		AZIONI.0 {R:7$4}
(*) BOOL
3001E866  2800     		cmp r0, #0
3001E868  D013     		beq #0x000026
3001E86A  B082     		sub sp, sp, #8
3001E86C  F8CD 0000		str r0, [sp]
3001E870  2001     		mov r0, #1
3001E872  F8DF 71A8		ldr r7, [pc, #+424] ; 0x200003BE
3001E876  B082     		sub sp, sp, #8
3001E878  F8CD 7000		str r7, [sp]
3001E87C  883F     		ldrh r7, [r7]
3001E87E  F360 0700		bfi r7, r0, #0, #1
3001E882  4638     		mov r0, r7
3001E884  F8DD 7000		ldr r7, [sp]
3001E888  B002     		add sp, sp, #8
3001E88A  8038     		strh r0, [r7]
3001E88C  F8DD 0000		ldr r0, [sp]
3001E890  B002     		add sp, sp, #8

#49		 
#50			(* Network 8 *)
#51			LD		AZIONI.0 {R:8$0}
(*) UNDEF
3001E892  F8DF 7188		ldr r7, [pc, #+392] ; 0x200003BE
3001E896  8838     		ldrh r0, [r7]
3001E898  F3C0 0000		ubfx r0, r0, #0, #1

#52			AND		MQTT_OK {R:8$4}
(*) BOOL
3001E89C  F8DF 71C4		ldr r7, [pc, #+452] ; 0x38000000
3001E8A0  783F     		ldrb r7, [r7]
3001E8A2  4038     		and r0, r0, r7

#53			ST		SENDCLOCK.IN {R:8$2}
(*) BOOL
3001E8A4  F8DF 7184		ldr r7, [pc, #+388] ; 0x200003C8
3001E8A8  7038     		strb r0, [r7]

#54			MOVE		10000,SENDCLOCK.PT {R:8$2}
(*) BOOL
3001E8AA  F8DF 7154		ldr r7, [pc, #+340] ; 0x2710
3001E8AE  4638     		mov r0, r7
3001E8B0  F8DF 717C		ldr r7, [pc, #+380] ; 0x200003CC
3001E8B4  6038     		str r0, [r7]

#55			CAL		SENDCLOCK {R:8$2}
(*) UDINT
3001E8B6  E92D 0021		stmdb sp!, { r0, r5 }
3001E8BA  F8DF 516C		ldr r5, [pc, #+364] ; 0x200003C4
3001E8BE  F8DF 41A0		ldr r4, [pc, #+416] ; 0x3001E5AC
3001E8C2  F044 0401		orr r4, r4, #1
3001E8C6  47A0     		blx r4
3001E8C8  E8BD 0021		ldmia sp!, { r0, r5 }

#56			LD		SENDCLOCK.Q {R:8$2}
(*) UNDEF
3001E8CC  F8DF 7164		ldr r7, [pc, #+356] ; 0x200003D0
3001E8D0  7838     		ldrb r0, [r7]

#57		 
#58			(* Network 9 *)
#59			LD		AZIONI.1 {R:9$26}
(*) UNDEF
3001E8D2  F8DF 7148		ldr r7, [pc, #+328] ; 0x200003BE
3001E8D6  8838     		ldrh r0, [r7]
3001E8D8  F3C0 0040		ubfx r0, r0, #1, #1

#60			ST		$$VAR$1
(*) BOOL
3001E8DC  F8DF 7124		ldr r7, [pc, #+292] ; 0x200002EF
3001E8E0  7038     		strb r0, [r7]

#61			JMPCN	$$LAB$2
(-) BOOL
3001E8E2  2800     		cmp r0, #0
3001E8E4  D01C     		beq #56 ; 0x3001E920


#62			(* $EXPR9$14 := TO_REAL(SENS_TEMPERATURE) / 1000.0; *)
#63			LDP0		SENS_TEMPERATURE	{R:9$14}
(-) BOOL
#64			TO_REAL	{R:9$14}
(*) INT
3001E8E8  F8DF 7164		ldr r7, [pc, #+356] ; 0x2401F060
3001E8EC  F9B7 0000		ldrsh r0, [r7]
3001E8F0  EE00 0A10		fmsr s0, r0
3001E8F4  EEB8 0AC0		fsitos s0, s0

#65			DIV		1000.0	{R:9$14}
(*) REAL
3001E8F8  F8DF 7184		ldr r7, [pc, #+388] ; 0x447A0000 = 1000.000000
3001E8FC  EE03 7A90		fmsr s7, r7
3001E900  EE80 0A23		fdivs s0, s0, s7
3001E904  EE10 0A10		fmrs r0, s0

#66			ST		$EXPR9$14	{R:9$14}
(*) REAL
3001E908  F8DF 7130		ldr r7, [pc, #+304] ; 0x2000040C
3001E90C  ED87 0A00		fsts s0, [r7]

#67			LD		$EXPR9$14 {R:9$14}
(*) UNDEF
3001E910  F8DF 7128		ldr r7, [pc, #+296] ; 0x2000040C
3001E914  ED97 0A00		flds s0, [r7]

#68			ST		TEMPERATURA {R:9$4}
(*) REAL
3001E918  F8DF 7154		ldr r7, [pc, #+340] ; 0x38000204
3001E91C  ED87 0A00		fsts s0, [r7]

#69		$$LAB$2:
#70			LD		$$VAR$1
(*) UNDEF
3001E920  F8DF 70E0		ldr r7, [pc, #+224] ; 0x200002EF
3001E924  7838     		ldrb r0, [r7]

#71			ST		$$VAR$2
(*) BOOL
3001E926  F8DF 70EC		ldr r7, [pc, #+236] ; 0x20000324
3001E92A  7038     		strb r0, [r7]

#72			JMPCN	$$LAB$3
(-) BOOL
3001E92C  2800     		cmp r0, #0
3001E92E  D01C     		beq #56 ; 0x3001E96A


#73			(* $EXPR9$15 := TO_REAL(SENS_HUMIDITY) /1000.0; *)
#74			LDP0		SENS_HUMIDITY	{R:9$15}
(-) BOOL
#75			TO_REAL	{R:9$15}
(*) INT
3001E932  F8DF 7124		ldr r7, [pc, #+292] ; 0x2401F064
3001E936  F9B7 0000		ldrsh r0, [r7]
3001E93A  EE00 0A10		fmsr s0, r0
3001E93E  EEB8 0AC0		fsitos s0, s0

#76			DIV		1000.0	{R:9$15}
(*) REAL
3001E942  F8DF 713C		ldr r7, [pc, #+316] ; 0x447A0000 = 1000.000000
3001E946  EE03 7A90		fmsr s7, r7
3001E94A  EE80 0A23		fdivs s0, s0, s7
3001E94E  EE10 0A10		fmrs r0, s0

#77			ST		$EXPR9$15	{R:9$15}
(*) REAL
3001E952  F8DF 70EC		ldr r7, [pc, #+236] ; 0x20000410
3001E956  ED87 0A00		fsts s0, [r7]

#78			LD		$EXPR9$15 {R:9$15}
(*) UNDEF
3001E95A  F8DF 70E4		ldr r7, [pc, #+228] ; 0x20000410
3001E95E  ED97 0A00		flds s0, [r7]

#79			ST		UMIDITA {R:9$8}
(*) REAL
3001E962  F8DF 7110		ldr r7, [pc, #+272] ; 0x38000208
3001E966  ED87 0A00		fsts s0, [r7]

#80		$$LAB$3:
#81			LD		$$VAR$2
(*) UNDEF
3001E96A  F8DF 70A8		ldr r7, [pc, #+168] ; 0x20000324
3001E96E  7838     		ldrb r0, [r7]

#82			LD		$$VAR$1
(*) UNDEF
3001E970  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002EF
3001E974  7838     		ldrb r0, [r7]

#83			JMPCN	$$LAB$4
(-) BOOL
3001E976  2800     		cmp r0, #0
3001E978  D012     		beq #36 ; 0x3001E9A0


#84			(* $EXPR9$21 := TO_BOOL(SENS_TEMPOK); *)
#85			LDP0		SENS_TEMPOK	{R:9$21}
(-) BOOL
#86			TO_BOOL	{R:9$21}
(*) INT
3001E97C  F8DF 70D4		ldr r7, [pc, #+212] ; 0x2401F062
3001E980  F9B7 0000		ldrsh r0, [r7]
3001E984  2800     		cmp r0, #0
3001E986  BF18 2001		nemov r0, #1
3001E98A  BF08 2000		eqmov r0, #0

#87			ST		$EXPR9$21	{R:9$21}
(*) BOOL
3001E98E  F8DF 70B4		ldr r7, [pc, #+180] ; 0x20000414
3001E992  7038     		strb r0, [r7]

#88			LD		$EXPR9$21 {R:9$21}
(*) UNDEF
3001E994  F8DF 70AC		ldr r7, [pc, #+172] ; 0x20000414
3001E998  7838     		ldrb r0, [r7]

#89			ST		SENSTEMP_OK {R:9$22}
(*) BOOL
3001E99A  F8DF 70DC		ldr r7, [pc, #+220] ; 0x3800020C
3001E99E  7038     		strb r0, [r7]

#90		$$LAB$4:
#91			LD		$$VAR$1
(*) UNDEF
3001E9A0  F8DF 7060		ldr r7, [pc, #+96] ; 0x200002EF
3001E9A4  7838     		ldrb r0, [r7]

#92			ST		$$VAR$3
(*) BOOL
3001E9A6  F8DF 7090		ldr r7, [pc, #+144] ; 0x200003E0
3001E9AA  7038     		strb r0, [r7]

#93			JMPCN	$$LAB$5
(-) BOOL
3001E9AC  2800     		cmp r0, #0
3001E9AE  D012     		beq #36 ; 0x3001E9D6


#94			(* $EXPR9$24 := TO_BOOL(SENS_HUMOK); *)
#95			LDP0		SENS_HUMOK	{R:9$24}
(-) BOOL
#96			TO_BOOL	{R:9$24}
(*) INT
3001E9B2  F8DF 70A8		ldr r7, [pc, #+168] ; 0x2401F066
3001E9B6  F9B7 0000		ldrsh r0, [r7]
3001E9BA  2800     		cmp r0, #0
3001E9BC  BF18 2001		nemov r0, #1
3001E9C0  BF08 2000		eqmov r0, #0

#97			ST		$EXPR9$24	{R:9$24}
(*) BOOL
3001E9C4  F8DF 7080		ldr r7, [pc, #+128] ; 0x20000415
3001E9C8  7038     		strb r0, [r7]

#98			LD		$EXPR9$24 {R:9$24}
(*) UNDEF
3001E9CA  F8DF 707C		ldr r7, [pc, #+124] ; 0x20000415
3001E9CE  7838     		ldrb r0, [r7]

#99			ST		SENSHUM_OK {R:9$25}
(*) BOOL
3001E9D0  F8DF 70A8		ldr r7, [pc, #+168] ; 0x3800020D
3001E9D4  7038     		strb r0, [r7]

#100		$$LAB$5:
#101			LD		$$VAR$3
(*) UNDEF
3001E9D6  F8DF 7060		ldr r7, [pc, #+96] ; 0x200003E0
3001E9DA  7838     		ldrb r0, [r7]

#102			ST		DATAREADY {R:9$28}
(*) BOOL
3001E9DC  F8DF 7044		ldr r7, [pc, #+68] ; 0x200003C3
3001E9E0  7038     		strb r0, [r7]

#103		 
#104			(* Network 10 *)
#105			LD		AZIONI.2 {R:10$0}
(*) UNDEF
3001E9E2  F8DF 7038		ldr r7, [pc, #+56] ; 0x200003BE
3001E9E6  8838     		ldrh r0, [r7]
3001E9E8  F3C0 0080		ubfx r0, r0, #2, #1

#106			ST		SEND_DATA {R:10$7}
(*) BOOL
3001E9EC  F8DF 707C		ldr r7, [pc, #+124] ; 0x38000200
3001E9F0  7038     		strb r0, [r7]

3001E9F2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E9F6  F8DD E000		ldr lr, [sp]
3001E9FA  B002     		add sp, sp, #8

3001E9FC  4770     		bx lr

3001EA00  00002710		; 0x00002710
3001EA04  200002EF		; 0x200002EF
3001EA08  200002F0		; 0x200002F0
3001EA0C  2000031C		; 0x2000031C
3001EA10  20000320		; 0x20000320
3001EA14  20000324		; 0x20000324
3001EA18  200003BD		; 0x200003BD
3001EA1C  200003BE		; 0x200003BE
3001EA20  200003C0		; 0x200003C0
3001EA24  200003C3		; 0x200003C3
3001EA28  200003C4		; 0x200003C4
3001EA2C  200003C8		; 0x200003C8
3001EA30  200003CC		; 0x200003CC
3001EA34  200003D0		; 0x200003D0
3001EA38  200003E0		; 0x200003E0
3001EA3C  2000040C		; 0x2000040C
3001EA40  20000410		; 0x20000410
3001EA44  20000414		; 0x20000414
3001EA48  20000415		; 0x20000415
3001EA4C  FFFFFFFF		; 0x2401E63D
3001EA50  FFFFFFFF		; 0x2401F060
3001EA54  FFFFFFFF		; 0x2401F062
3001EA58  FFFFFFFF		; 0x2401F064
3001EA5C  FFFFFFFF		; 0x2401F066
3001EA60  3001E5AC		; 0x3001E5AC
3001EA64  FFFFFFFF		; 0x38000000
3001EA68  FFFFFFFF		; 0x38000001
3001EA6C  FFFFFFFF		; 0x38000200
3001EA70  FFFFFFFF		; 0x38000204
3001EA74  FFFFFFFF		; 0x38000208
3001EA78  FFFFFFFF		; 0x3800020C
3001EA7C  FFFFFFFF		; 0x3800020D
3001EA80  447A0000		; 0x447A0000

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EA84  4770     		bx lr


*** OUTPUT:
3001EA86  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

3001EA88  B082     		sub sp, sp, #8
3001EA8A  F8CD E000		str lr, [sp]
3001EA8E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EA92  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EA96  F8DD E000		ldr lr, [sp]
3001EA9A  B002     		add sp, sp, #8

3001EA9C  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

3001EAB0  B082     		sub sp, sp, #8
3001EAB2  F8CD E000		str lr, [sp]
3001EAB6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
3001EABA  2000     		mov r0, #0 ; 0
3001EABC  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
3001EAC0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
3001EAC2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
3001EAC4  B088     		sub sp, sp, #32
3001EAC6  2700     		mov r7, #0 ; 0
3001EAC8  4639     		mov r1, r7
3001EACA  2700     		mov r7, #0 ; 0
3001EACC  463A     		mov r2, r7
3001EACE  2700     		mov r7, #0 ; 0
3001EAD0  463B     		mov r3, r7
3001EAD2  2700     		mov r7, #0 ; 0
3001EAD4  F8CD 7000		str r7, [sp]
3001EAD8  2700     		mov r7, #0 ; 0
3001EADA  F8CD 7004		str r7, [sp, #+4]
3001EADE  2700     		mov r7, #0 ; 0
3001EAE0  F8CD 7008		str r7, [sp, #+8]
3001EAE4  2700     		mov r7, #0 ; 0
3001EAE6  F8CD 700C		str r7, [sp, #+12]
3001EAEA  2700     		mov r7, #0 ; 0
3001EAEC  F8CD 7010		str r7, [sp, #+16]
3001EAF0  2700     		mov r7, #0 ; 0
3001EAF2  F8CD 7014		str r7, [sp, #+20]
3001EAF6  2700     		mov r7, #0 ; 0
3001EAF8  F8CD 7018		str r7, [sp, #+24]
3001EAFC  F8DF 4010		ldr r4, [pc, #+16] ; 0x8079085
3001EB00  F044 0401		orr r4, r4, #1
3001EB04  47A0     		blx r4
3001EB06  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
3001EB08  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
3001EB0C  7038     		strb r0, [r7]

3001EB0E  E005     		b #10

3001EB10  FFFFFFFF		; 0x08079085
3001EB14  200002A5		; 0x200002A5
3001EB18  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3001EB1C  2010     		mov r0, #16 ; 16
3001EB1E  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807FDA1
3001EB22  F044 0401		orr r4, r4, #1
3001EB26  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
3001EB28  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3001EB2C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3001EB2E  2000     		mov r0, #0 ; 0
3001EB30  2100     		mov r1, #0 ; 0
3001EB32  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807FDAD
3001EB36  F044 0401		orr r4, r4, #1
3001EB3A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3001EB3C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
3001EB40  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
3001EB42  2001     		mov r0, #1 ; 1
3001EB44  2100     		mov r1, #0 ; 0
3001EB46  F8DF 4098		ldr r4, [pc, #+152] ; 0x807FDAD
3001EB4A  F044 0401		orr r4, r4, #1
3001EB4E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
3001EB50  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
3001EB54  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
3001EB56  2002     		mov r0, #2 ; 2
3001EB58  2100     		mov r1, #0 ; 0
3001EB5A  F8DF 4084		ldr r4, [pc, #+132] ; 0x807FDAD
3001EB5E  F044 0401		orr r4, r4, #1
3001EB62  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
3001EB64  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
3001EB68  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3001EB6A  2003     		mov r0, #3 ; 3
3001EB6C  2100     		mov r1, #0 ; 0
3001EB6E  F8DF 4070		ldr r4, [pc, #+112] ; 0x807FDAD
3001EB72  F044 0401		orr r4, r4, #1
3001EB76  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
3001EB78  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3001EB7C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3001EB7E  2004     		mov r0, #4 ; 4
3001EB80  2100     		mov r1, #0 ; 0
3001EB82  F8DF 405C		ldr r4, [pc, #+92] ; 0x807FDAD
3001EB86  F044 0401		orr r4, r4, #1
3001EB8A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3001EB8C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
3001EB90  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
3001EB92  2005     		mov r0, #5 ; 5
3001EB94  2100     		mov r1, #0 ; 0
3001EB96  F8DF 4048		ldr r4, [pc, #+72] ; 0x807FDAD
3001EB9A  F044 0401		orr r4, r4, #1
3001EB9E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
3001EBA0  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
3001EBA4  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
3001EBA6  2006     		mov r0, #6 ; 6
3001EBA8  2100     		mov r1, #0 ; 0
3001EBAA  F8DF 4034		ldr r4, [pc, #+52] ; 0x807FDAD
3001EBAE  F044 0401		orr r4, r4, #1
3001EBB2  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
3001EBB4  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
3001EBB8  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
3001EBBA  2007     		mov r0, #7 ; 7
3001EBBC  2100     		mov r1, #0 ; 0
3001EBBE  F8DF 4020		ldr r4, [pc, #+32] ; 0x807FDAD
3001EBC2  F044 0401		orr r4, r4, #1
3001EBC6  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
3001EBC8  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
3001EBCC  7038     		strb r0, [r7]

3001EBCE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EBD2  F8DD E000		ldr lr, [sp]
3001EBD6  B002     		add sp, sp, #8

3001EBD8  4770     		bx lr

3001EBDC  FFFFFFFF		; 0x0807FDA1
3001EBE0  FFFFFFFF		; 0x0807FDAD
3001EBE4  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EBE8  4770     		bx lr


*** OUTPUT:
3001EBEA  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3001EBEC  B082     		sub sp, sp, #8
3001EBEE  F8CD E000		str lr, [sp]
3001EBF2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EBF6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EBFA  F8DD E000		ldr lr, [sp]
3001EBFE  B002     		add sp, sp, #8

3001EC00  4770     		bx lr

**************************************************
	List program: MbMBoot
**************************************************

PROGRAM MbMBoot

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
memory_return : BOOL;
dbAddrArr_0 : ARRAY[0..3] OF DWORD;
	END_VAR

        VAR CONSTANT
msg_reg_types_info_0 : ARRAY[0..4] OF BYTE := [4, 1, 1, 1, 1];
dbElemsArr_0 : ARRAY[0..11] OF UINT := [100, 0, 0, 100, 2, 0, 100, 4, 0, 100, 6, 0];
	END_VAR

END_PROGRAM

3001EC10  B082     		sub sp, sp, #8
3001EC12  F8CD E000		str lr, [sp]
3001EC16  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMBoot}
#1		(*$WAITSWITCH$*)
#2		
#3			(* memory_return := sysMbMRtu_MemoryMapping( TO_DWORD(ADR(sysMbMRtuNetList[0])), 1, TO_DWORD(ADR($$mbm_msg_queue[0])), 1, 100); *)
#4			ADR		$$mbm_msg_queue[0]	{LNXT:2|3|-1}
(*) UDINT
3001EC1A  F8DF 0184		ldr r0, [pc, #+388] ; 0x20000338

#5			TO_DWORD	{LNXT:2|3|-1}
(-) @BYTE
#6			ST		$$TMP3	{LNXT:2|3|-1}
(*) DWORD
3001EC1E  F8DF 718C		ldr r7, [pc, #+396] ; 0x200003FC
3001EC22  6038     		str r0, [r7]

#7			ADR		sysMbMRtuNetList[0]	{LNXT:2|3|-1}
(*) DWORD
3001EC24  F8DF 017C		ldr r0, [pc, #+380] ; 0x2000037C

#8			TO_DWORD	{LNXT:2|3|-1}
(-) @DWORD
#9			sysMbMRtu_MemoryMapping		1, $$TMP3, 1, 100	{LNXT:2|3|-1}
(*) DWORD
3001EC28  B082     		sub sp, sp, #8
3001EC2A  2701     		mov r7, #1 ; 1
3001EC2C  4639     		mov r1, r7
3001EC2E  F8DF 717C		ldr r7, [pc, #+380] ; 0x200003FC
3001EC32  683A     		ldr r2, [r7]
3001EC34  2701     		mov r7, #1 ; 1
3001EC36  463B     		mov r3, r7
3001EC38  2764     		mov r7, #100 ; 100
3001EC3A  F8CD 7000		str r7, [sp]
3001EC3E  F8DF 414C		ldr r4, [pc, #+332] ; 0x8081F7D
3001EC42  F044 0401		orr r4, r4, #1
3001EC46  47A0     		blx r4
3001EC48  B002     		add sp, sp, #8

#10			ST		memory_return	{LNXT:2|3|-1}
(*) BOOL
3001EC4A  F8DF 7144		ldr r7, [pc, #+324] ; 0x200002AC
3001EC4E  7038     		strb r0, [r7]

#11		
#12		
#13			(* IF memory_return *)
#14			LD		memory_return	{LNXT:3|-1|-1}
(*) UNDEF
3001EC50  F8DF 713C		ldr r7, [pc, #+316] ; 0x200002AC
3001EC54  7838     		ldrb r0, [r7]

#15			NOT	{LNXT:3|-1|-1}
(*) BOOL
3001EC56  2800     		cmp r0, #0
3001EC58  BF08 2001		eqmov r0, #1
3001EC5C  BF18 2000		nemov r0, #0

#16			JMPCN	$label0	{LNXT:3|4|7}
(-) BOOL
3001EC60  2800     		cmp r0, #0
3001EC62  D002     		beq #4 ; 0x3001EC6A


#17		
#18			(* THEN *)
#19		
#20				(* RETURN *)
#21				RET
#22		
(-) BOOL
3001EC66  E083     		b #262 ; 0x3001ED70


#23		$label0:
#24			(* END_IF *)
#25		
#26			(* openChannel_return := sysMbMRtu_OpenChn2(0, MbBaudrate#MbBaud_9600, MbMode#MbMode_8E1, 1, 2, 0); *)
#27			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#28			sysMbMRtu_OpenChn2		MbBaudrate#MbBaud_9600, MbMode#MbMode_8E1, 1, 2, 0	{LNXT:7|8|-1}
(*) USINT
3001EC6A  B082     		sub sp, sp, #8
3001EC6C  2000     		mov r0, #0 ; 0
3001EC6E  F44F 5116		mov r1, #9600 ; 9600
3001EC72  2201     		mov r2, #1 ; 1
3001EC74  2301     		mov r3, #1 ; 1
3001EC76  2702     		mov r7, #2 ; 2
3001EC78  F8CD 7000		str r7, [sp]
3001EC7C  2700     		mov r7, #0 ; 0
3001EC7E  F8CD 7004		str r7, [sp, #+4]
3001EC82  F8DF 40F8		ldr r4, [pc, #+248] ; 0x80812B5
3001EC86  F044 0401		orr r4, r4, #1
3001EC8A  47A0     		blx r4
3001EC8C  B002     		add sp, sp, #8

#29			ST		openChannel_return	{LNXT:7|8|-1}
(*) USINT
3001EC8E  F8DF 7104		ldr r7, [pc, #+260] ; 0x200002AD
3001EC92  7038     		strb r0, [r7]

#30		
#31		
#32			(* IF openChannel_return = 16#FF *)
#33			LD		openChannel_return	{LNXT:8|-1|-1}
(*) UNDEF
3001EC94  F8DF 70FC		ldr r7, [pc, #+252] ; 0x200002AD
3001EC98  7838     		ldrb r0, [r7]

#34			EQ		16#FF	{LNXT:8|-1|-1}
(*) USINT
3001EC9A  28FF     		cmp r0, #255
3001EC9C  BF18 2000		nemov r0, #0
3001ECA0  BF08 2001		eqmov r0, #1

#35			JMPCN	$label1	{LNXT:8|9|12}
(-) BOOL
3001ECA4  2800     		cmp r0, #0
3001ECA6  D002     		beq #4 ; 0x3001ECAE


#36		
#37			(* THEN *)
#38		
#39				(* RETURN *)
#40				RET
#41		
(-) BOOL
3001ECAA  E061     		b #194 ; 0x3001ED70


#42		$label1:
#43			(* END_IF *)
#44		
#45			(* slave_return := sysMbMRtu_SlaveAddToNetList2(openChannel_return,1,100,1,0); *)
#46			LDP0		openChannel_return	{LNXT:12|13|-1}
(-) BOOL
#47			sysMbMRtu_SlaveAddToNetList2		1, 100, 1, 0	{LNXT:12|13|-1}
(*) USINT
3001ECAE  B082     		sub sp, sp, #8
3001ECB0  F8DF 70E0		ldr r7, [pc, #+224] ; 0x200002AD
3001ECB4  7838     		ldrb r0, [r7]
3001ECB6  2101     		mov r1, #1 ; 1
3001ECB8  2764     		mov r7, #100 ; 100
3001ECBA  463A     		mov r2, r7
3001ECBC  2701     		mov r7, #1 ; 1
3001ECBE  463B     		mov r3, r7
3001ECC0  2700     		mov r7, #0 ; 0
3001ECC2  F8CD 7000		str r7, [sp]
3001ECC6  F8DF 40B8		ldr r4, [pc, #+184] ; 0x80813C5
3001ECCA  F044 0401		orr r4, r4, #1
3001ECCE  47A0     		blx r4
3001ECD0  B002     		add sp, sp, #8

#48			ST		slave_return	{LNXT:12|13|-1}
(*) USINT
3001ECD2  F8DF 70C8		ldr r7, [pc, #+200] ; 0x20000337
3001ECD6  7038     		strb r0, [r7]

#49		
#50			(* slaveMsg_return := sysMbMRtu_NewSlaveMessage3(openChannel_return, 1, 3, 1, 4, ADR(dbElemsArr_0), ADR(dbAddrArr_0), 0, 1000, NULL, ADR(msg_reg_types_info_0)); *)
#51			ADR		dbElemsArr_0	{LNXT:13|14|-1}
(*) USINT
3001ECD8  F8DF 00E0		ldr r0, [pc, #+224] ; 0x3001E4E0

#52			ST		$$TMP4	{LNXT:13|14|-1}
(*) @UINT
3001ECDC  F8DF 70D0		ldr r7, [pc, #+208] ; 0x20000400
3001ECE0  6038     		str r0, [r7]

#53			ADR		dbAddrArr_0	{LNXT:13|14|-1}
(*) @UINT
3001ECE2  F8DF 00C4		ldr r0, [pc, #+196] ; 0x200003A4

#54			ST		$$TMP5	{LNXT:13|14|-1}
(*) @DWORD
3001ECE6  F8DF 70CC		ldr r7, [pc, #+204] ; 0x20000404
3001ECEA  6038     		str r0, [r7]

#55			ADR		msg_reg_types_info_0	{LNXT:13|14|-1}
(*) @DWORD
3001ECEC  F8DF 00D0		ldr r0, [pc, #+208] ; 0x3001E4F8

#56			ST		$$TMP6	{LNXT:13|14|-1}
(*) @BYTE
3001ECF0  F8DF 70C4		ldr r7, [pc, #+196] ; 0x20000408
3001ECF4  6038     		str r0, [r7]

#57			LDP0		openChannel_return	{LNXT:13|14|-1}
(-) @BYTE
#58			sysMbMRtu_NewSlaveMessage3		1, 3, 1, 4, $$TMP4, $$TMP5, 0, 1000, NULL, $$TMP6	{LNXT:13|14|-1}
(*) USINT
3001ECF6  B088     		sub sp, sp, #32
3001ECF8  F8DF 7098		ldr r7, [pc, #+152] ; 0x200002AD
3001ECFC  7838     		ldrb r0, [r7]
3001ECFE  2101     		mov r1, #1 ; 1
3001ED00  2703     		mov r7, #3 ; 3
3001ED02  463A     		mov r2, r7
3001ED04  2701     		mov r7, #1 ; 1
3001ED06  463B     		mov r3, r7
3001ED08  2704     		mov r7, #4 ; 4
3001ED0A  F8CD 7000		str r7, [sp]
3001ED0E  F8DF 70A0		ldr r7, [pc, #+160] ; 0x20000400
3001ED12  683F     		ldr r7, [r7]
3001ED14  F8CD 7004		str r7, [sp, #+4]
3001ED18  F8DF 7098		ldr r7, [pc, #+152] ; 0x20000404
3001ED1C  683F     		ldr r7, [r7]
3001ED1E  F8CD 7008		str r7, [sp, #+8]
3001ED22  2700     		mov r7, #0 ; 0
3001ED24  F8CD 700C		str r7, [sp, #+12]
3001ED28  F44F 777A		mov r7, #1000 ; 1000
3001ED2C  F8CD 7010		str r7, [sp, #+16]
3001ED30  2700     		mov r7, #0 ; 0
3001ED32  F8CD 7014		str r7, [sp, #+20]
3001ED36  F8DF 7080		ldr r7, [pc, #+128] ; 0x20000408
3001ED3A  683F     		ldr r7, [r7]
3001ED3C  F8CD 7018		str r7, [sp, #+24]
3001ED40  F8DF 4044		ldr r4, [pc, #+68] ; 0x8081945
3001ED44  F044 0401		orr r4, r4, #1
3001ED48  47A0     		blx r4
3001ED4A  B008     		add sp, sp, #32

#59			ST		slaveMsg_return	{LNXT:13|14|-1}
(*) BOOL
3001ED4C  F8DF 7048		ldr r7, [pc, #+72] ; 0x20000336
3001ED50  7038     		strb r0, [r7]

#60		
#61		
#62			(* IF slaveMsg_return *)
#63			LD		slaveMsg_return	{LNXT:14|-1|-1}
(*) UNDEF
3001ED52  F8DF 7044		ldr r7, [pc, #+68] ; 0x20000336
3001ED56  7838     		ldrb r0, [r7]

#64			JMPCN	$label2	{LNXT:14|15|2}
(-) BOOL
3001ED58  2800     		cmp r0, #0
3001ED5A  D009     		beq #18 ; 0x3001ED70


#65		
#66			(* THEN *)
#67		
#68				(* slaveMsg_return := sysMbMRtu_MsgConfigCompleted(TRUE); *)
#69				LDP0		TRUE	{LNXT:15|2|-1}
(-) BOOL
#70				sysMbMRtu_MsgConfigCompleted	{LNXT:15|2|-1}
(*) BOOL
3001ED5E  2001     		mov r0, #1 ; 1
3001ED60  F8DF 4020		ldr r4, [pc, #+32] ; 0x80815D1
3001ED64  F044 0401		orr r4, r4, #1
3001ED68  47A0     		blx r4

#71				ST		slaveMsg_return	{LNXT:15|2|-1}
(*) BOOL
3001ED6A  F8DF 702C		ldr r7, [pc, #+44] ; 0x20000336
3001ED6E  7038     		strb r0, [r7]

3001ED70  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001ED74  F8DD E000		ldr lr, [sp]
3001ED78  B002     		add sp, sp, #8

3001ED7A  4770     		bx lr

3001ED7C  FFFFFFFF		; 0x080812B5
3001ED80  FFFFFFFF		; 0x080813C5
3001ED84  FFFFFFFF		; 0x080815D1
3001ED88  FFFFFFFF		; 0x08081945
3001ED8C  FFFFFFFF		; 0x08081F7D
3001ED90  200002AC		; 0x200002AC
3001ED94  200002AD		; 0x200002AD
3001ED98  20000336		; 0x20000336
3001ED9C  20000337		; 0x20000337
3001EDA0  20000338		; 0x20000338
3001EDA4  2000037C		; 0x2000037C
3001EDA8  200003A4		; 0x200003A4
3001EDAC  200003FC		; 0x200003FC
3001EDB0  20000400		; 0x20000400
3001EDB4  20000404		; 0x20000404
3001EDB8  20000408		; 0x20000408
3001EDBC  3001E4E0		; 0x3001E4E0
3001EDC0  3001E4F8		; 0x3001E4F8

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EDC4  4770     		bx lr


*** OUTPUT:
3001EDC6  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

3001EDC8  B082     		sub sp, sp, #8
3001EDCA  F8CD E000		str lr, [sp]
3001EDCE  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EDD2  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EDD6  F8DD E000		ldr lr, [sp]
3001EDDA  B002     		add sp, sp, #8

3001EDDC  4770     		bx lr

**************************************************
	List program: MbMPrm
**************************************************

PROGRAM MbMPrm

        VAR
slaveparam_return : BOOL;
	END_VAR

END_PROGRAM

3001EDF0  B082     		sub sp, sp, #8
3001EDF2  F8CD E000		str lr, [sp]
3001EDF6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMPrm}
#1		(*$WAITSWITCH$*)
#2		
#3			(* slaveparam_return := sysMbMRtu_SlavePrmInteger( sysMbMRtuStatus.chn, 1, 0, 401, 1, 0, 200 ); *)
#4			LDP0		sysMbMRtuStatus.chn	{LNXT:2|2|-1}
(-) UDINT
#5			sysMbMRtu_SlavePrmInteger		1, 0, 401, 1, 0, 200	{LNXT:2|2|-1}
(*) USINT
3001EDFA  B084     		sub sp, sp, #16
3001EDFC  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401F97D
3001EE00  7838     		ldrb r0, [r7]
3001EE02  2101     		mov r1, #1 ; 1
3001EE04  2700     		mov r7, #0 ; 0
3001EE06  463A     		mov r2, r7
3001EE08  F8DF 7034		ldr r7, [pc, #+52] ; 0x191
3001EE0C  463B     		mov r3, r7
3001EE0E  2701     		mov r7, #1 ; 1
3001EE10  F8CD 7000		str r7, [sp]
3001EE14  2700     		mov r7, #0 ; 0
3001EE16  F8CD 7004		str r7, [sp, #+4]
3001EE1A  27C8     		mov r7, #200 ; 200
3001EE1C  F8CD 7008		str r7, [sp, #+8]
3001EE20  F8DF 4020		ldr r4, [pc, #+32] ; 0x80815E5
3001EE24  F044 0401		orr r4, r4, #1
3001EE28  47A0     		blx r4
3001EE2A  B004     		add sp, sp, #16

#6			ST		slaveparam_return	{LNXT:2|2|-1}
(*) BOOL
3001EE2C  F8DF 7018		ldr r7, [pc, #+24] ; 0x200003BC
3001EE30  7038     		strb r0, [r7]

3001EE32  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EE36  F8DD E000		ldr lr, [sp]
3001EE3A  B002     		add sp, sp, #8

3001EE3C  4770     		bx lr

3001EE40  00000191		; 0x00000191
3001EE44  FFFFFFFF		; 0x080815E5
3001EE48  200003BC		; 0x200003BC
3001EE4C  FFFFFFFF		; 0x2401F97D

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EE50  4770     		bx lr


*** OUTPUT:
3001EE52  4770     		bx lr



**************************************************
	Task MbMPrm init code
**************************************************

3001EE54  B082     		sub sp, sp, #8
3001EE56  F8CD E000		str lr, [sp]
3001EE5A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EE5E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EE62  F8DD E000		ldr lr, [sp]
3001EE66  B002     		add sp, sp, #8

3001EE68  4770     		bx lr



**************************************************
	Global init code
**************************************************

3001EE80  B082     		sub sp, sp, #8
3001EE82  F8CD E000		str lr, [sp]
3001EE86  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EE8A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EE8E  F8DD E000		ldr lr, [sp]
3001EE92  B002     		add sp, sp, #8

3001EE94  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

3001EE96  B082     		sub sp, sp, #8
3001EE98  F8CD E000		str lr, [sp]
3001EE9C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EEA0  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EEA4  F8DD E000		ldr lr, [sp]
3001EEA8  B002     		add sp, sp, #8

3001EEAA  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3001EEAC  B082     		sub sp, sp, #8
3001EEAE  F8CD E000		str lr, [sp]
3001EEB2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EEB6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EEBA  F8DD E000		ldr lr, [sp]
3001EEBE  B002     		add sp, sp, #8

3001EEC0  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		000000003001E400h
End code area:            		000000003001F180h
Code size:                		00000D80h

Start local data area:    		0000000020000298h
End local data area:      		0000000020000416h
Local data size:          		0000017Eh

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                4E7D8CB5
DEBUG MEMO ID:                          3001E6EE
FULL MEMO ID:                           0000FB23
********************************************

***********************************************************************
*
*	CODE GENERATION LISTING FOR: Mqtt
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
3001E4F0  FB90 F3F1		sdiv r3, r0, r1
3001E4F4  4359     		mul r1, r1, r3
3001E4F6  EBC1 0000		rsb r0, r1, r0
3001E4FA  4770     		bx lr

$$MOD_U:
3001E4FC  FBB0 F3F1		udiv r3, r0, r1
3001E500  4359     		mul r1, r1, r3
3001E502  EBC1 0000		rsb r0, r1, r0
3001E506  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E508  E92D 4040		stmdb sp!, { r6, lr }
3001E50C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E50E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
3001E510  2800     		cmp r0, #0
3001E512  D130     		bne #96 ; 0x3001E576


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
3001E516  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
3001E518  2800     		cmp r0, #0
3001E51A  D031     		beq #98 ; 0x3001E580


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E51E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E520  2800     		cmp r0, #0
3001E522  BF18 2000		nemov r0, #0
3001E526  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E52A  2800     		cmp r0, #0
3001E52C  D004     		beq #8 ; 0x3001E538


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E530  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D580
3001E534  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E536  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E538  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D580
3001E53C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E53E  6837     		ldr r7, [r6]
3001E540  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E542  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E544  68B7     		ldr r7, [r6, #8]
3001E546  42B8     		cmp r0, r7
3001E548  BF38 2000		lomov r0, #0
3001E54C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
3001E550  B082     		sub sp, sp, #8
3001E552  F8CD 0000		str r0, [sp]
3001E556  2800     		cmp r0, #0
3001E558  BF08 2001		eqmov r0, #1
3001E55C  BF18 2000		nemov r0, #0
3001E560  7330     		strb r0, [r6, #12]
3001E562  F8DD 0000		ldr r0, [sp]
3001E566  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
3001E568  2800     		cmp r0, #0
3001E56A  D009     		beq #18 ; 0x3001E580


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E56E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E570  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E572  E005     		b #10 ; 0x3001E580


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E576  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E578  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E57A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3001E57C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3001E57E  7330     		strb r0, [r6, #12]

3001E580  E8BD 4040		ldmia sp!, { r6, lr }

3001E584  4770     		bx lr

3001E588  FFFFFFFF		; 0x2401D580


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3001E58C  E92D 4040		stmdb sp!, { r6, lr }
3001E590  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3001E592  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
3001E594  2800     		cmp r0, #0
3001E596  D025     		beq #74 ; 0x3001E5E4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3001E59A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3001E59C  2800     		cmp r0, #0
3001E59E  D126     		bne #76 ; 0x3001E5EE


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3001E5A2  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
3001E5A4  2800     		cmp r0, #0
3001E5A6  BF18 2000		nemov r0, #0
3001E5AA  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3001E5AE  2800     		cmp r0, #0
3001E5B0  D004     		beq #8 ; 0x3001E5BC


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
3001E5B4  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D580
3001E5B8  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
3001E5BA  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
3001E5BC  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D580
3001E5C0  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3001E5C2  6837     		ldr r7, [r6]
3001E5C4  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
3001E5C6  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
3001E5C8  68B7     		ldr r7, [r6, #8]
3001E5CA  42B8     		cmp r0, r7
3001E5CC  BF38 2000		lomov r0, #0
3001E5D0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
3001E5D4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
3001E5D6  2800     		cmp r0, #0
3001E5D8  D009     		beq #18 ; 0x3001E5EE


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3001E5DC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
3001E5DE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
3001E5E0  E005     		b #10 ; 0x3001E5EE


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
3001E5E4  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
3001E5E6  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3001E5E8  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
3001E5EA  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
3001E5EC  7330     		strb r0, [r6, #12]

3001E5EE  E8BD 4040		ldmia sp!, { r6, lr }

3001E5F2  4770     		bx lr

3001E5F4  FFFFFFFF		; 0x2401D580


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

3001E5F8  E92D 4040		stmdb sp!, { r6, lr }
3001E5FC  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
3001E5FE  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
3001E602  5DF0     		ldrb r0, [r6, +r7]
3001E604  2800     		cmp r0, #0
3001E606  BF08 2001		eqmov r0, #1
3001E60A  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3001E60E  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
3001E610  6AF0     		ldr r0, [r6, #44]
3001E612  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
3001E614  E92D 0021		stmdb sp!, { r0, r5 }
3001E618  4635     		mov r5, r6
3001E61A  467C     		mov r4, pc
3001E61C  3C92     		sub r4, r4, #+0x92 ; 0x3001E58C
3001E61E  F044 0401		orr r4, r4, #1
3001E622  47A0     		blx r4
3001E624  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
3001E628  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3001E62A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3001E62C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3001E62E  6AF0     		ldr r0, [r6, #44]
3001E630  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
3001E632  E92D 0021		stmdb sp!, { r0, r5 }
3001E636  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3001E63A  19F5     		add r5, r6, r7
3001E63C  F8DF 4028		ldr r4, [pc, #+40] ; 0x3001E508
3001E640  F044 0401		orr r4, r4, #1
3001E644  47A0     		blx r4
3001E646  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3001E64A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3001E64E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
3001E650  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
3001E654  55F0     		strb r0, [r6, +r7]

3001E656  E8BD 4040		ldmia sp!, { r6, lr }

3001E65A  4770     		bx lr

3001E65C  00000014		; 0x00000014
3001E660  00000020		; 0x00000020
3001E664  00000030		; 0x00000030
3001E668  3001E508		; 0x3001E508


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List program: MqttHandeler
**************************************************

PROGRAM MqttHandeler

        VAR
Clock_1Hz : Clock_Gen;
Fail_Counter : UDINT;
Send_Counter : UDINT;
	END_VAR

END_PROGRAM

3001E670  B082     		sub sp, sp, #8
3001E672  F8CD E000		str lr, [sp]
3001E676  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:MqttHandeler}
#1		 
#2		 	(* P/N contacts management *)
#3			LD		SEND_KO
(*) UNDEF
3001E67A  F8DF 71B8		ldr r7, [pc, #+440] ; 0x38000002
3001E67E  7838     		ldrb r0, [r7]

#4			ANDN	$$MEMPC$SEND_KO
(*) BOOL
3001E680  F8DF 7194		ldr r7, [pc, #+404] ; 0x20000330
3001E684  783F     		ldrb r7, [r7]
3001E686  2F00     		cmp r7, #0
3001E688  BF08 2701		eqmov r7, #1
3001E68C  BF18 2700		nemov r7, #0
3001E690  4038     		and r0, r0, r7

#5			ST		$$PC$SEND_KO
(*) BOOL
3001E692  F8DF 7188		ldr r7, [pc, #+392] ; 0x20000331
3001E696  7038     		strb r0, [r7]

#6			LD		SEND_KO
(*) UNDEF
3001E698  F8DF 7198		ldr r7, [pc, #+408] ; 0x38000002
3001E69C  7838     		ldrb r0, [r7]

#7			ST		$$MEMPC$SEND_KO
(*) BOOL
3001E69E  F8DF 7178		ldr r7, [pc, #+376] ; 0x20000330
3001E6A2  7038     		strb r0, [r7]

#8			LD		SEND_OK
(*) UNDEF
3001E6A4  F8DF 7188		ldr r7, [pc, #+392] ; 0x38000001
3001E6A8  7838     		ldrb r0, [r7]

#9			ANDN	$$MEMPC$SEND_OK
(*) BOOL
3001E6AA  F8DF 7174		ldr r7, [pc, #+372] ; 0x20000332
3001E6AE  783F     		ldrb r7, [r7]
3001E6B0  2F00     		cmp r7, #0
3001E6B2  BF08 2701		eqmov r7, #1
3001E6B6  BF18 2700		nemov r7, #0
3001E6BA  4038     		and r0, r0, r7

#10			ST		$$PC$SEND_OK
(*) BOOL
3001E6BC  F8DF 7164		ldr r7, [pc, #+356] ; 0x20000333
3001E6C0  7038     		strb r0, [r7]

#11			LD		SEND_OK
(*) UNDEF
3001E6C2  F8DF 716C		ldr r7, [pc, #+364] ; 0x38000001
3001E6C6  7838     		ldrb r0, [r7]

#12			ST		$$MEMPC$SEND_OK
(*) BOOL
3001E6C8  F8DF 7154		ldr r7, [pc, #+340] ; 0x20000332
3001E6CC  7038     		strb r0, [r7]

#13		 
#14			(* Network 1 *)
#15			MOVE		500,CLOCK_1HZ.TEMPO {R:1$2}
(*) BOOL
3001E6CE  F44F 70FA		mov r0, #500 ; 500
3001E6D2  F8DF 7130		ldr r7, [pc, #+304] ; 0x2000031C
3001E6D6  6038     		str r0, [r7]

#16			CAL		CLOCK_1HZ {R:1$2}
(*) UDINT
3001E6D8  E92D 0021		stmdb sp!, { r0, r5 }
3001E6DC  F8DF 5120		ldr r5, [pc, #+288] ; 0x200002F0
3001E6E0  467C     		mov r4, pc
3001E6E2  3CEC     		sub r4, r4, #+0xEC ; 0x3001E5F8
3001E6E4  F044 0401		orr r4, r4, #1
3001E6E8  47A0     		blx r4
3001E6EA  E8BD 0021		ldmia sp!, { r0, r5 }

#17			MOVE		CLOCK_1HZ.OUT,LEDGREEN {R:1$2}
(*) UDINT
3001E6EE  F8DF 7118		ldr r7, [pc, #+280] ; 0x20000320
3001E6F2  7838     		ldrb r0, [r7]
3001E6F4  F8DF 7130		ldr r7, [pc, #+304] ; 0x2401E645
3001E6F8  7038     		strb r0, [r7]

#18			LD		TRUE
(-) UNDEF
3001E6FA  2001     		mov r0, #1 ; 1

#19		 
#20			(* Network 2 *)
#21			LD		SENDMQTT {R:2$0}
(*) UNDEF
3001E6FC  F8DF 70F0		ldr r7, [pc, #+240] ; 0x200002AF
3001E700  7838     		ldrb r0, [r7]

#22			AND		MQTT_OK {R:2$12}
(*) BOOL
3001E702  F8DF 7128		ldr r7, [pc, #+296] ; 0x38000000
3001E706  783F     		ldrb r7, [r7]
3001E708  4038     		and r0, r0, r7

#23			ST		$$VAR$1
(*) BOOL
3001E70A  F8DF 70F0		ldr r7, [pc, #+240] ; 0x200002EF
3001E70E  7038     		strb r0, [r7]

#24			JMPCN	$$LAB$1
(-) BOOL
3001E710  2800     		cmp r0, #0
3001E712  D008     		beq #16 ; 0x3001E726


#25			LD		PLC_TEMP {R:2$3}
(*) UNDEF
3001E716  F8DF 70DC		ldr r7, [pc, #+220] ; 0x200002E4
3001E71A  ED97 0A00		flds s0, [r7]

#26			ST		TEMPERATURA {R:2$4}
(*) REAL
3001E71E  F8DF 711C		ldr r7, [pc, #+284] ; 0x38000204
3001E722  ED87 0A00		fsts s0, [r7]

#27		$$LAB$1:
#28			LD		$$VAR$1
(*) UNDEF
3001E726  F8DF 70D4		ldr r7, [pc, #+212] ; 0x200002EF
3001E72A  7838     		ldrb r0, [r7]

#29			ST		$$VAR$2
(*) BOOL
3001E72C  F8DF 70DC		ldr r7, [pc, #+220] ; 0x20000324
3001E730  7038     		strb r0, [r7]

#30			JMPCN	$$LAB$2
(-) BOOL
3001E732  2800     		cmp r0, #0
3001E734  D008     		beq #16 ; 0x3001E748


#31			LD		PLC_HUM {R:2$7}
(*) UNDEF
3001E738  F8DF 70BC		ldr r7, [pc, #+188] ; 0x200002E8
3001E73C  ED97 0A00		flds s0, [r7]

#32			ST		UMIDITA {R:2$8}
(*) REAL
3001E740  F8DF 70FC		ldr r7, [pc, #+252] ; 0x38000208
3001E744  ED87 0A00		fsts s0, [r7]

#33		$$LAB$2:
#34			LD		$$VAR$2
(*) UNDEF
3001E748  F8DF 70C0		ldr r7, [pc, #+192] ; 0x20000324
3001E74C  7838     		ldrb r0, [r7]

#35			ST		SEND_DATA {R:2$9}
(*) BOOL
3001E74E  F8DF 70E8		ldr r7, [pc, #+232] ; 0x38000200
3001E752  7038     		strb r0, [r7]

#36		 
#37			(* Network 3 *)
#38			LD		$$PC$SEND_KO
(*) UNDEF
3001E754  F8DF 70C4		ldr r7, [pc, #+196] ; 0x20000331
3001E758  7838     		ldrb r0, [r7]

#39			ST		$$VAR$1
(*) BOOL
3001E75A  F8DF 70A0		ldr r7, [pc, #+160] ; 0x200002EF
3001E75E  7038     		strb r0, [r7]

#40			JMPCN	$$LAB$3
(-) BOOL
3001E760  2800     		cmp r0, #0
3001E762  D008     		beq #16 ; 0x3001E776


#41			LD		1 {R:3$8}
(-) UNDEF
3001E766  2001     		mov r0, #1 ; 1

#42			ADD		FAIL_COUNTER {R:3$6}
(*) USINT
3001E768  F8DF 70A4		ldr r7, [pc, #+164] ; 0x20000328
3001E76C  683F     		ldr r7, [r7]
3001E76E  19C0     		add r0, r0, r7

#43			ST		FAIL_COUNTER {R:3$7}
(*) UDINT
3001E770  F8DF 709C		ldr r7, [pc, #+156] ; 0x20000328
3001E774  6038     		str r0, [r7]

#44		$$LAB$3:
#45			LD		$$VAR$1
(*) UNDEF
3001E776  F8DF 7084		ldr r7, [pc, #+132] ; 0x200002EF
3001E77A  7838     		ldrb r0, [r7]

#46		 
#47			(* Network 4 *)
#48			LD		$$PC$SEND_OK
(*) UNDEF
3001E77C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x20000333
3001E780  7838     		ldrb r0, [r7]

#49			ST		$$VAR$1
(*) BOOL
3001E782  F8DF 7078		ldr r7, [pc, #+120] ; 0x200002EF
3001E786  7038     		strb r0, [r7]

#50			JMPCN	$$LAB$4
(-) BOOL
3001E788  2800     		cmp r0, #0
3001E78A  D008     		beq #16 ; 0x3001E79E


#51			LD		1 {R:4$8}
(-) UNDEF
3001E78E  2001     		mov r0, #1 ; 1

#52			ADD		SEND_COUNTER {R:4$6}
(*) USINT
3001E790  F8DF 7080		ldr r7, [pc, #+128] ; 0x2000032C
3001E794  683F     		ldr r7, [r7]
3001E796  19C0     		add r0, r0, r7

#53			ST		SEND_COUNTER {R:4$7}
(*) UDINT
3001E798  F8DF 7078		ldr r7, [pc, #+120] ; 0x2000032C
3001E79C  6038     		str r0, [r7]

#54		$$LAB$4:
#55			LD		$$VAR$1
(*) UNDEF
3001E79E  F8DF 705C		ldr r7, [pc, #+92] ; 0x200002EF
3001E7A2  7838     		ldrb r0, [r7]

#56		 
#57			(* Network 5 *)
#58			LD		SEND_OK {R:5$0}
(*) UNDEF
3001E7A4  F8DF 7088		ldr r7, [pc, #+136] ; 0x38000001
3001E7A8  7838     		ldrb r0, [r7]

#59			OR		SEND_KO {R:5$2}
(*) BOOL
3001E7AA  F8DF 7088		ldr r7, [pc, #+136] ; 0x38000002
3001E7AE  783F     		ldrb r7, [r7]
3001E7B0  4338     		orr r0, r0, r7

#60			ORN		MQTT_OK {R:5$4}
(*) BOOL
3001E7B2  F8DF 7078		ldr r7, [pc, #+120] ; 0x38000000
3001E7B6  783F     		ldrb r7, [r7]
3001E7B8  2F00     		cmp r7, #0
3001E7BA  BF08 2701		eqmov r7, #1
3001E7BE  BF18 2700		nemov r7, #0
3001E7C2  4338     		orr r0, r0, r7

#61			AND		SENDMQTT {R:5$5}
(*) BOOL
3001E7C4  F8DF 7028		ldr r7, [pc, #+40] ; 0x200002AF
3001E7C8  783F     		ldrb r7, [r7]
3001E7CA  4038     		and r0, r0, r7

#62			R		SENDMQTT {R:5$1}
(*) BOOL
3001E7CC  2800     		cmp r0, #0
3001E7CE  D009     		beq #0x000012
3001E7D0  B082     		sub sp, sp, #8
3001E7D2  F8CD 0000		str r0, [sp]
3001E7D6  2000     		mov r0, #0
3001E7D8  F8DF 7014		ldr r7, [pc, #+20] ; 0x200002AF
3001E7DC  7038     		strb r0, [r7]
3001E7DE  F8DD 0000		ldr r0, [sp]
3001E7E2  B002     		add sp, sp, #8

3001E7E4  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E7E8  F8DD E000		ldr lr, [sp]
3001E7EC  B002     		add sp, sp, #8

3001E7EE  4770     		bx lr

3001E7F0  200002AF		; 0x200002AF
3001E7F4  200002E4		; 0x200002E4
3001E7F8  200002E8		; 0x200002E8
3001E7FC  200002EF		; 0x200002EF
3001E800  200002F0		; 0x200002F0
3001E804  2000031C		; 0x2000031C
3001E808  20000320		; 0x20000320
3001E80C  20000324		; 0x20000324
3001E810  20000328		; 0x20000328
3001E814  2000032C		; 0x2000032C
3001E818  20000330		; 0x20000330
3001E81C  20000331		; 0x20000331
3001E820  20000332		; 0x20000332
3001E824  20000333		; 0x20000333
3001E828  FFFFFFFF		; 0x2401E645
3001E82C  FFFFFFFF		; 0x38000000
3001E830  FFFFFFFF		; 0x38000001
3001E834  FFFFFFFF		; 0x38000002
3001E838  FFFFFFFF		; 0x38000200
3001E83C  FFFFFFFF		; 0x38000204
3001E840  FFFFFFFF		; 0x38000208

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001E844  4770     		bx lr


*** OUTPUT:
3001E846  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

3001E848  B082     		sub sp, sp, #8
3001E84A  F8CD E000		str lr, [sp]
3001E84E  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

Var init: V::MQTTHANDELER.$$PC$SEND_KO = 1
3001E852  F8DF 0020		ldr r0, [pc, #+32] ; 0x1
3001E856  F8DF 7020		ldr r7, [pc, #+32] ; 0x20000331
3001E85A  7038     		strb r0, [r7]

Var init: V::MQTTHANDELER.$$PC$SEND_OK = 1
3001E85C  F8DF 0014		ldr r0, [pc, #+20] ; 0x1
3001E860  F8DF 7018		ldr r7, [pc, #+24] ; 0x20000333
3001E864  7038     		strb r0, [r7]

3001E866  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E86A  F8DD E000		ldr lr, [sp]
3001E86E  B002     		add sp, sp, #8

3001E870  4770     		bx lr

3001E874  00000001		; 0x00000001
3001E878  20000331		; 0x20000331
3001E87C  20000333		; 0x20000333

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

3001E890  B082     		sub sp, sp, #8
3001E892  F8CD E000		str lr, [sp]
3001E896  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
3001E89A  2000     		mov r0, #0 ; 0
3001E89C  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
3001E8A0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
3001E8A2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
3001E8A4  B088     		sub sp, sp, #32
3001E8A6  2700     		mov r7, #0 ; 0
3001E8A8  4639     		mov r1, r7
3001E8AA  2700     		mov r7, #0 ; 0
3001E8AC  463A     		mov r2, r7
3001E8AE  2700     		mov r7, #0 ; 0
3001E8B0  463B     		mov r3, r7
3001E8B2  2700     		mov r7, #0 ; 0
3001E8B4  F8CD 7000		str r7, [sp]
3001E8B8  2700     		mov r7, #0 ; 0
3001E8BA  F8CD 7004		str r7, [sp, #+4]
3001E8BE  2700     		mov r7, #0 ; 0
3001E8C0  F8CD 7008		str r7, [sp, #+8]
3001E8C4  2700     		mov r7, #0 ; 0
3001E8C6  F8CD 700C		str r7, [sp, #+12]
3001E8CA  2700     		mov r7, #0 ; 0
3001E8CC  F8CD 7010		str r7, [sp, #+16]
3001E8D0  2700     		mov r7, #0 ; 0
3001E8D2  F8CD 7014		str r7, [sp, #+20]
3001E8D6  2700     		mov r7, #0 ; 0
3001E8D8  F8CD 7018		str r7, [sp, #+24]
3001E8DC  F8DF 4010		ldr r4, [pc, #+16] ; 0x8079121
3001E8E0  F044 0401		orr r4, r4, #1
3001E8E4  47A0     		blx r4
3001E8E6  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
3001E8E8  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
3001E8EC  7038     		strb r0, [r7]

3001E8EE  E005     		b #10

3001E8F0  FFFFFFFF		; 0x08079121
3001E8F4  200002A5		; 0x200002A5
3001E8F8  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3001E8FC  2010     		mov r0, #16 ; 16
3001E8FE  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807FE39
3001E902  F044 0401		orr r4, r4, #1
3001E906  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
3001E908  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3001E90C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3001E90E  2000     		mov r0, #0 ; 0
3001E910  2100     		mov r1, #0 ; 0
3001E912  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807FE45
3001E916  F044 0401		orr r4, r4, #1
3001E91A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3001E91C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
3001E920  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
3001E922  2001     		mov r0, #1 ; 1
3001E924  2100     		mov r1, #0 ; 0
3001E926  F8DF 4098		ldr r4, [pc, #+152] ; 0x807FE45
3001E92A  F044 0401		orr r4, r4, #1
3001E92E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
3001E930  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
3001E934  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
3001E936  2002     		mov r0, #2 ; 2
3001E938  2100     		mov r1, #0 ; 0
3001E93A  F8DF 4084		ldr r4, [pc, #+132] ; 0x807FE45
3001E93E  F044 0401		orr r4, r4, #1
3001E942  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
3001E944  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
3001E948  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3001E94A  2003     		mov r0, #3 ; 3
3001E94C  2100     		mov r1, #0 ; 0
3001E94E  F8DF 4070		ldr r4, [pc, #+112] ; 0x807FE45
3001E952  F044 0401		orr r4, r4, #1
3001E956  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
3001E958  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3001E95C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3001E95E  2004     		mov r0, #4 ; 4
3001E960  2100     		mov r1, #0 ; 0
3001E962  F8DF 405C		ldr r4, [pc, #+92] ; 0x807FE45
3001E966  F044 0401		orr r4, r4, #1
3001E96A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3001E96C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
3001E970  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
3001E972  2005     		mov r0, #5 ; 5
3001E974  2100     		mov r1, #0 ; 0
3001E976  F8DF 4048		ldr r4, [pc, #+72] ; 0x807FE45
3001E97A  F044 0401		orr r4, r4, #1
3001E97E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
3001E980  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
3001E984  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
3001E986  2006     		mov r0, #6 ; 6
3001E988  2100     		mov r1, #0 ; 0
3001E98A  F8DF 4034		ldr r4, [pc, #+52] ; 0x807FE45
3001E98E  F044 0401		orr r4, r4, #1
3001E992  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
3001E994  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
3001E998  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
3001E99A  2007     		mov r0, #7 ; 7
3001E99C  2100     		mov r1, #0 ; 0
3001E99E  F8DF 4020		ldr r4, [pc, #+32] ; 0x807FE45
3001E9A2  F044 0401		orr r4, r4, #1
3001E9A6  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
3001E9A8  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
3001E9AC  7038     		strb r0, [r7]

3001E9AE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E9B2  F8DD E000		ldr lr, [sp]
3001E9B6  B002     		add sp, sp, #8

3001E9B8  4770     		bx lr

3001E9BC  FFFFFFFF		; 0x0807FE39
3001E9C0  FFFFFFFF		; 0x0807FE45
3001E9C4  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001E9C8  4770     		bx lr


*** OUTPUT:
3001E9CA  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

3001E9CC  B082     		sub sp, sp, #8
3001E9CE  F8CD E000		str lr, [sp]
3001E9D2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001E9D6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001E9DA  F8DD E000		ldr lr, [sp]
3001E9DE  B002     		add sp, sp, #8

3001E9E0  4770     		bx lr

**************************************************
	List program: MbMBoot
**************************************************

PROGRAM MbMBoot

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
memory_return : BOOL;
	END_VAR

END_PROGRAM

3001E9F0  B082     		sub sp, sp, #8
3001E9F2  F8CD E000		str lr, [sp]
3001E9F6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMBoot}
#1		(*$WAITSWITCH$*)
#2		
#3			(* memory_return := sysMbMRtu_MemoryMapping( 0, 0, 0, 0, 0); *)
#4			LDP0		0	{LNXT:2|3|-1}
(-) UDINT
#5			sysMbMRtu_MemoryMapping		0, 0, 0, 0	{LNXT:2|3|-1}
(*) USINT
3001E9FA  B082     		sub sp, sp, #8
3001E9FC  2700     		mov r7, #0 ; 0
3001E9FE  4638     		mov r0, r7
3001EA00  2700     		mov r7, #0 ; 0
3001EA02  4639     		mov r1, r7
3001EA04  2700     		mov r7, #0 ; 0
3001EA06  463A     		mov r2, r7
3001EA08  2700     		mov r7, #0 ; 0
3001EA0A  463B     		mov r3, r7
3001EA0C  2700     		mov r7, #0 ; 0
3001EA0E  F8CD 7000		str r7, [sp]
3001EA12  F8DF 407C		ldr r4, [pc, #+124] ; 0x8082015
3001EA16  F044 0401		orr r4, r4, #1
3001EA1A  47A0     		blx r4
3001EA1C  B002     		add sp, sp, #8

#6			ST		memory_return	{LNXT:2|3|-1}
(*) BOOL
3001EA1E  F8DF 7074		ldr r7, [pc, #+116] ; 0x200002AC
3001EA22  7038     		strb r0, [r7]

#7		
#8		
#9			(* IF memory_return *)
#10			LD		memory_return	{LNXT:3|-1|-1}
(*) UNDEF
3001EA24  F8DF 706C		ldr r7, [pc, #+108] ; 0x200002AC
3001EA28  7838     		ldrb r0, [r7]

#11			NOT	{LNXT:3|-1|-1}
(*) BOOL
3001EA2A  2800     		cmp r0, #0
3001EA2C  BF08 2001		eqmov r0, #1
3001EA30  BF18 2000		nemov r0, #0

#12			JMPCN	$label0	{LNXT:3|4|7}
(-) BOOL
3001EA34  2800     		cmp r0, #0
3001EA36  D002     		beq #4 ; 0x3001EA3E


#13		
#14			(* THEN *)
#15		
#16				(* RETURN *)
#17				RET
#18		
(-) BOOL
3001EA3A  E020     		b #64 ; 0x3001EA7E


#19		$label0:
#20			(* END_IF *)
#21		
#22			(* openChannel_return := sysMbMRtu_OpenChn2(0, MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0); *)
#23			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#24			sysMbMRtu_OpenChn2		MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0	{LNXT:7|8|-1}
(*) USINT
3001EA3E  B082     		sub sp, sp, #8
3001EA40  2000     		mov r0, #0 ; 0
3001EA42  F44F 4116		mov r1, #38400 ; 38400
3001EA46  2200     		mov r2, #0 ; 0
3001EA48  2301     		mov r3, #1 ; 1
3001EA4A  2702     		mov r7, #2 ; 2
3001EA4C  F8CD 7000		str r7, [sp]
3001EA50  2700     		mov r7, #0 ; 0
3001EA52  F8CD 7004		str r7, [sp, #+4]
3001EA56  F8DF 4034		ldr r4, [pc, #+52] ; 0x808134D
3001EA5A  F044 0401		orr r4, r4, #1
3001EA5E  47A0     		blx r4
3001EA60  B002     		add sp, sp, #8

#25			ST		openChannel_return	{LNXT:7|8|-1}
(*) USINT
3001EA62  F8DF 7034		ldr r7, [pc, #+52] ; 0x200002AD
3001EA66  7038     		strb r0, [r7]

#26		
#27		
#28			(* IF openChannel_return = 16#FF *)
#29			LD		openChannel_return	{LNXT:8|-1|-1}
(*) UNDEF
3001EA68  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002AD
3001EA6C  7838     		ldrb r0, [r7]

#30			EQ		16#FF	{LNXT:8|-1|-1}
(*) USINT
3001EA6E  28FF     		cmp r0, #255
3001EA70  BF18 2000		nemov r0, #0
3001EA74  BF08 2001		eqmov r0, #1

#31			JMPCN	$label1	{LNXT:8|9|2}
(-) BOOL
3001EA78  2800     		cmp r0, #0
3001EA7A  D000     		beq #0 ; 0x3001EA7E


#32		
#33			(* THEN *)
#34		
#35				(* RETURN *)
#36				RET
#37		
(-) BOOL
3001EA7E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EA82  F8DD E000		ldr lr, [sp]
3001EA86  B002     		add sp, sp, #8

3001EA88  4770     		bx lr

3001EA8C  FFFFFFFF		; 0x0808134D
3001EA90  FFFFFFFF		; 0x08082015
3001EA94  200002AC		; 0x200002AC
3001EA98  200002AD		; 0x200002AD

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EA9C  4770     		bx lr


*** OUTPUT:
3001EA9E  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

3001EAA0  B082     		sub sp, sp, #8
3001EAA2  F8CD E000		str lr, [sp]
3001EAA6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EAAA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EAAE  F8DD E000		ldr lr, [sp]
3001EAB2  B002     		add sp, sp, #8

3001EAB4  4770     		bx lr

**************************************************
	List program: MbMPrm
**************************************************

PROGRAM MbMPrm

        VAR
slaveparam_return : BOOL;
	END_VAR

END_PROGRAM

3001EAC0  B082     		sub sp, sp, #8
3001EAC2  F8CD E000		str lr, [sp]
3001EAC6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EACA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EACE  F8DD E000		ldr lr, [sp]
3001EAD2  B002     		add sp, sp, #8

3001EAD4  4770     		bx lr

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
3001EAD6  4770     		bx lr


*** OUTPUT:
3001EAD8  4770     		bx lr



**************************************************
	Task MbMPrm init code
**************************************************

3001EADA  B082     		sub sp, sp, #8
3001EADC  F8CD E000		str lr, [sp]
3001EAE0  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EAE4  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EAE8  F8DD E000		ldr lr, [sp]
3001EAEC  B002     		add sp, sp, #8

3001EAEE  4770     		bx lr



**************************************************
	Global init code
**************************************************

3001EB00  B082     		sub sp, sp, #8
3001EB02  F8CD E000		str lr, [sp]
3001EB06  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB0A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB0E  F8DD E000		ldr lr, [sp]
3001EB12  B002     		add sp, sp, #8

3001EB14  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

3001EB16  B082     		sub sp, sp, #8
3001EB18  F8CD E000		str lr, [sp]
3001EB1C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB20  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB24  F8DD E000		ldr lr, [sp]
3001EB28  B002     		add sp, sp, #8

3001EB2A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3001EB2C  B082     		sub sp, sp, #8
3001EB2E  F8CD E000		str lr, [sp]
3001EB32  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3001EB36  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3001EB3A  F8DD E000		ldr lr, [sp]
3001EB3E  B002     		add sp, sp, #8

3001EB40  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		000000003001E400h
End code area:            		000000003001ECE8h
Code size:                		000008E8h

Start local data area:    		0000000020000298h
End local data area:      		0000000020000334h
Local data size:          		0000009Ch

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                6021DBAD
DEBUG MEMO ID:                          3001E6EE
FULL MEMO ID:                           00006E8C
********************************************

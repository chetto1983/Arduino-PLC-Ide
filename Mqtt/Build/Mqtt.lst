***********************************************************************
*
*	CODE GENERATION LISTING FOR: Mqtt
*	COMPILER VERSION: 5.22.0.39
*
***********************************************************************

**************************************************
	CODE GENERATOR SUBROUTINES
**************************************************

$$MOD:
300000F0  FB90 F3F1		sdiv r3, r0, r1
300000F4  4359     		mul r1, r1, r3
300000F6  EBC1 0000		rsb r0, r1, r0
300000FA  4770     		bx lr

$$MOD_U:
300000FC  FBB0 F3F1		udiv r3, r0, r1
30000100  4359     		mul r1, r1, r3
30000102  EBC1 0000		rsb r0, r1, r0
30000106  4770     		bx lr

**************************************************
	List function block: TOF
**************************************************

FUNCTION_BLOCK TOF

	{ DE:"<HTML>The TOF block produces a delayed de-activation of the output Q with respect of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tofscheme.png>
<ul>
<li>if IN is TRUE then Q is TRUE</li>
<li>Q becomes FALSE after PT milliseconds from IN becomes FALSE</li>
<li>Q remains FALSE until IN remains FALSE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

30000108  E92D 4040		stmdb sp!, { r6, lr }
3000010C  462E     		mov r6, r5

#0		{SRC:TOF}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
3000010E  7930     		ldrb r0, [r6, #4]

#5			JMPC	lReset
(-) BOOL
30000110  2800     		cmp r0, #0
30000112  D130     		bne #96 ; 0x30000176


#6		
#7			(*	Check if falling edge of IN	*)
#8			LD		Q
(-) UNDEF
30000116  7B30     		ldrb r0, [r6, #12]

#9			RETCN
#10		
(-) BOOL
30000118  2800     		cmp r0, #0
3000011A  D031     		beq #98 ; 0x30000180


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
3000011E  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
30000120  2800     		cmp r0, #0
30000122  BF18 2000		nemov r0, #0
30000126  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
3000012A  2800     		cmp r0, #0
3000012C  D004     		beq #8 ; 0x30000138


#15			
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
30000130  F8DF 7054		ldr r7, [pc, #+84] ; 0x2401D500
30000134  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
30000136  6030     		str r0, [r6]

#19		
#20		lUpdate:
#21			
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
30000138  F8DF 704C		ldr r7, [pc, #+76] ; 0x2401D500
3000013C  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
3000013E  6837     		ldr r7, [r6]
30000140  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
30000142  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
30000144  68B7     		ldr r7, [r6, #8]
30000146  42B8     		cmp r0, r7
30000148  BF38 2000		lomov r0, #0
3000014C  BF28 2001		hsmov r0, #1

#27			STN		Q
(*) BOOL
30000150  B082     		sub sp, sp, #8
30000152  F8CD 0000		str r0, [sp]
30000156  2800     		cmp r0, #0
30000158  BF08 2001		eqmov r0, #1
3000015C  BF18 2000		nemov r0, #0
30000160  7330     		strb r0, [r6, #12]
30000162  F8DD 0000		ldr r0, [sp]
30000166  B002     		add sp, sp, #8

#28			RETCN
#29			
(-) BOOL
30000168  2800     		cmp r0, #0
3000016A  D009     		beq #18 ; 0x30000180


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
3000016E  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
30000170  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
30000172  E005     		b #10 ; 0x30000180


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
30000176  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
30000178  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
3000017A  6030     		str r0, [r6]

#41			LD		TRUE
(-) UNDEF
3000017C  2001     		mov r0, #1 ; 1

#42			ST		Q
(-) BOOL
3000017E  7330     		strb r0, [r6, #12]

30000180  E8BD 4040		ldmia sp!, { r6, lr }

30000184  4770     		bx lr

30000188  FFFFFFFF		; 0x2401D500


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD60000.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

3000018C  E92D 4040		stmdb sp!, { r6, lr }
30000190  462E     		mov r6, r5

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(-) UNDEF
30000192  7930     		ldrb r0, [r6, #4]

#5			JMPCN	lReset
(-) BOOL
30000194  2800     		cmp r0, #0
30000196  D025     		beq #74 ; 0x300001E4


#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(-) UNDEF
3000019A  7B30     		ldrb r0, [r6, #12]

#9			RETC
#10			
(-) BOOL
3000019C  2800     		cmp r0, #0
3000019E  D126     		bne #76 ; 0x300001EE


#11			(*	Check if already in counting *)
#12			LD		timStart
(-) UNDEF
300001A2  6830     		ldr r0, [r6]

#13			EQ		0
(*) UDINT
300001A4  2800     		cmp r0, #0
300001A6  BF18 2000		nemov r0, #0
300001AA  BF08 2001		eqmov r0, #1

#14			JMPCN	lUpdate
(-) BOOL
300001AE  2800     		cmp r0, #0
300001B0  D004     		beq #8 ; 0x300001BC


#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
300001B4  F8DF 703C		ldr r7, [pc, #+60] ; 0x2401D500
300001B8  6838     		ldr r0, [r7]

#18			ST		timStart
(-) UDINT
300001BA  6030     		str r0, [r6]

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
300001BC  F8DF 7034		ldr r7, [pc, #+52] ; 0x2401D500
300001C0  6838     		ldr r0, [r7]

#24			SUB		timStart
(*) UDINT
300001C2  6837     		ldr r7, [r6]
300001C4  1BC0     		sub r0, r0, r7

#25			ST		ET
(-) UDINT
300001C6  6130     		str r0, [r6, #16]

#26			GE		PT
(*) UDINT
300001C8  68B7     		ldr r7, [r6, #8]
300001CA  42B8     		cmp r0, r7
300001CC  BF38 2000		lomov r0, #0
300001D0  BF28 2001		hsmov r0, #1

#27			ST		Q
(-) BOOL
300001D4  7330     		strb r0, [r6, #12]

#28			RETCN
#29		
(-) BOOL
300001D6  2800     		cmp r0, #0
300001D8  D009     		beq #18 ; 0x300001EE


#30			(*	Limit actual time value *)
#31			LD		PT
(-) UNDEF
300001DC  68B0     		ldr r0, [r6, #8]

#32			ST		ET
(-) UDINT
300001DE  6130     		str r0, [r6, #16]

#33			RET
#34		
(-) UDINT
300001E0  E005     		b #10 ; 0x300001EE


#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(-) UNDEF
300001E4  2000     		mov r0, #0 ; 0

#39			ST		ET
(-) USINT
300001E6  6130     		str r0, [r6, #16]

#40			ST		timStart
(-) UDINT
300001E8  6030     		str r0, [r6]

#41			LD		FALSE
(-) UNDEF
300001EA  2000     		mov r0, #0 ; 0

#42			ST		Q
(-) BOOL
300001EC  7330     		strb r0, [r6, #12]

300001EE  E8BD 4040		ldmia sp!, { r6, lr }

300001F2  4770     		bx lr

300001F4  FFFFFFFF		; 0x2401D500


Frame allocation:

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0008       : VAR PT
	000C bit  0: VAR Q
	0010       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List function block: Clock_Gen
**************************************************

FUNCTION_BLOCK Clock_Gen

        VAR_INPUT
Tempo : UDINT;
	END_VAR

        VAR_OUTPUT
Out : BOOL;
	END_VAR

        VAR
Timer_1 : TON;
Timer_2 : TOF;
	END_VAR

END_FUNCTION_BLOCK

300001F8  E92D 4040		stmdb sp!, { r6, lr }
300001FC  462E     		mov r6, r5

#0			{SRC:Clock_Gen}
#1		 
#2		  
#3			(* Network 1 *)
#4			LDN		TIMER_2.Q {R:1$0}
(*) UNDEF
300001FE  F8DF 7060		ldr r7, [pc, #+96] ; 0x20
30000202  5DF0     		ldrb r0, [r6, +r7]
30000204  2800     		cmp r0, #0
30000206  BF08 2001		eqmov r0, #1
3000020A  BF18 2000		nemov r0, #0

#5			ST		TIMER_1.IN {R:1$2}
(-) BOOL
3000020E  7130     		strb r0, [r6, #4]

#6			MOVE		TEMPO,TIMER_1.PT {R:1$2}
(*) BOOL
30000210  6AF0     		ldr r0, [r6, #44]
30000212  60B0     		str r0, [r6, #8]

#7			CAL		TIMER_1 {R:1$2}
(*) UDINT
30000214  E92D 0021		stmdb sp!, { r0, r5 }
30000218  4635     		mov r5, r6
3000021A  467C     		mov r4, pc
3000021C  3C92     		sub r4, r4, #+0x92 ; 0x3000018C
3000021E  F044 0401		orr r4, r4, #1
30000222  47A0     		blx r4
30000224  E8BD 0021		ldmia sp!, { r0, r5 }

#8			LD		TIMER_1.Q {R:1$2}
(-) UNDEF
30000228  7B30     		ldrb r0, [r6, #12]

#9		 
#10			(* Network 2 *)
#11			LD		TIMER_1.Q {R:2$0}
(-) UNDEF
3000022A  7B30     		ldrb r0, [r6, #12]

#12			ST		TIMER_2.IN {R:2$3}
(-) BOOL
3000022C  7630     		strb r0, [r6, #24]

#13			MOVE		TEMPO,TIMER_2.PT {R:2$3}
(*) BOOL
3000022E  6AF0     		ldr r0, [r6, #44]
30000230  61F0     		str r0, [r6, #28]

#14			CAL		TIMER_2 {R:2$3}
(*) UDINT
30000232  E92D 0021		stmdb sp!, { r0, r5 }
30000236  F8DF 7024		ldr r7, [pc, #+36] ; 0x14
3000023A  19F5     		add r5, r6, r7
3000023C  F8DF 4028		ldr r4, [pc, #+40] ; 0x30000108
30000240  F044 0401		orr r4, r4, #1
30000244  47A0     		blx r4
30000246  E8BD 0021		ldmia sp!, { r0, r5 }

#15			LD		TIMER_2.Q {R:2$3}
(*) UNDEF
3000024A  F8DF 7014		ldr r7, [pc, #+20] ; 0x20
3000024E  5DF0     		ldrb r0, [r6, +r7]

#16			ST		OUT {R:2$5}
(*) BOOL
30000250  F8DF 7010		ldr r7, [pc, #+16] ; 0x30
30000254  55F0     		strb r0, [r6, +r7]

30000256  E8BD 4040		ldmia sp!, { r6, lr }

3000025A  4770     		bx lr

3000025C  00000014		; 0x00000014
30000260  00000020		; 0x00000020
30000264  00000030		; 0x00000030
30000268  30000108		; 0x30000108


Frame allocation:

	0000       : FB Timer_1
	0014       : FB Timer_2
	0028 bit  0: VAR $$VAR$0
	002C       : VAR Tempo
	0030 bit  0: VAR Out

END_FUNCTION_BLOCK
**************************************************
	List program: Mqtt_Handeler
**************************************************

PROGRAM Mqtt_Handeler

        VAR
Clock_1Hz : Clock_Gen;
	END_VAR

END_PROGRAM

30000270  B082     		sub sp, sp, #8
30000272  F8CD E000		str lr, [sp]
30000276  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0			{SRC:Mqtt_Handeler}
#1		 
#2		  
#3			(* Network 1 *)
#4			MOVE		500,CLOCK_1HZ.TEMPO {R:1$2}
(*) UDINT
3000027A  F44F 70FA		mov r0, #500 ; 500
3000027E  F8DF 70C0		ldr r7, [pc, #+192] ; 0x200002DC
30000282  6038     		str r0, [r7]

#5			CAL		CLOCK_1HZ {R:1$2}
(*) UDINT
30000284  E92D 0021		stmdb sp!, { r0, r5 }
30000288  F8DF 50B0		ldr r5, [pc, #+176] ; 0x200002B0
3000028C  467C     		mov r4, pc
3000028E  3C98     		sub r4, r4, #+0x98 ; 0x300001F8
30000290  F044 0401		orr r4, r4, #1
30000294  47A0     		blx r4
30000296  E8BD 0021		ldmia sp!, { r0, r5 }

#6			MOVE		CLOCK_1HZ.OUT,LEDGREEN {R:1$2}
(*) UDINT
3000029A  F8DF 70A8		ldr r7, [pc, #+168] ; 0x200002E0
3000029E  7838     		ldrb r0, [r7]
300002A0  F8DF 70B0		ldr r7, [pc, #+176] ; 0x2401E5C5
300002A4  7038     		strb r0, [r7]

#7			LD		TRUE
(-) UNDEF
300002A6  2001     		mov r0, #1 ; 1

#8		 
#9			(* Network 2 *)
#10			LD		SENDMQTT {R:2$0}
(*) UNDEF
300002A8  F8DF 708C		ldr r7, [pc, #+140] ; 0x200002AF
300002AC  7838     		ldrb r0, [r7]

#11			AND		MQTT_OK {R:2$12}
(*) BOOL
300002AE  F8DF 70A8		ldr r7, [pc, #+168] ; 0x38000000
300002B2  783F     		ldrb r7, [r7]
300002B4  4038     		and r0, r0, r7

#12			ST		$$VAR$1
(*) BOOL
300002B6  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002AE
300002BA  7038     		strb r0, [r7]

#13			JMPCN	$$LAB$1
(-) BOOL
300002BC  2800     		cmp r0, #0
300002BE  D008     		beq #16 ; 0x300002D2


#14			LD		PLC_TEMP {R:2$3}
(*) UNDEF
300002C2  F8DF 7084		ldr r7, [pc, #+132] ; 0x200002E4
300002C6  ED97 0A00		flds s0, [r7]

#15			ST		TEMPERATURA {R:2$4}
(*) REAL
300002CA  F8DF 709C		ldr r7, [pc, #+156] ; 0x38000204
300002CE  ED87 0A00		fsts s0, [r7]

#16		$$LAB$1:
#17			LD		$$VAR$1
(*) UNDEF
300002D2  F8DF 7060		ldr r7, [pc, #+96] ; 0x200002AE
300002D6  7838     		ldrb r0, [r7]

#18			ST		$$VAR$2
(*) BOOL
300002D8  F8DF 7074		ldr r7, [pc, #+116] ; 0x200002EC
300002DC  7038     		strb r0, [r7]

#19			JMPCN	$$LAB$2
(-) BOOL
300002DE  2800     		cmp r0, #0
300002E0  D008     		beq #16 ; 0x300002F4


#20			LD		PLC_HUM {R:2$7}
(*) UNDEF
300002E4  F8DF 7064		ldr r7, [pc, #+100] ; 0x200002E8
300002E8  ED97 0A00		flds s0, [r7]

#21			ST		UMIDITA {R:2$8}
(*) REAL
300002EC  F8DF 707C		ldr r7, [pc, #+124] ; 0x38000208
300002F0  ED87 0A00		fsts s0, [r7]

#22		$$LAB$2:
#23			LD		$$VAR$2
(*) UNDEF
300002F4  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002EC
300002F8  7838     		ldrb r0, [r7]

#24			ST		SEND_DATA {R:2$9}
(*) BOOL
300002FA  F8DF 7068		ldr r7, [pc, #+104] ; 0x38000200
300002FE  7038     		strb r0, [r7]

#25		 
#26			(* Network 3 *)
#27			LD		SEND_OK {R:3$0}
(*) UNDEF
30000300  F8DF 7058		ldr r7, [pc, #+88] ; 0x38000001
30000304  7838     		ldrb r0, [r7]

#28			OR		SEND_KO {R:3$2}
(*) BOOL
30000306  F8DF 7058		ldr r7, [pc, #+88] ; 0x38000002
3000030A  783F     		ldrb r7, [r7]
3000030C  4338     		orr r0, r0, r7

#29			R		SENDMQTT {R:3$1}
(*) BOOL
3000030E  2800     		cmp r0, #0
30000310  D009     		beq #0x000012
30000312  B082     		sub sp, sp, #8
30000314  F8CD 0000		str r0, [sp]
30000318  2000     		mov r0, #0
3000031A  F8DF 701C		ldr r7, [pc, #+28] ; 0x200002AF
3000031E  7038     		strb r0, [r7]
30000320  F8DD 0000		ldr r0, [sp]
30000324  B002     		add sp, sp, #8

30000326  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000032A  F8DD E000		ldr lr, [sp]
3000032E  B002     		add sp, sp, #8

30000330  4770     		bx lr

30000334  200002AE		; 0x200002AE
30000338  200002AF		; 0x200002AF
3000033C  200002B0		; 0x200002B0
30000340  200002DC		; 0x200002DC
30000344  200002E0		; 0x200002E0
30000348  200002E4		; 0x200002E4
3000034C  200002E8		; 0x200002E8
30000350  200002EC		; 0x200002EC
30000354  FFFFFFFF		; 0x2401E5C5
30000358  FFFFFFFF		; 0x38000000
3000035C  FFFFFFFF		; 0x38000001
30000360  FFFFFFFF		; 0x38000002
30000364  FFFFFFFF		; 0x38000200
30000368  FFFFFFFF		; 0x38000204
3000036C  FFFFFFFF		; 0x38000208

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
30000370  4770     		bx lr


*** OUTPUT:
30000372  4770     		bx lr



**************************************************
	Task Fast init code
**************************************************

30000374  B082     		sub sp, sp, #8
30000376  F8CD E000		str lr, [sp]
3000037A  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000037E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000382  F8DD E000		ldr lr, [sp]
30000386  B002     		add sp, sp, #8

30000388  4770     		bx lr

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

300003A0  B082     		sub sp, sp, #8
300003A2  F8CD E000		str lr, [sp]
300003A6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 0; *)
#4			MOVE		0,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
300003AA  2000     		mov r0, #0 ; 0
300003AC  F8DF 7058		ldr r7, [pc, #+88] ; 0x200002A8
300003B0  6038     		str r0, [r7]

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( TO_DWORD( 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); *)
#7			LDP0		0	{LNXT:5|3|-1}
(-) UDINT
#8			TO_DWORD	{LNXT:5|3|-1}
(-) USINT
300003B2  2000     		mov r0, #0 ; 0

#9			sysDBase_SetExtTable		0, 0, 0, 0, 0, 0, 0, 0, 0, 0	{LNXT:5|3|-1}
(*) DWORD
300003B4  B088     		sub sp, sp, #32
300003B6  2700     		mov r7, #0 ; 0
300003B8  4639     		mov r1, r7
300003BA  2700     		mov r7, #0 ; 0
300003BC  463A     		mov r2, r7
300003BE  2700     		mov r7, #0 ; 0
300003C0  463B     		mov r3, r7
300003C2  2700     		mov r7, #0 ; 0
300003C4  F8CD 7000		str r7, [sp]
300003C8  2700     		mov r7, #0 ; 0
300003CA  F8CD 7004		str r7, [sp, #+4]
300003CE  2700     		mov r7, #0 ; 0
300003D0  F8CD 7008		str r7, [sp, #+8]
300003D4  2700     		mov r7, #0 ; 0
300003D6  F8CD 700C		str r7, [sp, #+12]
300003DA  2700     		mov r7, #0 ; 0
300003DC  F8CD 7010		str r7, [sp, #+16]
300003E0  2700     		mov r7, #0 ; 0
300003E2  F8CD 7014		str r7, [sp, #+20]
300003E6  2700     		mov r7, #0 ; 0
300003E8  F8CD 7018		str r7, [sp, #+24]
300003EC  F8DF 4010		ldr r4, [pc, #+16] ; 0x8078C81
300003F0  F044 0401		orr r4, r4, #1
300003F4  47A0     		blx r4
300003F6  B008     		add sp, sp, #32

#10			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
300003F8  F8DF 7008		ldr r7, [pc, #+8] ; 0x200002A5
300003FC  7038     		strb r0, [r7]

300003FE  E005     		b #10

30000400  FFFFFFFF		; 0x08078C81
30000404  200002A5		; 0x200002A5
30000408  200002A8		; 0x200002A8

END_PROGRAM
**************************************************
	List program: $$IOConfig
**************************************************

PROGRAM $$IOConfig

        VAR
warningsKiller : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:$$IOConfig}
#1		(*$WAITSWITCH$*)
#2		
#3			(* warningsKiller := sysCfgAnalogRes(16); *)
#4			LDP0		16	{LNXT:4|7|-1}
(-) UDINT
#5			sysCfgAnalogRes	{LNXT:4|7|-1}
(*) USINT
3000040C  2010     		mov r0, #16 ; 16
3000040E  F8DF 40BC		ldr r4, [pc, #+188] ; 0x807F999
30000412  F044 0401		orr r4, r4, #1
30000416  47A0     		blx r4

#6			ST		warningsKiller	{LNXT:4|7|-1}
(*) BOOL
30000418  F8DF 70B8		ldr r7, [pc, #+184] ; 0x200002A4
3000041C  7038     		strb r0, [r7]

#7		
#8			(* warningsKiller := sysCfgProgInput(0, 0); *)
#9			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#10			sysCfgProgInput		0	{LNXT:7|8|-1}
(*) USINT
3000041E  2000     		mov r0, #0 ; 0
30000420  2100     		mov r1, #0 ; 0
30000422  F8DF 40AC		ldr r4, [pc, #+172] ; 0x807F9A5
30000426  F044 0401		orr r4, r4, #1
3000042A  47A0     		blx r4

#11			ST		warningsKiller	{LNXT:7|8|-1}
(*) BOOL
3000042C  F8DF 70A4		ldr r7, [pc, #+164] ; 0x200002A4
30000430  7038     		strb r0, [r7]

#12		
#13			(* warningsKiller := sysCfgProgInput(1, 0); *)
#14			LDP0		1	{LNXT:8|9|-1}
(-) BOOL
#15			sysCfgProgInput		0	{LNXT:8|9|-1}
(*) USINT
30000432  2001     		mov r0, #1 ; 1
30000434  2100     		mov r1, #0 ; 0
30000436  F8DF 4098		ldr r4, [pc, #+152] ; 0x807F9A5
3000043A  F044 0401		orr r4, r4, #1
3000043E  47A0     		blx r4

#16			ST		warningsKiller	{LNXT:8|9|-1}
(*) BOOL
30000440  F8DF 7090		ldr r7, [pc, #+144] ; 0x200002A4
30000444  7038     		strb r0, [r7]

#17		
#18			(* warningsKiller := sysCfgProgInput(2, 0); *)
#19			LDP0		2	{LNXT:9|10|-1}
(-) BOOL
#20			sysCfgProgInput		0	{LNXT:9|10|-1}
(*) USINT
30000446  2002     		mov r0, #2 ; 2
30000448  2100     		mov r1, #0 ; 0
3000044A  F8DF 4084		ldr r4, [pc, #+132] ; 0x807F9A5
3000044E  F044 0401		orr r4, r4, #1
30000452  47A0     		blx r4

#21			ST		warningsKiller	{LNXT:9|10|-1}
(*) BOOL
30000454  F8DF 707C		ldr r7, [pc, #+124] ; 0x200002A4
30000458  7038     		strb r0, [r7]

#22		
#23			(* warningsKiller := sysCfgProgInput(3, 0); *)
#24			LDP0		3	{LNXT:10|11|-1}
(-) BOOL
#25			sysCfgProgInput		0	{LNXT:10|11|-1}
(*) USINT
3000045A  2003     		mov r0, #3 ; 3
3000045C  2100     		mov r1, #0 ; 0
3000045E  F8DF 4070		ldr r4, [pc, #+112] ; 0x807F9A5
30000462  F044 0401		orr r4, r4, #1
30000466  47A0     		blx r4

#26			ST		warningsKiller	{LNXT:10|11|-1}
(*) BOOL
30000468  F8DF 7068		ldr r7, [pc, #+104] ; 0x200002A4
3000046C  7038     		strb r0, [r7]

#27		
#28			(* warningsKiller := sysCfgProgInput(4, 0); *)
#29			LDP0		4	{LNXT:11|12|-1}
(-) BOOL
#30			sysCfgProgInput		0	{LNXT:11|12|-1}
(*) USINT
3000046E  2004     		mov r0, #4 ; 4
30000470  2100     		mov r1, #0 ; 0
30000472  F8DF 405C		ldr r4, [pc, #+92] ; 0x807F9A5
30000476  F044 0401		orr r4, r4, #1
3000047A  47A0     		blx r4

#31			ST		warningsKiller	{LNXT:11|12|-1}
(*) BOOL
3000047C  F8DF 7054		ldr r7, [pc, #+84] ; 0x200002A4
30000480  7038     		strb r0, [r7]

#32		
#33			(* warningsKiller := sysCfgProgInput(5, 0); *)
#34			LDP0		5	{LNXT:12|13|-1}
(-) BOOL
#35			sysCfgProgInput		0	{LNXT:12|13|-1}
(*) USINT
30000482  2005     		mov r0, #5 ; 5
30000484  2100     		mov r1, #0 ; 0
30000486  F8DF 4048		ldr r4, [pc, #+72] ; 0x807F9A5
3000048A  F044 0401		orr r4, r4, #1
3000048E  47A0     		blx r4

#36			ST		warningsKiller	{LNXT:12|13|-1}
(*) BOOL
30000490  F8DF 7040		ldr r7, [pc, #+64] ; 0x200002A4
30000494  7038     		strb r0, [r7]

#37		
#38			(* warningsKiller := sysCfgProgInput(6, 0); *)
#39			LDP0		6	{LNXT:13|14|-1}
(-) BOOL
#40			sysCfgProgInput		0	{LNXT:13|14|-1}
(*) USINT
30000496  2006     		mov r0, #6 ; 6
30000498  2100     		mov r1, #0 ; 0
3000049A  F8DF 4034		ldr r4, [pc, #+52] ; 0x807F9A5
3000049E  F044 0401		orr r4, r4, #1
300004A2  47A0     		blx r4

#41			ST		warningsKiller	{LNXT:13|14|-1}
(*) BOOL
300004A4  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002A4
300004A8  7038     		strb r0, [r7]

#42		
#43			(* warningsKiller := sysCfgProgInput(7, 0); *)
#44			LDP0		7	{LNXT:14|4|-1}
(-) BOOL
#45			sysCfgProgInput		0	{LNXT:14|4|-1}
(*) USINT
300004AA  2007     		mov r0, #7 ; 7
300004AC  2100     		mov r1, #0 ; 0
300004AE  F8DF 4020		ldr r4, [pc, #+32] ; 0x807F9A5
300004B2  F044 0401		orr r4, r4, #1
300004B6  47A0     		blx r4

#46			ST		warningsKiller	{LNXT:14|4|-1}
(*) BOOL
300004B8  F8DF 7018		ldr r7, [pc, #+24] ; 0x200002A4
300004BC  7038     		strb r0, [r7]

300004BE  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300004C2  F8DD E000		ldr lr, [sp]
300004C6  B002     		add sp, sp, #8

300004C8  4770     		bx lr

300004CC  FFFFFFFF		; 0x0807F999
300004D0  FFFFFFFF		; 0x0807F9A5
300004D4  200002A4		; 0x200002A4

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300004D8  4770     		bx lr


*** OUTPUT:
300004DA  4770     		bx lr



**************************************************
	Task Init init code
**************************************************

300004DC  B082     		sub sp, sp, #8
300004DE  F8CD E000		str lr, [sp]
300004E2  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300004E6  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300004EA  F8DD E000		ldr lr, [sp]
300004EE  B002     		add sp, sp, #8

300004F0  4770     		bx lr

**************************************************
	List program: MbMBoot
**************************************************

PROGRAM MbMBoot

        VAR
openChannel_return : USINT;
slave_return : USINT;
broadMsg_return : BOOL;
slaveMsg_return : BOOL;
memory_return : BOOL;
	END_VAR

END_PROGRAM

30000500  B082     		sub sp, sp, #8
30000502  F8CD E000		str lr, [sp]
30000506  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

#0		{SRC:MbMBoot}
#1		(*$WAITSWITCH$*)
#2		
#3			(* memory_return := sysMbMRtu_MemoryMapping( 0, 0, 0, 0, 0); *)
#4			LDP0		0	{LNXT:2|3|-1}
(-) UDINT
#5			sysMbMRtu_MemoryMapping		0, 0, 0, 0	{LNXT:2|3|-1}
(*) USINT
3000050A  B082     		sub sp, sp, #8
3000050C  2700     		mov r7, #0 ; 0
3000050E  4638     		mov r0, r7
30000510  2700     		mov r7, #0 ; 0
30000512  4639     		mov r1, r7
30000514  2700     		mov r7, #0 ; 0
30000516  463A     		mov r2, r7
30000518  2700     		mov r7, #0 ; 0
3000051A  463B     		mov r3, r7
3000051C  2700     		mov r7, #0 ; 0
3000051E  F8CD 7000		str r7, [sp]
30000522  F8DF 407C		ldr r4, [pc, #+124] ; 0x8081B75
30000526  F044 0401		orr r4, r4, #1
3000052A  47A0     		blx r4
3000052C  B002     		add sp, sp, #8

#6			ST		memory_return	{LNXT:2|3|-1}
(*) BOOL
3000052E  F8DF 7074		ldr r7, [pc, #+116] ; 0x200002AC
30000532  7038     		strb r0, [r7]

#7		
#8		
#9			(* IF memory_return *)
#10			LD		memory_return	{LNXT:3|-1|-1}
(*) UNDEF
30000534  F8DF 706C		ldr r7, [pc, #+108] ; 0x200002AC
30000538  7838     		ldrb r0, [r7]

#11			NOT	{LNXT:3|-1|-1}
(*) BOOL
3000053A  2800     		cmp r0, #0
3000053C  BF08 2001		eqmov r0, #1
30000540  BF18 2000		nemov r0, #0

#12			JMPCN	$label0	{LNXT:3|4|7}
(-) BOOL
30000544  2800     		cmp r0, #0
30000546  D002     		beq #4 ; 0x3000054E


#13		
#14			(* THEN *)
#15		
#16				(* RETURN *)
#17				RET
#18		
(-) BOOL
3000054A  E020     		b #64 ; 0x3000058E


#19		$label0:
#20			(* END_IF *)
#21		
#22			(* openChannel_return := sysMbMRtu_OpenChn2(0, MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0); *)
#23			LDP0		0	{LNXT:7|8|-1}
(-) BOOL
#24			sysMbMRtu_OpenChn2		MbBaudrate#MbBaud_38400, MbMode#MbMode_8N1, 1, 2, 0	{LNXT:7|8|-1}
(*) USINT
3000054E  B082     		sub sp, sp, #8
30000550  2000     		mov r0, #0 ; 0
30000552  F44F 4116		mov r1, #38400 ; 38400
30000556  2200     		mov r2, #0 ; 0
30000558  2301     		mov r3, #1 ; 1
3000055A  2702     		mov r7, #2 ; 2
3000055C  F8CD 7000		str r7, [sp]
30000560  2700     		mov r7, #0 ; 0
30000562  F8CD 7004		str r7, [sp, #+4]
30000566  F8DF 4034		ldr r4, [pc, #+52] ; 0x8080EAD
3000056A  F044 0401		orr r4, r4, #1
3000056E  47A0     		blx r4
30000570  B002     		add sp, sp, #8

#25			ST		openChannel_return	{LNXT:7|8|-1}
(*) USINT
30000572  F8DF 7034		ldr r7, [pc, #+52] ; 0x200002AD
30000576  7038     		strb r0, [r7]

#26		
#27		
#28			(* IF openChannel_return = 16#FF *)
#29			LD		openChannel_return	{LNXT:8|-1|-1}
(*) UNDEF
30000578  F8DF 702C		ldr r7, [pc, #+44] ; 0x200002AD
3000057C  7838     		ldrb r0, [r7]

#30			EQ		16#FF	{LNXT:8|-1|-1}
(*) USINT
3000057E  28FF     		cmp r0, #255
30000580  BF18 2000		nemov r0, #0
30000584  BF08 2001		eqmov r0, #1

#31			JMPCN	$label1	{LNXT:8|9|2}
(-) BOOL
30000588  2800     		cmp r0, #0
3000058A  D000     		beq #0 ; 0x3000058E


#32		
#33			(* THEN *)
#34		
#35				(* RETURN *)
#36				RET
#37		
(-) BOOL
3000058E  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000592  F8DD E000		ldr lr, [sp]
30000596  B002     		add sp, sp, #8

30000598  4770     		bx lr

3000059C  FFFFFFFF		; 0x08080EAD
300005A0  FFFFFFFF		; 0x08081B75
300005A4  200002AC		; 0x200002AC
300005A8  200002AD		; 0x200002AD

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300005AC  4770     		bx lr


*** OUTPUT:
300005AE  4770     		bx lr



**************************************************
	Task MbBoot init code
**************************************************

300005B0  B082     		sub sp, sp, #8
300005B2  F8CD E000		str lr, [sp]
300005B6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300005BA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300005BE  F8DD E000		ldr lr, [sp]
300005C2  B002     		add sp, sp, #8

300005C4  4770     		bx lr

**************************************************
	List program: MbMPrm
**************************************************

PROGRAM MbMPrm

        VAR
slaveparam_return : BOOL;
	END_VAR

END_PROGRAM

300005D0  B082     		sub sp, sp, #8
300005D2  F8CD E000		str lr, [sp]
300005D6  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300005DA  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300005DE  F8DD E000		ldr lr, [sp]
300005E2  B002     		add sp, sp, #8

300005E4  4770     		bx lr

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
300005E6  4770     		bx lr


*** OUTPUT:
300005E8  4770     		bx lr



**************************************************
	Task MbMPrm init code
**************************************************

300005EA  B082     		sub sp, sp, #8
300005EC  F8CD E000		str lr, [sp]
300005F0  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

300005F4  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
300005F8  F8DD E000		ldr lr, [sp]
300005FC  B002     		add sp, sp, #8

300005FE  4770     		bx lr



**************************************************
	Global init code
**************************************************

30000610  B082     		sub sp, sp, #8
30000612  F8CD E000		str lr, [sp]
30000616  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

3000061A  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000061E  F8DD E000		ldr lr, [sp]
30000622  B002     		add sp, sp, #8

30000624  4770     		bx lr



**************************************************
	Global RETAIN init code
**************************************************

30000626  B082     		sub sp, sp, #8
30000628  F8CD E000		str lr, [sp]
3000062C  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000630  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
30000634  F8DD E000		ldr lr, [sp]
30000638  B002     		add sp, sp, #8

3000063A  4770     		bx lr



**************************************************
	Task $$VirtualTables init code
**************************************************

3000063C  B082     		sub sp, sp, #8
3000063E  F8CD E000		str lr, [sp]
30000642  E92D 0FF0		stmdb sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }

30000646  E8BD 0FF0		ldmia sp!, { r4, r5, r6, r7, r8, r9, r10, r11 }
3000064A  F8DD E000		ldr lr, [sp]
3000064E  B002     		add sp, sp, #8

30000650  4770     		bx lr



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000030000000h
End code area:            		00000000300007F8h
Code size:                		000007F8h

Start local data area:    		0000000020000298h
End local data area:      		00000000200002EDh
Local data size:          		00000055h

Start retentive data area:		0000000038000800h
End retentive data area:  		0000000038000800h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                2EBC96DE
DEBUG MEMO ID:                          300002EE
FULL MEMO ID:                           0000C385
********************************************
